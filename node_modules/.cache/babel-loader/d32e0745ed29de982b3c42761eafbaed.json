{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (b) {\n  b.jqx.jqxWidget(\"jqxGrid\", \"\", {});\n  b.extend(b.jqx._jqxGrid.prototype, {\n    defineInstance: function () {\n      var d = {\n        adaptive: false,\n        adaptivewidth: 600,\n        disabled: false,\n        width: 600,\n        height: 400,\n        pagerheight: 40,\n        groupsheaderheight: 34,\n        pagesize: 10,\n        pagesizeoptions: [\"5\", \"10\", \"20\"],\n        rowsheight: 32,\n        columnsheight: 32,\n        filterrowheight: 36,\n        groupindentwidth: 30,\n        rowdetails: false,\n        enablerowdetailsindent: true,\n        enablemousewheel: true,\n        initrowdetails: null,\n        layoutrowdetails: null,\n        editable: false,\n        editmode: \"selectedcell\",\n        pageable: false,\n        pagermode: \"default\",\n        pagerbuttonscount: 5,\n        groupable: false,\n        sortable: false,\n        sortmode: \"one\",\n        filterable: false,\n        filtermode: \"default\",\n        autoshowfiltericon: true,\n        showfiltercolumnbackground: true,\n        showpinnedcolumnbackground: true,\n        showsortcolumnbackground: true,\n        altrows: false,\n        altstart: 1,\n        altstep: 1,\n        showrowdetailscolumn: true,\n        showrowlines: true,\n        showcolumnlines: true,\n        showcolumnheaderlines: true,\n        showtoolbar: false,\n        toolbarheight: 36,\n        showstatusbar: false,\n        statusbarheight: 36,\n        enableellipsis: true,\n        groups: [],\n        groupsrenderer: null,\n        groupcolumnrenderer: null,\n        groupsexpandedbydefault: false,\n        pagerrenderer: null,\n        touchmode: \"auto\",\n        columns: [],\n        selectedrowindex: -1,\n        selectedrowindexes: new Array(),\n        selectedcells: new Array(),\n        autobind: true,\n        selectedcell: null,\n        tableZIndex: 79,\n        headerZIndex: 29,\n        updatefilterconditions: null,\n        showgroupaggregates: false,\n        showaggregates: false,\n        showfilterrow: false,\n        showeverpresentrow: false,\n        everpresentrowposition: \"top\",\n        everpresentrowactions: \"add reset\",\n        everpresentrowactionsmode: \"buttons\",\n        everpresentrowheight: 30,\n        autorowheight: false,\n        autokoupdates: true,\n        handlekeyboardnavigation: null,\n        showsortmenuitems: true,\n        showfiltermenuitems: true,\n        showgroupmenuitems: true,\n        enablebrowserselection: false,\n        enablekeyboarddelete: true,\n        clipboard: true,\n        clipboardbegin: null,\n        clipboardend: null,\n        copytoclipboardwithheaders: false,\n        copytoclipboardhiddencolumns: false,\n        ready: null,\n        updatefilterpanel: null,\n        autogeneratecolumns: false,\n        rowdetailstemplate: null,\n        scrollfeedback: null,\n        rendertoolbar: null,\n        renderstatusbar: null,\n        rendered: null,\n        multipleselectionbegins: null,\n        columngroups: null,\n        cellhover: null,\n        source: {\n          beforeprocessing: null,\n          beforesend: null,\n          loaderror: null,\n          localdata: null,\n          data: null,\n          datatype: \"array\",\n          datafields: [],\n          url: \"\",\n          root: \"\",\n          record: \"\",\n          id: \"\",\n          totalrecords: 0,\n          recordstartindex: 0,\n          recordendindex: 0,\n          loadallrecords: true,\n          sortcolumn: null,\n          sortdirection: null,\n          sort: null,\n          filter: null,\n          sortcomparer: null\n        },\n        filter: null,\n        dataview: null,\n        updatedelay: null,\n        autoheight: false,\n        autowidth: false,\n        showheader: true,\n        showgroupsheader: true,\n        closeablegroups: true,\n        scrollbarsize: b.jqx.utilities.scrollBarSize,\n        touchscrollbarsize: b.jqx.utilities.touchScrollBarSize,\n        scrollbarautoshow: b.jqx.utilities.scrollBarAutoShow,\n        virtualmode: false,\n        sort: null,\n        columnsmenu: true,\n        columnsresize: false,\n        columnsautoresize: true,\n        columnsreorder: false,\n        columnsmenuwidth: 16,\n        autoshowcolumnsmenubutton: true,\n        showcolumnsactionbutton: false,\n        popupwidth: \"auto\",\n        popupheight: \"auto\",\n        columnmenuopening: null,\n        columnmenuclosing: null,\n        sorttogglestates: 2,\n        rendergridrows: null,\n        enableanimations: true,\n        enablecolumnsvirtualization: true,\n        enabletooltips: false,\n        selectionmode: \"singlerow\",\n        enablehover: true,\n        loadingerrormessage: \"The data is still loading. When the data binding is completed, the Grid raises the 'bindingcomplete' event. Call this function in the 'bindingcomplete' event handler.\",\n        verticalscrollbarstep: 30,\n        verticalscrollbarlargestep: 400,\n        horizontalscrollbarstep: 10,\n        horizontalscrollbarlargestep: 50,\n        keyboardnavigation: true,\n        keyboardmenunavigation: true,\n        touchModeStyle: \"auto\",\n        autoshowloadelement: true,\n        showdefaultloadelement: true,\n        showemptyrow: true,\n        autosavestate: false,\n        autoloadstate: false,\n        _updating: false,\n        _pagescache: new Array(),\n        _pageviews: new Array(),\n        _cellscache: new Array(),\n        _rowdetailscache: new Array(),\n        _rowdetailselementscache: new Array(),\n        _requiresupdate: false,\n        _hasOpenedMenu: false,\n        scrollmode: \"physical\",\n        deferreddatafields: null,\n        localization: null,\n        rtl: false,\n        menuitemsarray: [],\n        events: [\"initialized\", \"rowClick\", \"rowSelect\", \"rowUnselect\", \"groupExpand\", \"groupCollapse\", \"sort\", \"columnClick\", \"cellClick\", \"pageChanged\", \"pageSizeChanged\", \"bindingComplete\", \"groupsChanged\", \"filter\", \"columnResized\", \"cellSelect\", \"cellUnselect\", \"cellBeginEdit\", \"cellEndEdit\", \"cellValueChanged\", \"rowExpand\", \"rowCollapse\", \"rowDoubleClick\", \"cellDoubleClick\", \"columnReordered\", \"pageChanging\"]\n      };\n\n      if (this === b.jqx._jqxGrid.prototype) {\n        return d;\n      }\n\n      b.extend(true, this, d);\n      return d;\n    },\n    createInstance: function (i) {\n      this.that = this;\n      var h = this;\n      h.pagesize = parseInt(h.pagesize);\n      h.toolbarheight = parseInt(h.toolbarheight);\n      h.columnsheight = parseInt(h.columnsheight);\n      h.filterrowheight = parseInt(h.filterrowheight);\n      h.statusbarheight = parseInt(h.statusbarheight);\n      h.groupsheaderheight = parseInt(h.groupsheaderheight);\n      h.detailsVisibility = new Array();\n      h.savedArgs = i && i.length > 0 ? i[0] : null;\n      var g = \"<div class='jqx-clear jqx-border-reset jqx-overflow-hidden jqx-max-size jqx-position-relative'><div tabindex='1' class='jqx-clear jqx-max-size jqx-position-relative jqx-overflow-hidden jqx-background-reset' id='wrapper\" + h.element.id + \"'><div class='jqx-clear jqx-position-absolute' id='toolbar' style='visibility: hidden;'></div><div class='jqx-clear jqx-position-absolute' id='groupsheader' style='visibility: hidden;'></div><div class='jqx-clear jqx-overflow-hidden jqx-position-absolute jqx-border-reset jqx-background-reset' id='content\" + h.element.id + \"'></div><div class='jqx-clear jqx-position-absolute' id='verticalScrollBar\" + h.element.id + \"'></div><div class='jqx-clear jqx-position-absolute' id='horizontalScrollBar\" + h.element.id + \"'></div><div class='jqx-clear jqx-position-absolute jqx-border-reset' id='bottomRight'></div><div class='jqx-clear jqx-position-absolute' id='addrow'></div><div class='jqx-clear jqx-position-absolute' id='statusbar'></div><div class='jqx-clear jqx-position-absolute' id='pager' style='z-index: 20;'></div></div></div>\";\n      h.element.innerHTML = \"\";\n\n      if (h.source) {\n        if (!h.source.dataBind) {\n          if (!b.jqx.dataAdapter) {\n            throw new Error(\"jqxGrid: Missing reference to jqxdata.js\");\n          }\n\n          h.source = new b.jqx.dataAdapter(h.source);\n        }\n\n        var e = h.source._source.datafields;\n\n        if (e && e.length > 0) {\n          h.editmode = h.editmode.toLowerCase();\n          h.selectionmode = h.selectionmode.toLowerCase();\n        }\n      }\n\n      h.host.attr(\"role\", \"grid\");\n      h.host.attr(\"align\", \"left\");\n      h.element.innerHTML = g;\n      h.host.addClass(h.toTP(\"jqx-grid\"));\n      h.host.addClass(h.toTP(\"jqx-reset\"));\n      h.host.addClass(h.toTP(\"jqx-rc-all\"));\n      h.host.addClass(h.toTP(\"jqx-widget\"));\n      h.host.addClass(h.toTP(\"jqx-widget-content\"));\n      h.wrapper = h.host.find(\"#wrapper\" + h.element.id);\n      h.content = h.host.find(\"#content\" + h.element.id);\n      h.content.addClass(h.toTP(\"jqx-reset\"));\n      var n = h.host.find(\"#verticalScrollBar\" + h.element.id);\n      var r = h.host.find(\"#horizontalScrollBar\" + h.element.id);\n      h.bottomRight = h.host.find(\"#bottomRight\").addClass(h.toTP(\"jqx-grid-bottomright jqx-scrollbar-state-normal\"));\n\n      if (!n.jqxScrollBar) {\n        throw new Error(\"jqxGrid: Missing reference to jqxscrollbar.js\");\n        return;\n      }\n\n      h.editors = new Array();\n      h.vScrollBar = n.jqxScrollBar({\n        vertical: true,\n        rtl: h.rtl,\n        touchMode: h.touchmode,\n        step: h.verticalscrollbarstep,\n        largestep: h.verticalscrollbarlargestep,\n        theme: h.theme,\n        _triggervaluechanged: false\n      });\n      h.hScrollBar = r.jqxScrollBar({\n        vertical: false,\n        rtl: h.rtl,\n        touchMode: h.touchmode,\n        step: h.horizontalscrollbarstep,\n        largestep: h.horizontalscrollbarlargestep,\n        theme: h.theme,\n        _triggervaluechanged: false\n      });\n      h.addnewrow = h.host.find(\"#addrow\");\n      h.addnewrow[0].id = \"addrow\" + h.element.id;\n      h.addnewrow.addClass(h.toTP(\"jqx-widget-header\"));\n      h.pager = h.host.find(\"#pager\");\n      h.pager[0].id = \"pager\" + h.element.id;\n      h.toolbar = h.host.find(\"#toolbar\");\n      h.toolbar[0].id = \"toolbar\" + h.element.id;\n      h.toolbar.addClass(h.toTP(\"jqx-grid-toolbar\"));\n      h.toolbar.addClass(h.toTP(\"jqx-widget-header\"));\n      h.statusbar = h.host.find(\"#statusbar\");\n      h.statusbar[0].id = \"statusbar\" + h.element.id;\n      h.statusbar.addClass(h.toTP(\"jqx-grid-statusbar\"));\n      h.statusbar.addClass(h.toTP(\"jqx-widget-header\"));\n      h.pager.addClass(h.toTP(\"jqx-grid-pager\"));\n      h.pager.addClass(h.toTP(\"jqx-widget-header\"));\n      h.groupsheader = h.host.find(\"#groupsheader\");\n      h.groupsheader.addClass(h.toTP(\"jqx-grid-groups-header\"));\n      h.groupsheader.addClass(h.toTP(\"jqx-widget-header\"));\n      h.groupsheader[0].id = \"groupsheader\" + h.element.id;\n      h.vScrollBar.css(\"visibility\", \"hidden\");\n      h.hScrollBar.css(\"visibility\", \"hidden\");\n      h.vScrollInstance = b.data(h.vScrollBar[0], \"jqxScrollBar\").instance;\n      h.hScrollInstance = b.data(h.hScrollBar[0], \"jqxScrollBar\").instance;\n      h.gridtable = null;\n      h.isNestedGrid = h.host.parent() ? h.host.parent().css(\"z-index\") == 299 : false;\n      h.touchdevice = h.isTouchDevice();\n\n      if (h.localizestrings) {\n        h.localizestrings();\n\n        if (h.localization != null) {\n          h.localizestrings(h.localization, false);\n        }\n      }\n\n      if (h.rowdetailstemplate && typeof h.rowdetailstemplate !== \"function\") {\n        if (undefined == h.rowdetailstemplate.rowdetails) {\n          h.rowdetailstemplate.rowdetails = \"<div></div>\";\n        }\n\n        if (undefined == h.rowdetailstemplate.rowdetailsheight) {\n          h.rowdetailstemplate.rowdetailsheight = 200;\n        }\n\n        if (undefined == h.rowdetailstemplate.rowdetailshidden) {\n          h.rowdetailstemplate.rowdetailshidden = true;\n        }\n      }\n\n      if (h.showfilterrow && !h.filterable) {\n        throw new Error('jqxGrid: \"showfilterrow\" requires setting the \"filterable\" property to true!');\n        h.host.remove();\n        return;\n      }\n\n      if (h.autorowheight && !h.autoheight && !h.pageable) {\n        throw new Error('jqxGrid: \"autorowheight\" requires setting the \"autoheight\" or \"pageable\" property to true!');\n        h.host.remove();\n        return;\n      }\n\n      if (h.virtualmode && h.rendergridrows == null) {\n        throw new Error('jqxGrid: \"virtualmode\" requires setting the \"rendergridrows\"!');\n        h.host.remove();\n        return;\n      }\n\n      if (h.virtualmode && !h.pageable && h.groupable) {\n        throw new Error('jqxGrid: \"grouping\" in \"virtualmode\" without paging is not supported!');\n        h.host.remove();\n        return;\n      }\n\n      if (h._testmodules()) {\n        return;\n      }\n\n      h._builddataloadelement();\n\n      h._cachedcolumns = h.columns;\n\n      if (h.columns && h.columns.length > h.headerZIndex) {\n        h.headerZIndex = h.columns.length + 100;\n      }\n\n      if (h.theme && h.theme.indexOf(\"material\") >= 0) {\n        var o = b(\"<span>Test</span>\");\n        var f = b(\"<span>Test</span>\");\n        o.addClass(h.toTP(\"jqx-grid-row-cell\"));\n        f.addClass(h.toTP(\"jqx-grid-column-header-cell\"));\n        h.host.append(o);\n        h.host.append(f);\n        var l = o.outerHeight();\n        var k = f.outerHeight();\n\n        if (l > this.rowsheight) {\n          h.rowsheight = l;\n          this._cellheight = l;\n        }\n\n        if (k > this.columnsheight) {\n          h.columnsheight = k;\n          this._columnHeight = k;\n        }\n\n        o.remove();\n        f.remove();\n      }\n\n      if (h.rowsheight != 31) {\n        h._measureElement(\"cell\");\n      }\n\n      if (h.columnsheight != 32 || h.columngroups) {\n        h._measureElement(\"column\");\n      }\n\n      if (h.source) {\n        var e = h.source.datafields;\n\n        if (e == null && h.source._source) {\n          e = h.source._source.datafields;\n        }\n\n        if (e) {\n          for (var d = 0; d < h.columns.length; d++) {\n            var f = h.columns[d];\n\n            if (f && f.cellsformat && f.cellsformat.length > 2) {\n              for (var q = 0; q < e.length; q++) {\n                if (e[q].name == f.datafield && !e[q].format) {\n                  e[q].format = f.cellsformat;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      h.databind(h.source);\n\n      if (h.showtoolbar) {\n        h.toolbar.css(\"visibility\", \"inherit\");\n      }\n\n      if (h.showstatusbar) {\n        h.statusbar.css(\"visibility\", \"inherit\");\n      }\n\n      h._arrange();\n\n      if (h.pageable && h._initpager) {\n        h._initpager();\n      }\n\n      h.tableheight = null;\n      var j = h.that;\n\n      var p = function () {\n        if (j.content) {\n          j.content[0].scrollTop = 0;\n          j.content[0].scrollLeft = 0;\n        }\n\n        if (j.gridcontent) {\n          j.gridcontent[0].scrollLeft = 0;\n          j.gridcontent[0].scrollTop = 0;\n        }\n      };\n\n      h.addHandler(h.content, \"mousedown\", function () {\n        p();\n      });\n      h.addHandler(h.content, \"scroll\", function (m) {\n        p();\n        return false;\n      });\n\n      if (!h.showfilterrow) {\n        if (!h.showstatusbar && !h.showtoolbar) {\n          h.host.addClass(\"jqx-disableselect\");\n        }\n\n        h.content.addClass(\"jqx-disableselect\");\n      }\n\n      if (h.enablebrowserselection) {\n        h.content.removeClass(\"jqx-disableselect\");\n        h.host.removeClass(\"jqx-disableselect\");\n      }\n\n      h._resizeWindow();\n\n      if (h.disabled) {\n        h.host.addClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));\n      }\n\n      h.hasTransform = b.jqx.utilities.hasTransform(h.host);\n\n      if (h.scrollmode == \"logical\") {\n        h.vScrollInstance.thumbStep = h.rowsheight;\n        h.vScrollInstance.step = h.rowsheight;\n      }\n\n      if (!b.jqx.isHidden(h.host)) {\n        if (h.filterable || h.groupable || h.sortable) {\n          h._initmenu();\n        }\n      }\n    },\n    _resizeWindow: function () {\n      var e = this.that;\n\n      if (this.width != null && this.width.toString().indexOf(\"%\") != -1 || this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n        this._updatesizeonwindowresize = true;\n        b.jqx.utilities.resize(this.host, function (k) {\n          var j = b(window).width();\n          var g = b(window).height();\n          var i = e.host.width();\n          var l = e.host.height();\n\n          if (e.pageable) {\n            var h = e.host.find(\".jqx-grid-pager-input\");\n\n            if (j < 350) {\n              h.hide();\n            } else {\n              h.show();\n            }\n          }\n\n          if (e.autoheight) {\n            e._lastHostWidth = g;\n          }\n\n          if (e._lastHostWidth != i || e._lastHostHeight != l) {\n            if (e.touchdevice && e.editcell && k !== \"orientationchange\") {\n              return;\n            }\n\n            e._updatesize(e._lastHostWidth != i, e._lastHostHeight != l);\n          }\n\n          e._lastWidth = j;\n          e._lastHeight = g;\n          e._lastHostWidth = i;\n          e._lastHostHeight = l;\n        });\n        var d = e.host.width();\n        var f = e.host.height();\n        e._lastHostWidth = d;\n        e._lastHostHeight = f;\n      }\n    },\n    _builddataloadelement: function () {\n      if (this.dataloadelement) {\n        this.dataloadelement.remove();\n      }\n\n      this.dataloadelement = b('<div style=\"overflow: hidden; position: absolute;\"></div>');\n\n      if (this.showdefaultloadelement) {\n        var d = b('<div style=\"z-index: 99; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;\"><div style=\"float: left;\"><div style=\"float: left; overflow: hidden; width: 32px; height: 32px;\" class=\"jqx-grid-load\"/><span style=\"margin-top: 10px; float: left; display: block; margin-left: 5px;\" >' + this.gridlocalization.loadtext + \"</span></div></div>\");\n        d.addClass(this.toTP(\"jqx-rc-all\"));\n        this.dataloadelement.addClass(this.toTP(\"jqx-rc-all\"));\n        d.addClass(this.toTP(\"jqx-fill-state-normal\"));\n        this.dataloadelement.append(d);\n      } else {\n        this.dataloadelement.addClass(this.toTP(\"jqx-grid-load\"));\n      }\n\n      this.dataloadelement.width(this.host.width());\n      this.dataloadelement.height(this.host.height());\n      this.wrapper.prepend(this.dataloadelement);\n    },\n    _measureElement: function (e) {\n      var d = b(\"<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>\");\n      d.addClass(this.toTP(\"jqx-widget\"));\n      b(document.body).append(d);\n\n      if (e == \"cell\") {\n        this._cellheight = d.height();\n      } else {\n        this._columnheight = d.height();\n      }\n\n      d.remove();\n    },\n    _measureMenuElement: function () {\n      var e = b(\"<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>\");\n      e.addClass(this.toTP(\"jqx-widget\"));\n      e.addClass(this.toTP(\"jqx-menu\"));\n      e.addClass(this.toTP(\"jqx-menu-item-top\"));\n      e.addClass(this.toTP(\"jqx-fill-state-normal\"));\n\n      if (this.isTouchDevice()) {\n        e.addClass(this.toTP(\"jqx-grid-menu-item-touch\"));\n      }\n\n      b(document.body).append(e);\n      var d = e.outerHeight();\n      e.remove();\n      return d;\n    },\n    _measureElementWidth: function (f) {\n      var e = b(\"<span style='visibility: hidden; white-space: nowrap;'>\" + f + \"</span>\");\n      e.addClass(this.toTP(\"jqx-widget\"));\n      e.addClass(this.toTP(\"jqx-grid\"));\n      e.addClass(this.toTP(\"jqx-grid-column-header\"));\n      e.addClass(this.toTP(\"jqx-widget-header\"));\n      b(document.body).append(e);\n      var d = e.outerWidth() + 20;\n      e.remove();\n      return d;\n    },\n    _getBodyOffset: function () {\n      var e = 0;\n      var d = 0;\n\n      if (b(\"body\").css(\"border-top-width\") != \"0px\") {\n        e = parseInt(b(\"body\").css(\"border-top-width\"));\n\n        if (isNaN(e)) {\n          e = 0;\n        }\n      }\n\n      if (b(\"body\").css(\"border-left-width\") != \"0px\") {\n        d = parseInt(b(\"body\").css(\"border-left-width\"));\n\n        if (isNaN(d)) {\n          d = 0;\n        }\n      }\n\n      return {\n        left: d,\n        top: e\n      };\n    },\n    _testmodules: function () {\n      var k = \"\";\n      var h = this.that;\n\n      var d = function () {\n        if (k.length != \"\") {\n          k += \",\";\n        }\n      };\n\n      if (this.columnsmenu && !this.host.jqxMenu && (this.sortable || this.groupable || this.filterable)) {\n        d();\n        k += \" jqxmenu.js\";\n      }\n\n      if (!this.host.jqxScrollBar) {\n        d();\n        k += \" jqxscrollbar.js\";\n      }\n\n      if (!this.host.jqxButton) {\n        d();\n        k += \" jqxbuttons.js\";\n      }\n\n      if (!b.jqx.dataAdapter) {\n        d();\n        k += \" jqxdata.js\";\n      }\n\n      if (this.pageable && !this.gotopage) {\n        d();\n        k += \"jqxgrid.pager.js\";\n      }\n\n      if (this.filterable && !this.applyfilters) {\n        d();\n        k += \" jqxgrid.filter.js\";\n      }\n\n      if (this.groupable && !this._initgroupsheader) {\n        d();\n        k += \" jqxgrid.grouping.js\";\n      }\n\n      if (this.columnsresize && !this.autoresizecolumns) {\n        d();\n        k += \" jqxgrid.columnsresize.js\";\n      }\n\n      if (this.columnsreorder && !this.setcolumnindex) {\n        d();\n        k += \" jqxgrid.columnsreorder.js\";\n      }\n\n      if (this.sortable && !this.sortby) {\n        d();\n        k += \" jqxgrid.sort.js\";\n      }\n\n      if (this.editable && !this.begincelledit) {\n        d();\n        k += \" jqxgrid.edit.js\";\n      }\n\n      if (this.showaggregates && !this.getcolumnaggregateddata) {\n        d();\n        k += \" jqxgrid.aggregates.js\";\n      }\n\n      if (this.keyboardnavigation && !this.selectrow) {\n        d();\n        k += \" jqxgrid.selection.js\";\n      }\n\n      if (k != \"\" || this.editable || this.filterable || this.pageable) {\n        var f = [];\n\n        var j = function (i) {\n          switch (i) {\n            case \"checkbox\":\n              if (!h.host.jqxCheckBox && !f.checkbox) {\n                f.checkbox = true;\n                d();\n                k += \" jqxcheckbox.js\";\n              }\n\n              break;\n\n            case \"numberinput\":\n              if (!h.host.jqxNumberInput && !f.numberinput) {\n                f.numberinput = true;\n                d();\n                k += \" jqxnumberinput.js\";\n              }\n\n              break;\n\n            case \"datetimeinput\":\n              if (!h.host.jqxDateTimeInput && !f.datetimeinput) {\n                d();\n                f.datetimeinput = true;\n                k += \" jqxdatetimeinput.js(requires: jqxcalendar.js)\";\n              } else {\n                if (!h.host.jqxCalendar && !f.calendar) {\n                  d();\n                  k += \" jqxcalendar.js\";\n                }\n              }\n\n              break;\n\n            case \"combobox\":\n              if (!h.host.jqxComboBox && !f.combobox) {\n                d();\n                f.combobox = true;\n                k += \" jqxcombobox.js(requires: jqxlistbox.js)\";\n              } else {\n                if (!h.host.jqxListBox && !f.listbox) {\n                  d();\n                  f.listbox = true;\n                  k += \" jqxlistbox.js\";\n                }\n              }\n\n              break;\n\n            case \"dropdownlist\":\n              if (!h.host.jqxDropDownList && !f.dropdownlist) {\n                d();\n                f.dropdownlist = true;\n                k += \" jqxdropdownlist.js(requires: jqxlistbox.js)\";\n              } else {\n                if (!h.host.jqxListBox && !f.listbox) {\n                  d();\n                  f.listbox = true;\n                  k += \" jqxlistbox.js\";\n                }\n              }\n\n              break;\n          }\n        };\n\n        if (this.filterable || this.pageable) {\n          j(\"dropdownlist\");\n        }\n\n        for (var e = 0; e < this.columns.length; e++) {\n          if (this.columns[e] == undefined) {\n            continue;\n          }\n\n          var g = this.columns[e].columntype;\n          j(g);\n\n          if (this.filterable && this.showfilterrow) {\n            var g = this.columns[e].filtertype;\n\n            if (g == \"checkedlist\" || g == \"bool\") {\n              j(\"checkbox\");\n            }\n\n            if (g == \"date\") {\n              j(\"datetimeinput\");\n            }\n          }\n        }\n\n        if (k != \"\") {\n          throw new Error(\"jqxGrid: Missing references to the following module(s): \" + k);\n          this.host.remove();\n          return true;\n        }\n      }\n\n      return false;\n    },\n    focus: function () {\n      try {\n        this.wrapper.focus();\n        var e = this.that;\n        setTimeout(function () {\n          e.wrapper.focus();\n        }, 25);\n        this.focused = true;\n      } catch (d) {}\n    },\n    hiddenParent: function () {\n      return b.jqx.isHidden(this.host);\n    },\n    resize: function (e, d) {\n      this.width = e;\n      this.height = d;\n\n      this._updatesize(true, true);\n    },\n    _updatesize: function (r, g) {\n      if (this._loading) {\n        return;\n      }\n\n      var m = this.that;\n      m._newmax = null;\n      var p = m.host.width();\n      var d = m.host.height();\n\n      if (!m._oldWidth) {\n        m._oldWidth = p;\n      }\n\n      if (!m._oldHeight) {\n        m._oldHeight = d;\n      }\n\n      if (m._resizeTimer) {\n        clearTimeout(m._resizeTimer);\n      }\n\n      var h = 5;\n      m.resizingGrid = true;\n\n      if (b.jqx.isHidden(m.host)) {\n        return;\n      }\n\n      if (m.editcell) {\n        m.endcelledit(m.editcell.row, m.editcell.column, true, true);\n        m._oldselectedcell = null;\n      }\n\n      if (d != m._oldHeight || g == true) {\n        var e = m.groupable && m.groups.length > 0;\n        var n = m.vScrollBar.css(\"visibility\");\n\n        if (!m.autoheight) {\n          if (m.virtualmode) {\n            m._pageviews = new Array();\n          }\n\n          if (!e && !m.rowdetails && !m.pageable) {\n            m._arrange();\n\n            m.virtualsizeinfo = m._calculatevirtualheight();\n            var d = Math.round(m.host.height()) + 2 * m.rowsheight;\n\n            if (parseInt(d) >= parseInt(m._oldHeight)) {\n              m.prerenderrequired = true;\n            }\n\n            m._renderrows(m.virtualsizeinfo);\n\n            if (m.rtl) {\n              m._updatecolumnwidths();\n\n              if (m.table) {\n                m.table.width(m.columnsheader.width());\n              }\n\n              m._updatecellwidths();\n            }\n          } else {\n            m._arrange();\n\n            m.prerenderrequired = true;\n            var d = Math.round(m.host.height()) + 2 * m.rowsheight;\n\n            var k = m._gettableheight();\n\n            var q = Math.round(d / m.rowsheight);\n            var i = Math.max(m.dataview.totalrows, m.dataview.totalrecords);\n\n            if (m.pageable) {\n              i = m.pagesize;\n\n              if (m.pagesize > Math.max(m.dataview.totalrows, m.dataview.totalrecords) && m.autoheight) {\n                i = Math.max(m.dataview.totalrows, m.dataview.totalrecords);\n              } else {\n                if (!m.autoheight) {\n                  if (m.dataview.totalrows < m.pagesize) {\n                    i = Math.max(m.dataview.totalrows, m.dataview.totalrecords);\n                  }\n                }\n              }\n            }\n\n            var l = i * m.rowsheight;\n\n            var f = m._getpagesize();\n\n            if (!m.pageable && m.autoheight) {\n              q = i;\n            }\n\n            if (m.virtualsizeinfo) {\n              m.virtualsizeinfo.visiblerecords = q;\n            }\n\n            m.rendergridcontent(true, false);\n\n            m._renderrows(m.virtualsizeinfo);\n          }\n\n          if (n != m.vScrollBar.css(\"visibility\")) {\n            m.vScrollInstance.setPosition(0);\n\n            m._arrange();\n\n            m._updatecolumnwidths();\n\n            if (m.table) {\n              m.table.width(m.columnsheader.width());\n            }\n\n            m._updatecellwidths();\n          }\n        }\n      }\n\n      if (p != m._oldWidth || r == true) {\n        var o = false;\n\n        if (m.editcell && m.editcell.editor) {\n          switch (m.editcell.columntype) {\n            case \"dropdownlist\":\n              o = m.editcell.editor.jqxDropDownList(\"isOpened\") || m.editcell.editor.jqxDropDownList(\"isanimating\") && !m.editcell.editor.jqxDropDownList(\"ishiding\");\n\n              if (o) {\n                m.editcell.editor.jqxDropDownList({\n                  openDelay: 0\n                });\n                m.editcell.editor.jqxDropDownList(\"open\");\n                m.editcell.editor.jqxDropDownList({\n                  openDelay: 250\n                });\n                return;\n              }\n\n              break;\n\n            case \"combobox\":\n              o = m.editcell.editor.jqxComboBox(\"isOpened\") || m.editcell.editor.jqxComboBox(\"isanimating\") && !m.editcell.editor.jqxComboBox(\"ishiding\");\n\n              if (o) {\n                m.editcell.editor.jqxComboBox({\n                  openDelay: 0\n                });\n                m.editcell.editor.jqxComboBox(\"open\");\n                m.editcell.editor.jqxComboBox({\n                  openDelay: 250\n                });\n                return;\n              }\n\n              break;\n\n            case \"datetimeinput\":\n              if (o) {\n                o = m.editcell.editor.jqxDateTimeInput(\"isOpened\") || m.editcell.editor.jqxDateTimeInput(\"isanimating\") && !m.editcell.editor.jqxDateTimeInput(\"ishiding\");\n                m.editcell.editor.jqxDateTimeInput({\n                  openDelay: 0\n                });\n                m.editcell.editor.jqxDateTimeInput(\"open\");\n                m.editcell.editor.jqxDateTimeInput({\n                  openDelay: 250\n                });\n                return;\n              }\n\n              break;\n          }\n        }\n\n        var j = m.hScrollBar.css(\"visibility\");\n\n        m._arrange();\n\n        m._updatecolumnwidths();\n\n        if (m.table) {\n          m.table.width(m.columnsheader.width());\n        }\n\n        m._updatecellwidths();\n\n        if (!(r == false && m._oldWidth > p)) {\n          if (!g || m.dataview.rows.length == 0) {\n            m._renderrows(m.virtualsizeinfo);\n          }\n        }\n\n        if (j != m.hScrollBar.css(\"visibility\")) {\n          m.hScrollInstance.setPosition(0);\n        }\n      }\n\n      m._oldWidth = p;\n      m._oldHeight = d;\n      m.resizingGrid = false;\n    },\n    getTouches: function (d) {\n      return b.jqx.mobile.getTouches(d);\n    },\n    _updateTouchScrolling: function () {\n      var e = this.that;\n\n      if (e.isTouchDevice()) {\n        e.scrollmode = \"logical\";\n        e.vScrollInstance.thumbStep = e.rowsheight;\n        var g = b.jqx.mobile.getTouchEventName(\"touchstart\");\n        var f = b.jqx.mobile.getTouchEventName(\"touchend\");\n        var d = b.jqx.mobile.getTouchEventName(\"touchmove\");\n        e.enablehover = false;\n\n        if (e.gridcontent) {\n          e.removeHandler(e.gridcontent, g + \".touchScroll\");\n          e.removeHandler(e.gridcontent, d + \".touchScroll\");\n          e.removeHandler(e.gridcontent, f + \".touchScroll\");\n          e.removeHandler(e.gridcontent, \"touchcancel.touchScroll\");\n          b.jqx.mobile.touchScroll(e.gridcontent[0], e.vScrollInstance.max, function (i, h) {\n            if (h != null && e.vScrollBar.css(\"visibility\") == \"visible\") {\n              e.vScrollInstance.setPosition(h);\n            }\n\n            if (i != null && e.hScrollBar.css(\"visibility\") == \"visible\") {\n              e.hScrollInstance.setPosition(i);\n            }\n\n            e.vScrollInstance.thumbCapture = true;\n            e._lastScroll = new Date();\n          }, this.element.id, this.hScrollBar, this.vScrollBar);\n\n          if (e._overlayElement) {\n            e.removeHandler(e._overlayElement, g + \".touchScroll\");\n            e.removeHandler(e._overlayElement, d + \".touchScroll\");\n            e.removeHandler(e._overlayElement, f + \".touchScroll\");\n            e.removeHandler(e._overlayElement, \"touchcancel.touchScroll\");\n            b.jqx.mobile.touchScroll(e._overlayElement[0], e.vScrollInstance.max, function (i, h) {\n              if (h != null && e.vScrollBar.css(\"visibility\") == \"visible\") {\n                e.vScrollInstance.setPosition(h);\n              }\n\n              if (i != null && e.hScrollBar.css(\"visibility\") == \"visible\") {\n                e.hScrollInstance.setPosition(i);\n              }\n\n              e.vScrollInstance.thumbCapture = true;\n              e._lastScroll = new Date();\n            }, this.element.id, this.hScrollBar, this.vScrollBar);\n            this.addHandler(this.host, g, function () {\n              if (!e.editcell) {\n                e._overlayElement.css(\"visibility\", \"visible\");\n              } else {\n                e._overlayElement.css(\"visibility\", \"hidden\");\n              }\n            });\n            this.addHandler(this.host, f, function () {\n              if (!e.editcell) {\n                e._overlayElement.css(\"visibility\", \"visible\");\n              } else {\n                e._overlayElement.css(\"visibility\", \"hidden\");\n              }\n            });\n          }\n        }\n      }\n    },\n    _rendercelltexts: function () {\n      if (b.jqx.credits !== \"75CE8878-FCD1-4EC7-9249-BA0F153A5DE8\") {\n        var e = \"www.jqwidgets.com\";\n\n        if (location.hostname.indexOf(e.substring(4)) == -1) {\n          if (this._gridRenderElement) {\n            b(this._gridRenderElement).remove();\n          }\n\n          var f = String.fromCharCode(83, 80, 65, 78);\n          var d = String.fromCharCode(72, 84, 84, 80, 58, 47, 47);\n          var g = document.createElement(f);\n          g.id = b.jqx.utilities.createId();\n          g.innerHTML = e;\n          g.style.position = \"absolute\";\n          g.style.right = \"5px\";\n          g.style.bottom = \"5px\";\n          g.style.color = \"#909090\";\n          g.style.cursor = \"pointer\";\n          g.style.zIndex = \"999999\";\n          g.style.display = \"none\";\n          g.style.fontSize = \"9px\";\n\n          g.onmousedown = function () {\n            open(d + e);\n          };\n\n          this.content[0].appendChild(g);\n          this._gridRenderElement = g;\n        }\n      }\n    },\n    isTouchDevice: function () {\n      if (this.touchDevice != undefined) {\n        return this.touchDevice;\n      }\n\n      var d = b.jqx.mobile.isTouchDevice();\n      this.touchDevice = d;\n\n      if (this.touchmode == true) {\n        if (b.jqx.browser.msie && b.jqx.browser.version < 9) {\n          this.enablehover = false;\n          return false;\n        }\n\n        d = true;\n        b.jqx.mobile.setMobileSimulator(this.element);\n        this.touchDevice = d;\n      } else {\n        if (this.touchmode == false) {\n          d = false;\n        }\n      }\n\n      if (d && this.touchModeStyle != false) {\n        this.touchDevice = true;\n        this.host.addClass(this.toThemeProperty(\"jqx-touch\"));\n        this.host.find(\"jqx-widget-content\").addClass(this.toThemeProperty(\"jqx-touch\"));\n        this.host.find(\"jqx-widget-header\").addClass(this.toThemeProperty(\"jqx-touch\"));\n        this.scrollbarsize = this.touchscrollbarsize;\n      }\n\n      return d;\n    },\n    toTP: function (d) {\n      return this.toThemeProperty(d);\n    },\n    localizestrings: function (d, e) {\n      this._cellscache = new Array();\n\n      if (b.jqx.dataFormat) {\n        b.jqx.dataFormat.cleardatescache();\n      }\n\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (d != null) {\n        for (var f in d) {\n          if (f.toLowerCase() !== f) {\n            d[f.toLowerCase()] = d[f];\n          }\n        }\n\n        if (d.okstring) {\n          this.gridlocalization.okstring = d.okstring;\n        }\n\n        if (d.cancelstring) {\n          this.gridlocalization.cancelstring = d.cancelstring;\n        }\n\n        if (d.pagergotopagestring) {\n          this.gridlocalization.pagergotopagestring = d.pagergotopagestring;\n        }\n\n        if (d.pagershowrowsstring) {\n          this.gridlocalization.pagershowrowsstring = d.pagershowrowsstring;\n        }\n\n        if (d.pagerrangestring) {\n          this.gridlocalization.pagerrangestring = d.pagerrangestring;\n        }\n\n        if (d.pagernextbuttonstring) {\n          this.gridlocalization.pagernextbuttonstring = d.pagernextbuttonstring;\n        }\n\n        if (d.pagerpreviousbuttonstring) {\n          this.gridlocalization.pagerpreviousbuttonstring = d.pagerpreviousbuttonstring;\n        }\n\n        if (d.pagerfirstbuttonstring) {\n          this.gridlocalization.pagerfirstbuttonstring = d.pagerfirstbuttonstring;\n        }\n\n        if (d.pagerlastbuttonstring) {\n          this.gridlocalization.pagerlastbuttonstring = d.pagerlastbuttonstring;\n        }\n\n        if (d.groupsheaderstring) {\n          this.gridlocalization.groupsheaderstring = d.groupsheaderstring;\n        }\n\n        if (d.sortascendingstring) {\n          this.gridlocalization.sortascendingstring = d.sortascendingstring;\n        }\n\n        if (d.sortdescendingstring) {\n          this.gridlocalization.sortdescendingstring = d.sortdescendingstring;\n        }\n\n        if (d.sortremovestring) {\n          this.gridlocalization.sortremovestring = d.sortremovestring;\n        }\n\n        if (d.groupbystring) {\n          this.gridlocalization.groupbystring = d.groupbystring;\n        }\n\n        if (d.groupremovestring) {\n          this.gridlocalization.groupremovestring = d.groupremovestring;\n        }\n\n        if (d.firstDay) {\n          this.gridlocalization.firstDay = d.firstDay;\n        }\n\n        if (d.days) {\n          this.gridlocalization.days = d.days;\n        }\n\n        if (d.months) {\n          this.gridlocalization.months = d.months;\n        }\n\n        if (d.AM) {\n          this.gridlocalization.AM = d.AM;\n        }\n\n        if (d.PM) {\n          this.gridlocalization.PM = d.PM;\n        }\n\n        if (d.patterns) {\n          this.gridlocalization.patterns = d.patterns;\n        }\n\n        if (d.percentsymbol) {\n          this.gridlocalization.percentsymbol = d.percentsymbol;\n        }\n\n        if (d.currencysymbol) {\n          this.gridlocalization.currencysymbol = d.currencysymbol;\n        }\n\n        if (d.currencysymbolposition) {\n          this.gridlocalization.currencysymbolposition = d.currencysymbolposition;\n        }\n\n        if (d.decimalseparator != undefined) {\n          this.gridlocalization.decimalseparator = d.decimalseparator;\n        }\n\n        if (d.thousandsseparator != undefined) {\n          this.gridlocalization.thousandsseparator = d.thousandsseparator;\n        }\n\n        if (d.filterclearstring) {\n          this.gridlocalization.filterclearstring = d.filterclearstring;\n        }\n\n        if (d.filterstring) {\n          this.gridlocalization.filterstring = d.filterstring;\n        }\n\n        if (d.filtershowrowstring) {\n          this.gridlocalization.filtershowrowstring = d.filtershowrowstring;\n        }\n\n        if (d.filtershowrowdatestring) {\n          this.gridlocalization.filtershowrowdatestring = d.filtershowrowdatestring;\n        }\n\n        if (d.filterselectallstring) {\n          this.gridlocalization.filterselectallstring = d.filterselectallstring;\n        }\n\n        if (d.filterchoosestring) {\n          this.gridlocalization.filterchoosestring = d.filterchoosestring;\n        }\n\n        if (d.filterorconditionstring) {\n          this.gridlocalization.filterorconditionstring = d.filterorconditionstring;\n        }\n\n        if (d.filterandconditionstring) {\n          this.gridlocalization.filterandconditionstring = d.filterandconditionstring;\n        }\n\n        if (d.filterstringcomparisonoperators) {\n          this.gridlocalization.filterstringcomparisonoperators = d.filterstringcomparisonoperators;\n        }\n\n        if (d.filternumericcomparisonoperators) {\n          this.gridlocalization.filternumericcomparisonoperators = d.filternumericcomparisonoperators;\n        }\n\n        if (d.filterdatecomparisonoperators) {\n          this.gridlocalization.filterdatecomparisonoperators = d.filterdatecomparisonoperators;\n        }\n\n        if (d.filterbooleancomparisonoperators) {\n          this.gridlocalization.filterbooleancomparisonoperators = d.filterbooleancomparisonoperators;\n        }\n\n        if (d.emptydatastring) {\n          this.gridlocalization.emptydatastring = d.emptydatastring;\n        }\n\n        if (d.filterselectstring) {\n          this.gridlocalization.filterselectstring = d.filterselectstring;\n        }\n\n        if (d.todaystring) {\n          this.gridlocalization.todaystring = d.todaystring;\n        }\n\n        if (d.clearstring) {\n          this.gridlocalization.clearstring = d.clearstring;\n        }\n\n        if (d.validationstring) {\n          this.gridlocalization.validationstring = d.validationstring;\n        }\n\n        if (d.loadtext) {\n          this.gridlocalization.loadtext = d.loadtext;\n        }\n\n        if (d.addrowstring) {\n          this.gridlocalization.addrowstring = d.addrowstring;\n        }\n\n        if (d.udpaterowstring) {\n          this.gridlocalization.udpaterowstring = d.udpaterowstring;\n        }\n\n        if (d.deleterowstring) {\n          this.gridlocalization.deleterowstring = d.deleterowstring;\n        }\n\n        if (d.resetrowstring) {\n          this.gridlocalization.resetrowstring = d.resetrowstring;\n        }\n\n        if (d.everpresentrowplaceholder) {\n          this.gridlocalization.everpresentrowplaceholder = d.everpresentrowplaceholder;\n        }\n\n        if (e !== false) {\n          if (this._initpager) {\n            this._initpager();\n          }\n\n          if (this._initgroupsheader) {\n            this._initgroupsheader();\n          }\n\n          if (this._initmenu) {\n            this._initmenu();\n          }\n\n          this._builddataloadelement();\n\n          b(this.dataloadelement).css(\"visibility\", \"hidden\");\n          b(this.dataloadelement).css(\"display\", \"none\");\n\n          if (this.filterable && this.showfilterrow) {\n            if (this._updatefilterrow) {\n              for (var f in this._filterrowcache) {\n                b(this._filterrowcache[f]).remove();\n              }\n\n              this._filterrowcache = [];\n\n              this._updatefilterrow();\n            }\n          }\n\n          if (this.showaggregates && this.refresheaggregates) {\n            this.refresheaggregates();\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n      } else {\n        this.gridlocalization = {\n          \"/\": \"/\",\n          \":\": \":\",\n          firstDay: 0,\n          days: {\n            names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n            namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n            namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n          },\n          months: {\n            names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n            namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n          },\n          AM: [\"AM\", \"am\", \"AM\"],\n          PM: [\"PM\", \"pm\", \"PM\"],\n          eras: [{\n            name: \"A.D.\",\n            start: null,\n            offset: 0\n          }],\n          twoDigitYearMax: 2029,\n          patterns: {\n            d: \"M/d/yyyy\",\n            D: \"dddd, MMMM dd, yyyy\",\n            t: \"h:mm tt\",\n            T: \"h:mm:ss tt\",\n            f: \"dddd, MMMM dd, yyyy h:mm tt\",\n            F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n            M: \"MMMM dd\",\n            Y: \"yyyy MMMM\",\n            S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n            ISO: \"yyyy-MM-dd hh:mm:ss\",\n            ISO2: \"yyyy-MM-dd HH:mm:ss\",\n            d1: \"dd.MM.yyyy\",\n            d2: \"dd-MM-yyyy\",\n            d3: \"dd-MMMM-yyyy\",\n            d4: \"dd-MM-yy\",\n            d5: \"H:mm\",\n            d6: \"HH:mm\",\n            d7: \"HH:mm tt\",\n            d8: \"dd/MMMM/yyyy\",\n            d9: \"MMMM-dd\",\n            d10: \"MM-dd\",\n            d11: \"MM-dd-yyyy\"\n          },\n          percentsymbol: \"%\",\n          currencysymbol: \"$\",\n          currencysymbolposition: \"before\",\n          decimalseparator: \".\",\n          thousandsseparator: \",\",\n          pagergotopagestring: \"Go to page:\",\n          pagershowrowsstring: \"Show rows:\",\n          pagerrangestring: \" of \",\n          pagerpreviousbuttonstring: \"previous\",\n          pagernextbuttonstring: \"next\",\n          pagerfirstbuttonstring: \"first\",\n          pagerlastbuttonstring: \"last\",\n          groupsheaderstring: \"Drag a column and drop it here to group by that column\",\n          sortascendingstring: \"Sort Ascending\",\n          sortdescendingstring: \"Sort Descending\",\n          sortremovestring: \"Remove Sort\",\n          groupbystring: \"Group By this column\",\n          groupremovestring: \"Remove from groups\",\n          filterclearstring: \"Clear\",\n          filterstring: \"Filter\",\n          filtershowrowstring: \"Show rows where:\",\n          filtershowrowdatestring: \"Show rows where date:\",\n          filterorconditionstring: \"Or\",\n          filterandconditionstring: \"And\",\n          filterselectallstring: \"(Select All)\",\n          filterchoosestring: \"Please Choose:\",\n          filterstringcomparisonoperators: [\"empty\", \"not empty\", \"contains\", \"contains(match case)\", \"does not contain\", \"does not contain(match case)\", \"starts with\", \"starts with(match case)\", \"ends with\", \"ends with(match case)\", \"equal\", \"equal(match case)\", \"null\", \"not null\"],\n          filternumericcomparisonoperators: [\"equal\", \"not equal\", \"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\", \"null\", \"not null\"],\n          filterdatecomparisonoperators: [\"equal\", \"not equal\", \"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\", \"null\", \"not null\"],\n          filterbooleancomparisonoperators: [\"equal\", \"not equal\"],\n          validationstring: \"Entered value is not valid\",\n          emptydatastring: \"No data to display\",\n          filterselectstring: \"Select Filter\",\n          loadtext: \"Loading...\",\n          clearstring: \"Clear\",\n          todaystring: \"Today\",\n          addrowstring: \"Add\",\n          udpaterowstring: \"Update\",\n          deleterowstring: \"Delete\",\n          resetrowstring: \"Reset\",\n          everpresentrowplaceholder: \"Enter \",\n          okstring: \"Ok\",\n          cancelstring: \"Cancel\"\n        };\n      }\n    },\n    _getmenudefaultheight: function () {\n      var f = this;\n      var e = 0;\n\n      if (this.sortable && this._togglesort && this.showsortmenuitems) {\n        e = 3;\n      }\n\n      if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {\n        e += 2;\n      }\n\n      var d = f._measureMenuElement();\n\n      var g = e * d + 9;\n\n      if (f.filterable && !f.showfilterrow && f.showfiltermenuitems) {\n        g += 194;\n\n        if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n          g += 20;\n        }\n      }\n\n      return g;\n    },\n    _initmenu: function () {\n      var s = this.that;\n\n      if (this.host.jqxMenu) {\n        if (this.gridmenu) {\n          if (this._hasOpenedMenu) {\n            return;\n          }\n\n          if (this.filterable) {\n            if (this._destroyfilterpanel) {\n              this._destroyfilterpanel();\n            }\n          }\n\n          this.removeHandler(this.gridmenu, \"keydown\");\n          this.removeHandler(this.gridmenu, \"closed\");\n          this.removeHandler(this.gridmenu, \"itemclick\");\n          this.gridmenu.jqxMenu(\"destroy\");\n          this.gridmenu.removeData();\n          this.gridmenu.remove();\n        }\n\n        this.menuitemsarray = new Array();\n        var n = \"\";\n\n        if (this.isTouchDevice()) {\n          n = \"jqx-grid-menu-item-touch\";\n        }\n\n        this.gridmenu = b('<div tabindex=0 id=\"gridmenu' + this.element.id + '\" style=\"z-index: 99;\"></div>');\n        this.host.append(this.gridmenu);\n        var x = b(\"<ul></ul>\");\n        var i = '<div class=\"jqx-grid-sortasc-icon\"></div>';\n        var u = b('<li class=\"' + n + '\">' + i + this.gridlocalization.sortascendingstring + \"</li>\");\n        var B = '<div class=\"jqx-grid-sortdesc-icon\"></div>';\n        var y = b('<li class=\"' + n + '\">' + B + this.gridlocalization.sortdescendingstring + \"</li>\");\n        var o = '<div class=\"jqx-grid-sortremove-icon\"></div>';\n        var k = b('<li class=\"' + n + '\">' + o + this.gridlocalization.sortremovestring + \"</li>\");\n        var j = '<div class=\"jqx-grid-groupby-icon\"></div>';\n        var r = b('<li class=\"' + n + '\">' + j + this.gridlocalization.groupbystring + \"</li>\");\n        var f = b('<li class=\"' + n + '\">' + j + this.gridlocalization.groupremovestring + \"</li>\");\n        var d = b('<li type=\"separator\"></li>');\n        var w = b('<li class=\"filter ' + n + '\" style=\"height: 194px;\" ignoretheme=\"true\"><div class=\"filter\"></div></li>');\n        var m = this.gridlocalization.sortascendingstring.length;\n        var t = this.gridlocalization.sortascendingstring;\n\n        if (this.gridlocalization.sortdescendingstring.length > m) {\n          m = this.gridlocalization.sortdescendingstring.length;\n          t = this.gridlocalization.sortdescendingstring;\n        }\n\n        if (this.gridlocalization.sortremovestring.length > m) {\n          m = this.gridlocalization.sortremovestring.length;\n          t = this.gridlocalization.sortremovestring;\n        }\n\n        if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {\n          if (this.gridlocalization.groupbystring.length > m) {\n            m = this.gridlocalization.groupbystring.length;\n            t = this.gridlocalization.groupbystring;\n          }\n\n          if (this.gridlocalization.groupremovestring.length > m) {\n            m = this.gridlocalization.groupremovestring.length;\n            t = this.gridlocalization.groupremovestring;\n          }\n        }\n\n        var z = 200;\n        t = b.trim(t).replace(/\\&nbsp\\;/ig, \"\").replace(/\\&#160\\;/ig, \"\");\n        var g = b(\"<span>\" + t + \"</span>\");\n        g.addClass(this.toThemeProperty(\"jqx-menu-item\"));\n        this.host.append(g);\n        z = g.outerWidth() + 60;\n        g.remove();\n        var e = 0;\n\n        if (this.sortable && this._togglesort && this.showsortmenuitems) {\n          x.append(u);\n          this.menuitemsarray[0] = u[0];\n          x.append(y);\n          this.menuitemsarray[1] = y[0];\n          x.append(k);\n          this.menuitemsarray[2] = k[0];\n          e = 3;\n        }\n\n        if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {\n          x.append(r);\n          this.menuitemsarray[3] = r[0];\n          x.append(f);\n          this.menuitemsarray[4] = f[0];\n          e += 2;\n        }\n\n        var v = this._measureMenuElement();\n\n        var l = e * v + 9;\n        var q = true;\n\n        if (this.filterable && !this.showfilterrow && this.showfiltermenuitems) {\n          if (this._initfilterpanel) {\n            this.menuitemsarray[5] = w[0];\n            this.menuitemsarray[6] = w[0];\n            x.append(d);\n            x.append(w);\n            l += 194;\n\n            if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n              l += 20;\n            }\n\n            if (this.isTouchDevice()) {\n              l += 30;\n            }\n\n            var p = b(w).find(\"div:first\");\n            this.excelfilterpanel = b(\"<div></div>\");\n            this.filterpanel = p;\n            this.filtermenu = b(w);\n            z += 20;\n\n            if (this.adaptive && this.element.offsetWidth < this.adaptivewidth) {\n              z = this.element.offsetWidth - 50;\n            }\n\n            this._initfilterpanel(this, p, \"\", z);\n\n            this._initfilterpanel(this, this.excelfilterpanel, \"\", z, true);\n\n            q = false;\n            this.removeHandler(b(document), \"click.menu\" + s.element.id, s._closemenuafterclick, s);\n            this.addHandler(b(document), \"click.menu\" + s.element.id, s._closemenuafterclick, s);\n          } else {\n            throw new Error(\"jqxGrid: Missing reference to jqxgrid.filter.js.\");\n          }\n        }\n\n        this.gridmenu.append(x);\n\n        if (b.jqx.browser.msie && b.jqx.browser.version < 8 && this.filterable) {\n          b(\"#listBoxfilter1\" + this.element.id).css(\"z-index\", 49);\n          b(\"#listBoxfilter2\" + this.element.id).css(\"z-index\", 49);\n          b(\"#listBoxfilter3\" + this.element.id).css(\"z-index\", 49);\n          b(\"#gridmenu\" + this.element.id).css(\"z-index\", 50);\n          this.addHandler(b(\"#gridmenu\" + this.element.id), \"initialized\", function () {\n            b(\"#menuWrappergridmenu\" + s.element.id).css(\"z-index\", 49);\n          });\n        }\n\n        if (this.menuitemsarray[0] == undefined) {\n          l = 65;\n        }\n\n        this.removeHandler(b(window), \"orientationchange.jqxgrid\" + this.element.id);\n        this.removeHandler(b(window), \"orientationchanged.jqxgrid\" + this.element.id);\n        this.addHandler(b(window), \"orientationchange.jqxgrid\" + this.element.id, function () {\n          s.gridmenu.jqxMenu(\"close\");\n        });\n        this.addHandler(b(window), \"orientationchanged.jqxgrid\" + this.element.id, function () {\n          s.gridmenu.jqxMenu(\"close\");\n        });\n        this.removeHandler(this.gridmenu, \"keydown\");\n        this.addHandler(this.gridmenu, \"keydown\", function (N) {\n          var M = b(s.gridmenu.find(\".jqx-item\")).toArray();\n\n          var F = function () {\n            b(M).removeClass(\"jqx-fill-state-focus\");\n          };\n\n          var R = function (X) {\n            var V = M.indexOf(X);\n\n            for (var W = V - 1; W >= 0; W--) {\n              if (M[W].className.indexOf(\"disabled\") >= 0) {\n                continue;\n              }\n\n              return M[W];\n            }\n\n            return X;\n          };\n\n          var I = function (X) {\n            var V = M.indexOf(X);\n\n            for (var W = V + 1; W < M.length; W++) {\n              if (M[W].className.indexOf(\"disabled\") >= 0) {\n                continue;\n              }\n\n              return M[W];\n            }\n\n            return X;\n          };\n\n          var L = function () {\n            var V = M[M.length - 1];\n\n            if (V.className.indexOf(\"disabled\") >= 0) {\n              return R(V);\n            }\n\n            return V;\n          };\n\n          var U = function () {\n            var V = M[0];\n\n            if (V.className.indexOf(\"disabled\") >= 0) {\n              return I(V);\n            }\n\n            return V;\n          };\n\n          var J = function () {\n            for (var V = 0; V < M.length; V++) {\n              if (M[V].active) {\n                return M[V];\n              }\n            }\n\n            return null;\n          };\n\n          var G = function (W) {\n            F();\n\n            for (var V = 0; V < M.length; V++) {\n              M[V].active = false;\n            }\n\n            if (W) {\n              b(W).addClass(\"jqx-fill-state-focus\");\n              W.active = true;\n            }\n          };\n\n          if (!J() && !s.filterable) {\n            M[0].active = true;\n          }\n\n          if (s.keyboardmenunavigation && s.keyboardnavigation) {\n            if (N.keyCode === 40) {\n              var J = J();\n              G(I(J));\n            } else {\n              if (N.keyCode === 38) {\n                var J = J();\n                G(R(J));\n              }\n            }\n\n            if (N.keyCode === 9) {\n              if (!J()) {\n                if (N.shiftKey) {\n                  if (document.activeElement === b.find(\"#filter1\" + s.element.id)[0]) {\n                    var T = L();\n                    G(T);\n                    b(b.find(\"#filter1\" + s.element.id)).removeClass(\"jqx-fill-state-focus\");\n                    s.gridmenu.focus();\n                    N.stopPropagation();\n                    N.preventDefault();\n                  } else {\n                    if (document.activeElement === b.find(\"#filter1\" + s.element.id + \"ex\")[0]) {\n                      var T = L();\n                      G(T);\n                      b(b.find(\"#filter1\" + s.element.id) + \"ex\").removeClass(\"jqx-fill-state-focus\");\n                      s.gridmenu.focus();\n                      N.stopPropagation();\n                      N.preventDefault();\n                    }\n                  }\n                }\n\n                return true;\n              }\n\n              if (!N.shiftKey) {\n                var J = J();\n\n                if (J === L() && s.filterable && !s.showfilterrow) {\n                  G(null);\n\n                  if (b(b.find(\"#filter1\" + s.element.id)).length > 0) {\n                    b(b.find(\"#filter1\" + s.element.id)).jqxDropDownList(\"focus\");\n                  } else {\n                    if (b(b.find(\"#filter1\" + s.element.id + \"ex\")).length > 0) {\n                      b(b.find(\"#filter1\" + s.element.id + \"ex\")).jqxListBox(\"focus\");\n                    }\n                  }\n                } else {\n                  G(I(J));\n                }\n\n                N.stopPropagation();\n                N.preventDefault();\n              } else {\n                var J = J();\n                G(R(J));\n                N.stopPropagation();\n                N.preventDefault();\n              }\n            }\n          }\n\n          if (N.keyCode == 27) {\n            s.gridmenu.jqxMenu(\"close\");\n          } else {\n            if (N.keyCode == 13) {\n              var M = s.gridmenu.find(\".jqx-item\");\n              var J = J();\n\n              if (J) {\n                b(J).trigger(\"click\");\n                G(null);\n              } else {\n                if (s._buildfilter && s.filterable && !s.showfilterrow) {\n                  if (b.find(\"#filter1\" + s.element.id).length > 0) {\n                    var S = b(b.find(\"#filter1\" + s.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\";\n                    var Q = b(b.find(\"#filter2\" + s.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\";\n                    var O = b(b.find(\"#filter3\" + s.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\";\n                  }\n\n                  var K = b(b.find(\"#filterclearbutton\" + s.element.id)).hasClass(\"jqx-fill-state-focus\");\n                  var C = b(b.find(\"#filterbutton\" + s.element.id)).hasClass(\"jqx-fill-state-focus\");\n\n                  if (K) {\n                    var D = b.data(document.body, \"contextmenu\" + s.element.id).column;\n\n                    s._clearfilter(s, s.element, D);\n\n                    s.gridmenu.jqxMenu(\"close\");\n                  } else {\n                    if (C) {\n                      if (!S && !Q && !O) {\n                        var D = b.data(document.body, \"contextmenu\" + s.element.id).column;\n                        s.gridmenu.jqxMenu(\"close\");\n\n                        s._buildfilter(s, w, D);\n                      }\n                    }\n                  }\n                }\n              }\n\n              var P = s.selectedcells.length > 0 || s.selectedrowindexes.length > 0;\n              s.clearselection();\n              var H = s.getdisplayrows()[0];\n\n              if (H) {\n                var E = s.getboundindex(H);\n\n                if (s.selectionmode.indexOf(\"cell\") >= 0) {\n                  if (P) {\n                    s.selectcell(E, s.columns.records[0].displayfield);\n                  }\n                } else {\n                  if (P) {\n                    s.selectrow(E);\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        if (this.popupwidth != \"auto\") {\n          z = this.popupwidth;\n        }\n\n        this.gridmenu.jqxMenu({\n          popupZIndex: 1000,\n          width: z,\n          height: l,\n          autoCloseOnClick: q,\n          autoOpenPopup: false,\n          mode: \"popup\",\n          theme: this.theme,\n          animationShowDuration: 0,\n          animationHideDuration: 0,\n          animationShowDelay: 0\n        });\n\n        if (this.filterable) {\n          this.gridmenu.jqxMenu(\"_setItemProperty\", w[0].id, \"closeOnClick\", false);\n        }\n\n        if (this.rtl) {\n          var A = this.that;\n          b.each(x.find(\"li\"), function () {\n            b(this).addClass(A.toTP(\"jqx-rtl\"));\n          });\n\n          var h = function (C) {\n            var D = C.find(\"div\");\n            D.css(\"float\", \"right\");\n            D.css(\"margin-left\", \"4px\");\n            D.css(\"margin-right\", \"-4px\");\n          };\n\n          h(k);\n          h(y);\n          h(u);\n          h(r);\n          h(f);\n        }\n\n        this._handlemenueevents();\n      } else {\n        this.columnsmenu = false;\n      }\n    },\n    _arrangemenu: function () {\n      if (!this.gridmenu) {\n        this._initmenu();\n      }\n\n      var j = this.gridlocalization.sortascendingstring.length;\n      var e = this.gridlocalization.sortascendingstring;\n\n      if (this.gridlocalization.sortdescendingstring.length > j) {\n        j = this.gridlocalization.sortdescendingstring.length;\n        e = this.gridlocalization.sortdescendingstring;\n      }\n\n      if (this.gridlocalization.sortremovestring.length > j) {\n        j = this.gridlocalization.sortremovestring.length;\n        e = this.gridlocalization.sortremovestring;\n      }\n\n      if (this.groupable && this._initgroupsheader) {\n        if (this.gridlocalization.groupbystring.length > j) {\n          j = this.gridlocalization.groupbystring.length;\n          e = this.gridlocalization.groupbystring;\n        }\n\n        if (this.gridlocalization.groupremovestring.length > j) {\n          j = this.gridlocalization.groupremovestring.length;\n          e = this.gridlocalization.groupremovestring;\n        }\n      }\n\n      var f = 200;\n      e = b.trim(e).replace(/\\&nbsp\\;/ig, \"\").replace(/\\&#160\\;/ig, \"\");\n      var g = b(\"<span>\" + e + \"</span>\");\n      g.addClass(this.toThemeProperty(\"jqx-menu-item\"));\n      this.host.append(g);\n      f = g.outerWidth() + 60;\n      g.remove();\n      var h = 0;\n\n      if (this.sortable && this._togglesort && this.showsortmenuitems) {\n        h = 3;\n      }\n\n      if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {\n        h += 2;\n      }\n\n      var d = this._measureMenuElement();\n\n      var i = h * d + 9;\n\n      if (this.filterable && this.showfiltermenuitems) {\n        if (this._initfilterpanel) {\n          i += 194;\n          f += 20;\n\n          if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n            i += 20;\n          }\n\n          if (this.isTouchDevice()) {\n            i += 30;\n          }\n        }\n      }\n\n      if (this.menuitemsarray[0] == undefined) {\n        i = 65;\n      }\n\n      if (this.popupwidth != \"auto\") {\n        f = this.popupwidth;\n      }\n\n      if (this.popupheight != \"auto\") {\n        i = this.popupheight;\n      }\n\n      this.gridmenu.jqxMenu({\n        width: f,\n        height: i\n      });\n    },\n    _closemenuafterclick: function (e) {\n      var k = e != null ? e.data : this;\n      var i = false;\n\n      if (e.target == undefined || e.target != undefined && e.target.className.indexOf == undefined) {\n        k.gridmenu.jqxMenu(\"close\");\n        return;\n      }\n\n      if (e.target.className.indexOf(\"filter\") != -1 && e.target.className.indexOf(\"jqx-grid-cell-filter\") == -1) {\n        return;\n      }\n\n      if (e.target.className.indexOf(\"jqx-grid-cell\") != -1) {\n        k.gridmenu.jqxMenu(\"close\");\n        return;\n      }\n\n      if (k._hasOpenedMenu) {\n        if (b(e.target).ischildof(k.gridmenu)) {\n          return;\n        }\n      }\n\n      var d = k.host.coord();\n      var f = k.gridmenu.coord();\n      var m = e.pageX;\n      var l = e.pageY;\n      b.each(b(e.target).parents(), function () {\n        if (this.id != null && this.id.indexOf && this.id.indexOf(\"filter\") != -1) {\n          i = true;\n          return false;\n        }\n\n        if (this.className.indexOf && this.className.indexOf(\"filter\") != -1 && this.className.indexOf(\"jqx-grid-cell-filter\") == -1) {\n          i = true;\n          return false;\n        }\n\n        if (this.className.indexOf && this.className.indexOf(\"jqx-grid-cell\") != -1) {\n          k.gridmenu.jqxMenu(\"close\");\n          return false;\n        }\n\n        if (this.className.indexOf && this.className.indexOf(\"jqx-grid-column\") != -1) {\n          k.gridmenu.jqxMenu(\"close\");\n          return false;\n        }\n      });\n\n      if (i) {\n        return;\n      }\n\n      try {\n        if (k.filtermode === \"default\") {\n          var p = b(b.find(\"#filter1\" + k.element.id)).jqxDropDownList(\"listBox\").vScrollInstance._mouseup;\n\n          var n = new Date();\n\n          if (n - p < 100) {\n            return;\n          }\n\n          var o = b(b.find(\"#filter3\" + k.element.id)).jqxDropDownList(\"listBox\").vScrollInstance._mouseup;\n\n          if (n - o < 100) {\n            return;\n          }\n\n          if (b(b.find(\"#filter3\" + k.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\") {\n            return;\n          }\n\n          if (b(b.find(\"#filter1\" + k.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\") {\n            return;\n          }\n\n          if (b(b.find(\"#filter2\" + k.element.id)).jqxDropDownList(\"container\").css(\"display\") == \"block\") {\n            return;\n          }\n\n          if (k._hasdatefilter) {\n            if (b(\".filtertext1\" + k.element.id)[0].nodeName.toLowerCase() == \"div\") {\n              if (b(\".filtertext1\" + k.element.id).jqxDateTimeInput(\"container\").css(\"display\") == \"block\") {\n                return;\n              }\n\n              if (b(\".filtertext2\" + k.element.id).jqxDateTimeInput(\"container\").css(\"display\") == \"block\") {\n                return;\n              }\n            }\n          }\n        } else {\n          var p = b(b.find(\"#filter1\" + k.element.id)).data().jqxListBox.instance.vScrollInstance._mouseup;\n\n          var n = new Date();\n\n          if (n - p < 100) {\n            return;\n          }\n\n          var o = b(b.find(\"#filter1\" + k.element.id)).data().jqxListBox.instance.hScrollInstance._mouseup;\n\n          if (n - o < 100) {\n            return;\n          }\n        }\n      } catch (j) {}\n\n      if (m >= f.left && m <= f.left + k.gridmenu.width()) {\n        if (l >= f.top && l <= f.top + k.gridmenu.height()) {\n          return;\n        }\n      }\n\n      var h = false;\n\n      if (k.columnmenuclosing) {\n        var g = b.data(document.body, \"contextmenu\" + k.element.id);\n\n        if (!g) {\n          g = {\n            column: {\n              displayfield: null\n            }\n          };\n        }\n\n        h = k.columnmenuclosing(k.gridmenu, g.column.displayfield, b(k.gridmenu).height());\n\n        if (h === false) {\n          return;\n        }\n      }\n\n      k.gridmenu.jqxMenu(\"close\");\n    },\n    _handlemenueevents: function () {\n      var d = this.that;\n      this.removeHandler(this.gridmenu, \"closed\");\n      this.addHandler(this.gridmenu, \"closed\", function (e) {\n        d._closemenu();\n      });\n      this.removeHandler(this.gridmenu, \"itemclick\");\n      this.addHandler(this.gridmenu, \"itemclick\", function (h) {\n        var g = h.args;\n\n        for (var e = 0; e < d.menuitemsarray.length; e++) {\n          var j = d.menuitemsarray[e];\n\n          if (g == j) {\n            if (b(g).attr(\"ignoretheme\") != undefined) {\n              return;\n            }\n\n            var k = b.data(document.body, \"contextmenu\" + d.element.id);\n            var f = k.column;\n\n            if (d.filterable) {\n              d.gridmenu.jqxMenu(\"close\");\n            }\n\n            var m = f.displayfield;\n\n            if (m == null) {\n              m = f.datafield;\n            }\n\n            if (k != null) {\n              switch (e) {\n                case 0:\n                  d.sortby(m, \"ascending\", null);\n                  break;\n\n                case 1:\n                  d.sortby(m, \"descending\", null);\n                  break;\n\n                case 2:\n                  d.sortby(m, null, null);\n                  break;\n\n                case 3:\n                  d.addgroup(m);\n                  break;\n\n                case 4:\n                  d.removegroup(m);\n                  break;\n\n                case 5:\n                  var l = b(d.menuitemsarray[6]);\n                  b(l).css(\"display\", \"block\");\n                  break;\n\n                case 7:\n                  break;\n              }\n            }\n\n            break;\n          }\n        }\n      });\n    },\n    getdatainformation: function () {\n      var d = this.dataview.totalrecords;\n\n      if (this.summaryrows) {\n        d += this.summaryrows.length;\n      }\n\n      return {\n        rowscount: d,\n        sortinformation: this.getsortinformation(),\n        paginginformation: this.getpaginginformation()\n      };\n    },\n    getsortinformation: function () {\n      return {\n        sortcolumns: this.getsortcolumns ? this.getsortcolumns() : [],\n        sortcolumn: this.sortcolumn,\n        sortdirection: this.sortdirection\n      };\n    },\n    getpaginginformation: function () {\n      return {\n        pagenum: this.dataview.pagenum,\n        pagesize: this.pagesize,\n        pagescount: Math.ceil(this.dataview.totalrecords / this.pagesize)\n      };\n    },\n    _updaterowsproperties: function () {\n      this._updatehiddenrows();\n\n      this._updaterowheights();\n\n      this._updaterowdetails();\n    },\n    _updatehiddenrows: function () {\n      var e = this.that;\n      this.hiddens = new Array();\n      var d = this.hiddenboundrows;\n      b.each(d, function (g) {\n        if (this.index != undefined) {\n          var f = this.index;\n          var h = e.getrowvisibleindex(g);\n          e.hiddens[h] = this.hidden;\n        }\n      });\n    },\n    _updaterowheights: function () {\n      var e = this.that;\n      this.heights = new Array();\n      var d = this.heightboundrows;\n      b.each(d, function (g) {\n        if (this.index != undefined) {\n          var f = this.index;\n          var h = e.getrowvisibleindex(g);\n          e.heights[h] = this.height;\n        }\n      });\n    },\n    _updaterowdetails: function () {\n      var d = this.that;\n      this.details = new Array();\n      var e = this.detailboundrows;\n      b.each(e, function (g) {\n        if (this.index != undefined) {\n          var f = this.index;\n          var h = d.getrowvisibleindex(g);\n          d.details[h] = this.details;\n        }\n      });\n    },\n    _getmenuitembyindex: function (d) {\n      if (d == undefined) {\n        return null;\n      }\n\n      return this.menuitemsarray[d];\n    },\n    openmenu: function (e) {\n      if (this._openingmenu) {\n        return;\n      }\n\n      this._openingmenu = true;\n      this.closemenu();\n      var h = this.getcolumn(e);\n\n      if (!h.menu) {\n        return false;\n      }\n\n      if (!this.gridmenu) {\n        this._initmenu();\n      }\n\n      var d = h.columnsmenu;\n      b(h.element).trigger(\"mouseenter\");\n      this.menuOwner = h;\n      var g = this;\n\n      for (var f = 0; f < g.columns.records.length; f++) {\n        if (g.columns.records[f].datafield != e) {\n          b(g.columns.records[f].element).trigger(\"mouseleave\");\n        }\n      }\n\n      setTimeout(function () {\n        if (b(d)[0].style.display == \"block\") {\n          b(d).trigger(\"click\");\n        }\n\n        g._openingmenu = false;\n      }, 200);\n    },\n    closemenu: function () {\n      this._closemenu();\n    },\n    _closemenu: function () {\n      if (this._hasOpenedMenu) {\n        var f = false;\n\n        if (this.columnmenuclosing) {\n          var i = b.data(document.body, \"contextmenu\" + this.element.id);\n\n          if (!i) {\n            i = {\n              column: {\n                displayfield: null\n              }\n            };\n          }\n\n          f = this.columnmenuclosing(this.gridmenu, i.column.displayfield, b(this.gridmenu).height());\n\n          if (f === false) {\n            return;\n          }\n        }\n\n        if (this.gridmenu != null) {\n          this.gridmenu.jqxMenu(\"close\");\n        }\n\n        var i = b.data(document.body, \"contextmenu\" + this.element.id);\n        var e = 16;\n\n        if (i != null && this.autoshowcolumnsmenubutton) {\n          if (this.enableanimations) {\n            b(i.columnsmenu).animate({\n              \"margin-left\": 0\n            }, \"fast\", function () {\n              b(i.columnsmenu).css(\"display\", \"none\");\n            });\n            var h = !this.rtl ? -32 : 0;\n            i.column.iconscontainer.animate({\n              \"margin-left\": h\n            }, \"fast\");\n          } else {\n            b(i.columnsmenu).css(\"display\", \"none\");\n            var h = !this.rtl ? -32 : 0;\n            i.column.iconscontainer.css(\"margin-left\", h);\n          }\n\n          b.data(document.body, \"contextmenu\" + this.element.id, null);\n        }\n\n        this._hasOpenedMenu = false;\n        this.menuOwner = null;\n\n        var k = this._getmenuitembyindex(5);\n\n        if (k) {\n          var j = b(k).find(\"#filter1\" + this.element.id);\n          var d = b(k).find(\"#filter2\" + this.element.id);\n          var g = b(k).find(\"#filter3\" + this.element.id);\n\n          if (j.length > 0 && this.filtermode === \"default\") {\n            j.jqxDropDownList(\"hideListBox\");\n\n            if (d.length > 0) {\n              d.jqxDropDownList(\"hideListBox\");\n            }\n\n            if (g.length > 0) {\n              g.jqxDropDownList(\"hideListBox\");\n            }\n          }\n        }\n\n        this.focus();\n      }\n    },\n    scrolloffset: function (e, d) {\n      if (e == null || d == null || e == undefined || d == undefined) {\n        return;\n      }\n\n      this.vScrollBar.jqxScrollBar(\"setPosition\", e);\n      this.hScrollBar.jqxScrollBar(\"setPosition\", d);\n    },\n    scrollleft: function (d) {\n      if (d == null || d == undefined) {\n        return;\n      }\n\n      if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n        this.hScrollBar.jqxScrollBar(\"setPosition\", d);\n      }\n    },\n    scrolltop: function (d) {\n      if (d == null || d == undefined) {\n        return;\n      }\n\n      if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n        this.vScrollBar.jqxScrollBar(\"setPosition\", d);\n      }\n    },\n    beginupdate: function (e, d) {\n      this._updating = true;\n      this._datachanged = false;\n\n      if (e === true) {\n        this._batchupdate = true;\n      }\n\n      if (d === true) {\n        this._stopbindings = true;\n      }\n    },\n    endupdate: function () {\n      this.resumeupdate();\n    },\n    resumeupdate: function () {\n      this._updating = false;\n\n      if (this._batchupdate) {\n        this._batchupdate = false;\n        this._datachanged = false;\n\n        if (!this._stopbindings) {\n          this.render();\n        } else {\n          this.updatebounddata();\n        }\n\n        return;\n      }\n\n      if (this._stopbindings) {\n        this.updatebounddata(\"data\");\n        return;\n      }\n\n      if (this._datachanged == true) {\n        var d = this.vScrollInstance.value;\n        this.render(true, true, false);\n        this._datachanged = false;\n\n        if (d != 0 && d < this.vScrollInstance.max) {\n          this.scrolltop(d);\n        }\n      } else {\n        this.rendergridcontent(true);\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      if (this.showaggregates && this.renderaggregates) {\n        this.renderaggregates();\n      }\n\n      this._updatecolumnwidths();\n\n      this._updatecellwidths();\n\n      this._renderrows(this.virtualsizeinfo);\n    },\n    updating: function () {\n      return this._updating;\n    },\n    showloadelement: function () {\n      if (this.renderloadelement) {\n        this.dataloadelement.html(this.renderloadelement());\n      }\n\n      this.dataloadelement.width(this.host.width());\n      this.dataloadelement.height(this.host.height());\n      b(this.dataloadelement).css(\"visibility\", \"visible\");\n      b(this.dataloadelement).css(\"display\", \"block\");\n    },\n    hideloadelement: function () {\n      b(this.dataloadelement).css(\"visibility\", \"hidden\");\n      b(this.dataloadelement).css(\"display\", \"none\");\n    },\n    _updatefocusedfilter: function () {\n      var d = this.that;\n\n      if (d.focusedfilter) {\n        d.focusedfilter.focus();\n        setTimeout(function () {\n          d.focusedfilter.focus();\n\n          if (d.focusedfilter[0].nodeName.toLowerCase() == \"input\") {\n            var g = d.focusedfilter.val().length;\n\n            try {\n              if (\"selectionStart\" in d.focusedfilter[0]) {\n                d.focusedfilter[0].setSelectionRange(g, g);\n              } else {\n                var e = d.focusedfilter[0].createTextRange();\n                e.collapse(true);\n                e.moveEnd(\"character\", g);\n                e.moveStart(\"character\", g);\n                e.select();\n              }\n            } catch (f) {}\n          }\n        }, 50);\n      }\n    },\n    databind: function (h, j) {\n      if (this.loadingstate === true) {\n        return;\n      }\n\n      if (this._stopbindings === true) {\n        return;\n      }\n\n      var d = window;\n\n      if (this.host.css(\"display\") == \"block\") {\n        if (this.autoshowloadelement) {\n          b(this.dataloadelement).css(\"visibility\", \"visible\");\n          b(this.dataloadelement).css(\"display\", \"block\");\n          this.dataloadelement.width(this.host.width());\n          this.dataloadelement.height(this.host.height());\n\n          this._hideemptyrow();\n        } else {\n          b(this.dataloadelement).css(\"visibility\", \"hidden\");\n          b(this.dataloadelement).css(\"display\", \"none\");\n        }\n      }\n\n      if (!this._initgroupsheader && this.groups.length > 0) {\n        this.groups = new Array();\n      }\n\n      var g = this.that;\n\n      if (h == null) {\n        h = {};\n      }\n\n      if (!h.recordstartindex) {\n        h.recordstartindex = 0;\n      }\n\n      if (!h.recordendindex) {\n        h.recordendindex = 0;\n      }\n\n      if (h.loadallrecords == undefined || h.loadallrecords == null) {\n        h.loadallrecords = true;\n      }\n\n      if (h.sortcomparer == undefined || h.sortcomparer == null) {\n        h.sortcomparer = null;\n      }\n\n      if (h.filter == undefined || h.filter == null) {\n        h.filter = null;\n      }\n\n      if (h.sort == undefined || h.sort == null) {\n        h.sort = null;\n      }\n\n      if (h.data == undefined || h.data == null) {\n        h.data = null;\n      }\n\n      var e = null;\n\n      if (h != null) {\n        e = h._source != undefined ? h._source.url : h.url;\n      }\n\n      this.dataview = this.dataview || new b.jqx.dataview();\n\n      if (b.jqx.dataview.sort) {\n        b.extend(this.dataview, new b.jqx.dataview.sort());\n      }\n\n      if (b.jqx.dataview.grouping) {\n        b.extend(this.dataview, new b.jqx.dataview.grouping());\n      }\n\n      this.dataview.suspendupdate();\n      this.dataview.pageable = this.pageable;\n      this.dataview.groupable = this.groupable;\n      this.dataview.groups = this.groups;\n      this.dataview.virtualmode = this.virtualmode;\n      this.dataview.grid = this;\n\n      this.dataview._clearcaches();\n\n      if (!this.pageable && this.virtualmode) {\n        this.loadondemand = true;\n      }\n\n      if (!g.initializedcall) {\n        if (h._source) {\n          if (this.sortable) {\n            if (h._source.sortcolumn != undefined) {\n              this.sortcolumn = h._source.sortcolumn;\n              this.source.sortcolumn = this.sortcolumn;\n              this.dataview.sortfield = h._source.sortcolumn;\n              h._source.sortcolumn = null;\n            }\n\n            if (h._source.sortdirection != undefined) {\n              this.dataview.sortfielddirection = h._source.sortdirection;\n              var i = h._source.sortdirection;\n\n              if (i == \"a\" || i == \"asc\" || i == \"ascending\" || i == true) {\n                var f = true;\n              } else {\n                var f = false;\n              }\n\n              if (i != null) {\n                this.sortdirection = {\n                  ascending: f,\n                  descending: !f\n                };\n              } else {\n                this.sortdirection = {\n                  ascending: false,\n                  descending: false\n                };\n              }\n            }\n          }\n        }\n\n        if (this.pageable) {\n          if (h._source) {\n            if (h._source.pagenum != undefined) {\n              this.dataview.pagenum = h._source.pagenum;\n            }\n\n            if (h._source.pagesize != undefined) {\n              this.pagesize = h._source.pagesize;\n              this.dataview.pagesize = h._source.pagesize;\n            } else {\n              this.dataview.pagesize = h._source.pagesize;\n\n              if (this.dataview.pagesize == undefined) {\n                this.dataview.pagesize = this.pagesize;\n              }\n            }\n          }\n        }\n\n        if (this.sortable) {\n          if (h.sortcolumn) {\n            this.dataview.sortfield = h.sortcolumn;\n          }\n\n          if (h.sortdirection) {\n            this.dataview.sortfielddirection = h.sortdirection;\n          }\n        }\n\n        if (this.filterable) {\n          if (this.columns) {\n            b.each(this.columns, function () {\n              if (this.filter) {\n                g.dataview.addfilter(this.datafield, this.filter);\n              }\n            });\n          }\n        }\n      }\n\n      this._loading = true;\n\n      this.dataview.update = function (q) {\n        if (!g.pageable && g.virtualmode) {\n          g.loadondemand = true;\n        }\n\n        g._loading = false;\n\n        if (g.dataview.isupdating()) {\n          g.dataview.resumeupdate(false);\n        }\n\n        if (g.pageable && g.pagerrenderer) {\n          if (g._initpager) {\n            g._initpager();\n          } else {\n            throw new Error(\"jqxGrid: Missing reference to jqxgrid.pager.js.\");\n          }\n        }\n\n        if (g.source && g.source.sortcolumn && g.sortby && !g.virtualmode) {\n          g.render();\n\n          if (!g.source._source.sort) {\n            g.sortby(g.source.sortcolumn, g.source.sortdirection, g.source.sortcomparer);\n          }\n\n          g.source.sortcolumn = null;\n\n          g._postrender(\"data\");\n        } else {\n          var s = g.vScrollInstance.value;\n          var p = g.hScrollInstance.value;\n          var m = g.source ? g.source.datatype : \"array\";\n\n          if (m != \"local\" || m != \"array\") {\n            var n = g.virtualsizeinfo == null || g.virtualsizeinfo != null && g.virtualsizeinfo.virtualheight == 0;\n\n            if (j == \"cells\") {\n              var k = false;\n\n              if (g.filterable && g._initfilterpanel && g.dataview.filters.length) {\n                k = true;\n              }\n\n              if (false == q) {\n                if (!g.vScrollInstance.isScrolling() && !g.hScrollInstance.isScrolling()) {\n                  g._cellscache = new Array();\n                  g._pagescache = new Array();\n\n                  g._renderrows(g.virtualsizeinfo);\n\n                  if (g.showfilterrow && g.filterable && g.filterrow) {\n                    g._updatelistfilters(true);\n                  }\n\n                  if (g.showaggregates && g._updateaggregates) {\n                    g._updateaggregates();\n                  }\n                }\n\n                if (g.sortcolumn) {\n                  g.sortby(g.sortcolumn, g.dataview.sortfielddirection, g.source.sortcomparer);\n                }\n\n                if (g.autoshowloadelement) {\n                  b(g.dataloadelement).css(\"visibility\", \"hidden\");\n                  b(g.dataloadelement).css(\"display\", \"none\");\n                }\n\n                if (g.virtualmode && !g._loading) {\n                  g.loadondemand = true;\n\n                  g._renderrows(g.virtualsizeinfo);\n                }\n\n                g._postrender(\"data\");\n\n                return;\n              } else {\n                if (k) {\n                  j = \"filter\";\n                } else {\n                  if (g.sortcolumn != undefined) {\n                    j = \"sort\";\n                  }\n                }\n              }\n            }\n\n            if (!g.virtualmode || n || g.virtualmode && g.pageable) {\n              if (g.initializedcall == true && j == \"pagechanged\") {\n                s = 0;\n\n                if (g.groupable && g.groups.length > 0) {\n                  g._render(true, true, false, false, false);\n\n                  g._updatecolumnwidths();\n\n                  g._updatecellwidths();\n\n                  g._renderrows(g.virtualsizeinfo);\n\n                  g._postrender(\"data\");\n                } else {\n                  g.rendergridcontent(true);\n\n                  if (g.pageable && g.updatepagerdetails) {\n                    g.updatepagerdetails();\n\n                    if (g.autoheight) {\n                      g._updatepageviews();\n\n                      if (g.autorowheight) {\n                        g._renderrows(this.virtualsizeinfo);\n                      }\n                    } else {\n                      if (g.autorowheight) {\n                        g._updatepageviews();\n\n                        g._renderrows(this.virtualsizeinfo);\n                      }\n                    }\n                  }\n                }\n\n                if (g.showaggregates && g._updateaggregates) {\n                  g._updateaggregates();\n                }\n\n                g._postrender(\"data\");\n              } else {\n                if (j == \"filter\") {\n                  if (g.virtualmode) {\n                    g._render(true, true, false, false, false);\n\n                    g._updatecolumnwidths();\n\n                    g._updatecellwidths();\n\n                    g._renderrows(g.virtualsizeinfo);\n\n                    g._updatefocusedfilter();\n\n                    g._postrender(\"data\");\n                  } else {\n                    g._render(true, true, false, false, false);\n\n                    g._updatecolumnwidths();\n\n                    g._updatecellwidths();\n\n                    g._renderrows(g.virtualsizeinfo);\n\n                    g._updatefocusedfilter();\n\n                    g._postrender(\"data\");\n                  }\n                } else {\n                  if (j == \"sort\") {\n                    if (g.virtualmode) {\n                      g.rendergridcontent(true);\n\n                      if (g.showaggregates && g._updateaggregates) {\n                        g._updateaggregates();\n                      }\n\n                      g._postrender(\"data\");\n                    } else {\n                      g._render(true, true, false, false, false);\n\n                      if (g.sortmode === \"many\") {\n                        for (var r in g.sortcolumns) {\n                          g.sortby(r, g.sortcolumns[r], g.source.sortcomparer);\n                        }\n                      } else {\n                        if (g.sortcolumn && !g.source.sort) {\n                          g.sortby(g.sortcolumn, g.dataview.sortfielddirection, g.source.sortcomparer);\n                        }\n                      }\n\n                      g._postrender(\"data\");\n                    }\n\n                    if (g.source.sort) {\n                      g._updatefocusedfilter();\n                    }\n                  } else {\n                    if (j == \"data\") {\n                      g._render(true, true, false, false, false);\n\n                      g._postrender(\"data\");\n                    } else {\n                      if (j == \"state\") {\n                        g._render(true, true, false, g.menuitemsarray && g.menuitemsarray.length > 0 && !g.virtualmode);\n\n                        g._postrender(\"data\");\n                      } else {\n                        g._render(true, true, true, g.menuitemsarray && g.menuitemsarray.length > 0 && !g.virtualmode);\n\n                        g._postrender(\"data\");\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (g.virtualmode && q == true && !g.pageable) {\n                g._render(true, true, false, false, false);\n\n                g._updatefocusedfilter();\n\n                g._updatecolumnwidths();\n\n                g._updatecellwidths();\n\n                g._renderrows(g.virtualsizeinfo);\n\n                g._postrender(\"data\");\n              } else {\n                if (g.virtualmode && !g.pageable && q == false && j != undefined) {\n                  g.rendergridcontent(true);\n\n                  if (g.showaggregates && g._updateaggregates) {\n                    g._updateaggregates();\n                  }\n\n                  g._postrender(\"data\");\n                } else {\n                  if (g.virtualmode && g.dataview.totalrecords == 0 && g.dataview.filters.length > 0) {\n                    g._render(true, true, true, g.menuitemsarray && !g.virtualmode);\n\n                    g._postrender(\"data\");\n                  } else {\n                    g._pagescache = new Array();\n\n                    g._renderrows(g.virtualsizeinfo);\n\n                    g._postrender(\"data\");\n                  }\n                }\n              }\n            }\n\n            if (g.vScrollInstance.value != s && s <= g.vScrollInstance.max) {\n              g.vScrollInstance.setPosition(s);\n            }\n\n            if (g.hScrollInstance.value != p && p <= g.hScrollInstance.max) {\n              g.hScrollInstance.setPosition(p);\n            }\n          }\n        }\n\n        if (g.autoshowloadelement) {\n          b(g.dataloadelement).css(\"visibility\", \"hidden\");\n          b(g.dataloadelement).css(\"display\", \"none\");\n        }\n\n        if (g.pageable) {\n          if (g.pagerrightbutton) {\n            g.pagerrightbutton.jqxButton({\n              disabled: false\n            });\n            g.pagerleftbutton.jqxButton({\n              disabled: false\n            });\n            g.pagershowrowscombo.jqxDropDownList({\n              disabled: false\n            });\n          }\n\n          if (g.pagerfirstbutton) {\n            g.pagerfirstbutton.jqxButton({\n              disabled: false\n            });\n            g.pagerlastbutton.jqxButton({\n              disabled: false\n            });\n          }\n        }\n\n        g._raiseEvent(11);\n\n        if (!g.initializedcall) {\n          var o = function () {\n            g._raiseEvent(0);\n\n            g.initializedcall = true;\n            g.isInitialized = true;\n\n            if (g.ready) {\n              g.ready();\n            }\n\n            if (g.sortmode === \"many\" && g.sortable) {\n              if (g.source.sortcolumns) {\n                var v = g.source.sortcolumns;\n\n                for (var u = 0; u < v.length; u++) {\n                  g.sortby(v[u], g.source.sortdirections[u] === \"asc\" ? true : false);\n                }\n              }\n            }\n\n            if (g.renderstatusbar) {\n              g.renderstatusbar(g.statusbar);\n            }\n\n            if (g.rendertoolbar) {\n              g.rendertoolbar(g.toolbar);\n            }\n\n            if (g._rendercelltexts) {\n              g._rendercelltexts();\n            }\n\n            if (g._gridRenderElement) {\n              b(g._gridRenderElement).show(\"slow\");\n              var t = 6000 + Math.floor(Math.random() * 4000 + 1);\n              var w = String.fromCharCode(83, 69, 84).toLowerCase() + \"-\" + String.fromCharCode(84, 73, 77, 69, 79, 85, 84).toLowerCase();\n              d[b.camelCase(w)](function () {\n                b(g._gridRenderElement).hide(\"slow\", function () {\n                  b(g._gridRenderElement).remove();\n                });\n              }, t);\n            }\n\n            if (g.autoloadstate) {\n              if (g.loadstate) {\n                g.loadstate(null, true);\n              }\n            }\n          };\n\n          if (!b.jqx.isHidden(g.host)) {\n            o();\n          } else {\n            if (g.readyInterval) {\n              clearInterval(g.readyInterval);\n            }\n\n            g.readyInterval = setInterval(function () {\n              if (!b.jqx.isHidden(g.host)) {\n                if (g.__isRendered) {\n                  clearInterval(g.readyInterval);\n                  g.readyInterval = null;\n                  o();\n\n                  g._initmenu();\n                }\n              }\n            }, 200);\n          }\n\n          if (g.width != null && g.width.toString().indexOf(\"%\") != -1 || g.height != null && g.height.toString().indexOf(\"%\") != -1) {}\n\n          if (g.host.css(\"visibility\") == \"hidden\") {\n            var l = b.jqx.browser.msie && b.jqx.browser.version < 8;\n\n            if (g.vScrollBar.css(\"visibility\") == \"visible\") {\n              g.vScrollBar.css(\"visibility\", \"inherit\");\n            }\n\n            if (!g.autowidth) {\n              if (g.hScrollBar.css(\"visibility\") == \"visible\") {\n                g.hScrollBar.css(\"visibility\", \"inherit\");\n              }\n            }\n\n            g._intervalTimer = setInterval(function () {\n              if (g.host.css(\"visibility\") == \"visible\") {\n                g._updatesize(true);\n\n                clearInterval(g._intervalTimer);\n              }\n            }, 100);\n          }\n        } else {\n          g._updateTouchScrolling();\n        }\n      };\n\n      this.dataview.databind(h);\n\n      if (this.dataview.isupdating()) {\n        if (e != undefined) {\n          this.dataview.suspend = false;\n        } else {\n          this.dataview.resumeupdate(false);\n        }\n      }\n\n      this._initializeRows();\n    },\n    scrollto: function (e, d) {\n      if (undefined != e) {\n        this.hScrollInstance.setPosition(e);\n      }\n\n      if (undefined != d) {\n        this.vScrollInstance.setPosition(d);\n      }\n    },\n    scrollposition: function () {\n      return {\n        top: this.vScrollInstance.value,\n        left: this.hScrollInstance.value\n      };\n    },\n    ensurerowvisible: function (l) {\n      var k = this;\n\n      if (this.autoheight && !this.pageable) {\n        return true;\n      }\n\n      var f = this._getpagesize();\n\n      var j = Math.floor(l / f);\n\n      if (!this._pageviews[j] && !this.pageable) {\n        this._updatepageviews();\n      }\n\n      if (this.groupable && this.groups.length > 0) {\n        var n = this.getdisplayrows();\n        var o = 0;\n\n        for (var g = 0; g < n.length; g++) {\n          var t = n[g];\n\n          if (t.boundindex === l) {\n            var q = this.vScrollInstance.value;\n            var r = this._gettableheight() - this.rowsheight;\n\n            if (o < q || o > q + r) {\n              this.scrolltop(o - this.rowsheight);\n            }\n\n            if (o === q) {\n              this.scrolltop(o - this.rowsheight);\n            }\n\n            break;\n          }\n\n          var e = function (i) {\n            if (i.group) {\n              if (k.expandedgroups[i.uniqueid]) {\n                return k.expandedgroups[i.uniqueid].expanded;\n              }\n            } else {\n              return false;\n            }\n          };\n\n          var p = t.parentItem;\n          var h = true;\n\n          while (p) {\n            if (p && !e(p)) {\n              h = false;\n              break;\n            }\n\n            p = p.parentItem;\n          }\n\n          if (h) {\n            o += this.rowsheight;\n\n            if (this.details[g]) {\n              if (this.details[g].rowdetailshidden == false) {\n                o += this.details[g].rowdetailsheight;\n              }\n            }\n          }\n        }\n\n        return true;\n      }\n\n      var s = false;\n\n      if (this.pageable && this.gotopage && !this.virtualmode) {\n        var j = Math.floor(l / f);\n\n        if (this.dataview.pagenum != j) {\n          if (this.groupable && this.groups.length > 0) {\n            return true;\n          }\n\n          if (!this.editcell) {\n            this.gotopage(j);\n          } else {\n            setTimeout(function () {\n              k.pagerpageinput.focus();\n            }, 25);\n            return false;\n          }\n\n          s = true;\n        }\n      }\n\n      var q = this.vScrollInstance.value;\n      var r = this._gettableheight() - this.rowsheight;\n      var d = f * (l / f - j);\n      d = Math.round(d);\n\n      if (this._pageviews[j]) {\n        var o = this._pageviews[j].top;\n        var m = o + d * this.rowsheight;\n\n        if (this.rowdetails) {\n          for (var g = f * j; g < l; g++) {\n            if (this.details[g]) {\n              if (this.details[g].rowdetailshidden == false) {\n                m += this.details[g].rowdetailsheight;\n              }\n            }\n          }\n        }\n\n        if (this.scrollmode == \"deferred\") {\n          if (this.vScrollInstance.max <= m + this.rowsheight) {\n            m = this.vScrollInstance.max;\n          }\n        }\n\n        if (m < q) {\n          this.scrolltop(m);\n          s = true;\n        } else {\n          if (m > q + r + 2) {\n            this.scrolltop(m - r);\n            s = true;\n          } else {}\n        }\n      } else {\n        if (this.pageable) {\n          var m = d * this.rowsheight;\n\n          if (this.rowdetails) {\n            for (var g = f * j; g < f * j + d; g++) {\n              if (this.details[g] && this.details[g].rowdetailshidden == false) {\n                m += this.details[g].rowdetailsheight;\n              }\n            }\n          }\n\n          if (m < q || m > q + r) {\n            this.scrollto(0, m);\n            s = true;\n          }\n        }\n      }\n\n      return s;\n    },\n    ensurecellvisible: function (h, d) {\n      var n = this.that;\n      var i = this.hScrollBar.jqxScrollBar(\"value\");\n      var j = n.hScrollInstance.max;\n\n      if (n.rtl) {\n        if (this.hScrollBar.css(\"visibility\") != \"visible\") {\n          j = 0;\n        }\n      }\n\n      var o = this.ensurerowvisible(h);\n      var e = 0;\n\n      if (this.columns.records) {\n        var m = i;\n\n        if (this.hScrollBar.css(\"visibility\") == \"hidden\") {\n          return;\n        }\n\n        var l = this.host.width();\n        var k = 0;\n        var f = this.vScrollBar.css(\"visibility\") == \"visible\" ? 20 : 0;\n        var g = false;\n        b.each(this.columns.records, function () {\n          if (this.hidden) {\n            return true;\n          }\n\n          if (this.datafield == d) {\n            var q = 0;\n            var p = !n.rtl ? m : j - i;\n\n            if (e + this.width > p + l - f) {\n              q = e + this.width - l + f;\n\n              if (n.rtl) {\n                q = j - q;\n              }\n\n              n.scrollleft(q);\n              g = true;\n            } else {\n              if (e <= p) {\n                q = e - this.width;\n\n                if (n.rtl) {\n                  q = j - q;\n                }\n\n                n.scrollleft(q);\n                g = true;\n              }\n            }\n\n            if (k == 0) {\n              if (n.rtl) {\n                n.scrollleft(j);\n              } else {\n                n.scrollleft(0);\n              }\n\n              g = true;\n            } else {\n              if (k == n.columns.records.length - 1) {\n                if (n.hScrollBar.css(\"visibility\") == \"visible\") {\n                  if (!n.rtl) {\n                    n.scrollleft(n.hScrollBar.jqxScrollBar(\"max\"));\n                  } else {\n                    n.scrollleft(n.hScrollBar.jqxScrollBar(\"min\"));\n                  }\n\n                  g = true;\n                }\n              }\n            }\n\n            return false;\n          }\n\n          k++;\n          e += this.width;\n        });\n\n        if (!g) {\n          n.scrollleft(m);\n        }\n      }\n\n      return o;\n    },\n    setrowheight: function (e, d) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (e == null || d == null) {\n        return false;\n      }\n\n      this.heightboundrows[e] = {\n        index: e,\n        height: d\n      };\n      e = this.getrowvisibleindex(e);\n\n      if (e < 0) {\n        return false;\n      }\n\n      if (this.rows.records[e]) {\n        this.rows.records[e].height = d;\n      } else {\n        var f = new a(this, null);\n        f.height = d;\n        this.rows.replace(e, f);\n      }\n\n      this.heights[e] = d;\n      this.rendergridcontent(true);\n      return true;\n    },\n    getrowheight: function (d) {\n      if (d == null) {\n        return null;\n      }\n\n      d = this.getrowvisibleindex(d);\n\n      if (d < 0) {\n        return false;\n      }\n\n      if (this.rows.records[d]) {\n        return this.rows.records[d].height;\n      }\n    },\n    setrowdetails: function (f, h, d, j) {\n      if (f == undefined || f == null || f < 0) {\n        return;\n      }\n\n      var e = f + \"_\";\n\n      if (this._rowdetailscache[e]) {\n        var g = this._rowdetailscache[e].element;\n        b(g).remove();\n        this._rowdetailscache[e] = null;\n      }\n\n      var i = this.dataview.generatekey();\n      this.detailboundrows[f] = {\n        index: f,\n        details: {\n          rowdetails: h,\n          rowdetailsheight: d,\n          rowdetailshidden: j,\n          key: i\n        }\n      };\n      f = this.getrowvisibleindex(f);\n\n      if (f < 0) {\n        return false;\n      }\n\n      return this._setrowdetails(f, h, d, j, i);\n    },\n    getcolumn: function (d) {\n      var e = null;\n\n      if (this.columns.records) {\n        b.each(this.columns.records, function () {\n          if (this.datafield == d || this.displayfield == d) {\n            e = this;\n            return false;\n          }\n        });\n      } else {\n        if (this.columns) {\n          b.each(this.columns, function () {\n            if (this.datafield == d || this.displayfield == d) {\n              e = this;\n              return false;\n            }\n          });\n        }\n      }\n\n      return e;\n    },\n    _getcolumnindex: function (e) {\n      var d = -1;\n\n      if (this.columns.records) {\n        b.each(this.columns.records, function () {\n          d++;\n\n          if (this.datafield == e) {\n            return false;\n          }\n        });\n      }\n\n      return d;\n    },\n    _getcolumnat: function (d) {\n      var e = this.columns.records[d];\n      return e;\n    },\n    _getprevvisiblecolumn: function (e) {\n      var d = this.that;\n\n      while (e > 0) {\n        e--;\n        var f = d.getcolumnat(e);\n\n        if (!f) {\n          return null;\n        }\n\n        if (!f.hidden) {\n          return f;\n        }\n      }\n\n      return null;\n    },\n    _getnextvisiblecolumn: function (e) {\n      var d = this.that;\n\n      while (e < this.columns.records.length) {\n        e++;\n        var f = d.getcolumnat(e);\n\n        if (!f) {\n          return null;\n        }\n\n        if (!f.hidden) {\n          return f;\n        }\n      }\n\n      return null;\n    },\n    getcolumnat: function (d) {\n      if (!isNaN(d)) {\n        var e = this.columns.records[d];\n        return e;\n      }\n\n      return null;\n    },\n    _getcolumn: function (d) {\n      var e = null;\n      b.each(this._columns, function () {\n        if (this.datafield == d || this.displayfield == d) {\n          e = this;\n          return false;\n        }\n      });\n      return e;\n    },\n    _setcolumnproperty: function (e, g, h) {\n      if (e == null || g == null || h == null) {\n        return null;\n      }\n\n      g = g.toLowerCase();\n      var f = this.getcolumn(e);\n\n      if (f == null) {\n        return;\n      }\n\n      var i = f[g];\n      f[g] = h;\n\n      var d = this._getcolumn(e);\n\n      if (d != null) {\n        d[g] = h;\n      }\n\n      this._cellscache = new Array();\n\n      switch (g) {\n        case \"filteritems\":\n          if (this.filterable && this.showfilterrow) {\n            this._updatelistfilters(true, true);\n          }\n\n          break;\n\n        case \"text\":\n          this.prerenderrequired = true;\n\n          this._rendercolumnheaders();\n\n          this._updatecellwidths();\n\n          if (this._groupsheader()) {\n            if (this._initgroupsheader) {\n              this._initgroupsheader();\n            }\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n\n          if (this.filterable && this.showfilterrow) {\n            this.refreshfilterrow();\n          }\n\n          break;\n\n        case \"editable\":\n        case \"resizable\":\n        case \"draggable\":\n          if (g == \"editable\") {\n            if (h != i) {\n              if (this.editcell != null && this.endcelledit) {\n                this.endcelledit(this.editcell.row, this.editcell.column, true, true);\n              }\n\n              if (f.columntype == \"checkbox\") {\n                this.prerenderrequired = true;\n                this.rendergridcontent(true, false);\n\n                if (this.updating()) {\n                  return false;\n                }\n              }\n\n              if (this.updating()) {\n                return false;\n              }\n\n              this._renderrows(this.virtualsizeinfo);\n            }\n          }\n\n          break;\n\n        case \"hidden\":\n        case \"hideable\":\n        case \"renderer\":\n        case \"cellsrenderer\":\n        case \"align\":\n        case \"aggregates\":\n        case \"cellsalign\":\n        case \"cellsformat\":\n        case \"pinned\":\n        case \"contenttype\":\n        case \"filterable\":\n        case \"groupable\":\n        case \"cellclass\":\n        case \"cellclassname\":\n        case \"classname\":\n        case \"class\":\n          this.prerenderrequired = true;\n\n          if (g == \"pinned\") {\n            this._initializeColumns();\n\n            this._preparecolumngroups();\n          }\n\n          this.rendergridcontent(true);\n\n          if (this.updating()) {\n            return false;\n          }\n\n          if (g == \"hidden\") {\n            this._updatecolumnwidths();\n\n            this._updatecellwidths();\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n\n          if (this.showaggregates && this._updateaggregates) {\n            this._updateaggregates();\n          }\n\n          break;\n\n        case \"width\":\n        case \"minwidth\":\n        case \"maxwidth\":\n          if (this.updating()) {\n            return false;\n          }\n\n          f._width = null;\n          f._percentagewidth = null;\n\n          this._updatecolumnwidths();\n\n          this._updatecellwidths();\n\n          this._renderrows(this.virtualsizeinfo);\n\n          break;\n      }\n    },\n    _getcolumnproperty: function (d, f) {\n      if (d == null || f == null) {\n        return null;\n      }\n\n      f = f.toLowerCase();\n      var e = this.getcolumn(d);\n      return e[f];\n    },\n    setcolumnproperty: function (d, e, f) {\n      this._setcolumnproperty(d, e, f);\n    },\n    getcolumnproperty: function (d, e) {\n      return this._getcolumnproperty(d, e);\n    },\n    hidecolumn: function (d) {\n      this._setcolumnproperty(d, \"hidden\", true);\n    },\n    showcolumn: function (d) {\n      this._setcolumnproperty(d, \"hidden\", false);\n    },\n    iscolumnvisible: function (d) {\n      return !this._getcolumnproperty(d, \"hidden\");\n    },\n    pincolumn: function (d) {\n      this._setcolumnproperty(d, \"pinned\", true);\n    },\n    unpincolumn: function (d) {\n      this._setcolumnproperty(d, \"pinned\", false);\n    },\n    iscolumnpinned: function (d) {\n      return this._getcolumnproperty(d, \"pinned\");\n    },\n    _setrowdetails: function (j, d, n, h, e) {\n      if (n == 0) {\n        n = 100;\n      }\n\n      if (j == null || n == null) {\n        return false;\n      }\n\n      if (e != null) {\n        this.details[j] = {\n          rowdetails: d,\n          rowdetailsheight: n,\n          rowdetailshidden: h,\n          detailskey: e\n        };\n      } else {\n        var m = this.details[j] != null ? this.details[j].detailskey : null;\n        var l = {\n          rowdetails: d,\n          rowdetailsheight: n,\n          rowdetailshidden: h,\n          detailskey: m\n        };\n        var k = this.that;\n\n        for (var g = 0; g < this.detailboundrows.length; g++) {\n          if (this.detailboundrows[g] != undefined) {\n            var f = this.detailboundrows[g];\n\n            if (f.details.detailskey == m) {\n              f.details.rowdetailsheight = l.rowdetailsheight;\n              f.details.rowdetailshidden = l.rowdetailshidden;\n              f.details.rowdetails = l.rowdetails;\n              break;\n            }\n          }\n        }\n\n        this.details[j] = l;\n      }\n\n      if (this._detailsUpdate) {\n        return;\n      }\n\n      this.rendergridcontent(true);\n\n      this._updatecolumnwidths();\n\n      this._updatecellwidths();\n\n      this._renderrows(this.virtualsizeinfo);\n\n      return true;\n    },\n    getrowdetails: function (d) {\n      if (d == null) {\n        return false;\n      }\n\n      d = this.getrowvisibleindex(d);\n      return this._getrowdetails(d);\n    },\n    _getrowdetails: function (d) {\n      if (d == null) {\n        return false;\n      }\n\n      if (d < 0) {\n        return false;\n      }\n\n      if (this.details[d]) {\n        return this.details[d];\n      }\n\n      if (this.rowdetailstemplate) {\n        if (typeof this.rowdetailstemplate === \"function\") {\n          var e = this.rowdetailstemplate(d);\n\n          if (e.rowdetailshidden === undefined) {\n            e.rowdetailshidden = true;\n          }\n\n          if (e.rowdetailsheight === undefined) {\n            e.rowdetailsheight = 200;\n          }\n\n          if (e.rowdetails === undefined) {\n            e.rowdetails = \"<div></div>\";\n          }\n\n          return e;\n        }\n\n        return this.rowdetailstemplate;\n      }\n    },\n    getrecordscount: function () {\n      return this.dataview.totalrecords;\n    },\n    showrowdetails: function (d) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (d == null) {\n        return false;\n      }\n\n      if (!this.detailsVisibility) {\n        this.detailsVisibility = new Array();\n      }\n\n      this.detailsVisibility[d] = false;\n      d = this.getrowvisibleindex(d);\n\n      if (d < 0) {\n        return false;\n      }\n\n      var e = this._getrowdetails(d);\n\n      return this._setrowdetailsvisibility(d, e, false);\n    },\n    hiderowdetails: function (d) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (!this.detailsVisibility) {\n        this.detailsVisibility = new Array();\n      }\n\n      this.detailsVisibility[d] = true;\n      d = this.getrowvisibleindex(d);\n\n      if (d < 0) {\n        return false;\n      }\n\n      var e = this._getrowdetails(d);\n\n      return this._setrowdetailsvisibility(d, e, true);\n    },\n    _togglerowdetails: function (j) {\n      if (!this.detailsVisibility) {\n        this.detailsVisibility = new Array();\n      }\n\n      var f = j.visibleindex;\n\n      var g = this._getrowdetails(f);\n\n      if (g != null) {\n        var e = this.vScrollInstance.value;\n        var i = !g.rowdetailshidden;\n        var h = this.getboundindex(j);\n\n        if (h != undefined) {\n          this.detailsVisibility[h] = i;\n        }\n\n        var d = this._setrowdetailsvisibility(f, g, i);\n\n        if (e !== 0 && this.vScrollBar.css(\"visibility\") !== \"hidden\") {\n          if (e <= this.vScrollInstance.max) {\n            this.vScrollInstance.setPosition(e);\n          } else {\n            this.vScrollInstance.setPosition(this.vScrollInstance.max);\n          }\n        }\n\n        return d;\n      }\n\n      return false;\n    },\n    _setrowdetailsvisibility: function (e, f, i) {\n      if (this.rowdetailstemplate) {\n        if (!this.details) {\n          this.details = new Array();\n        }\n\n        if (!this.details[e]) {\n          var g = typeof this.rowdetailstemplate === \"function\" ? this.rowdetailstemplate(e) : this.rowdetailstemplate;\n\n          if (undefined === g.rowdetailshidden) {\n            g.rowdetailshidden = true;\n          }\n\n          if (undefined === g.rowdetailsheight) {\n            g.rowdetailsheight = 200;\n          }\n\n          if (undefined === g.rowdetails) {\n            g.rowdetails = \"<div></div>\";\n          }\n\n          this.details[e] = {\n            rowdetailshidden: g.rowdetailshidden,\n            rowdetailsheight: g.rowdetailsheight,\n            rowdetails: g.rowdetails\n          };\n          var h = this.dataview.generatekey();\n          this.details[e].detailskey = h;\n          this.detailboundrows[e] = {\n            index: e,\n            details: this.details[e]\n          };\n        }\n      }\n\n      if (f != null) {\n        this.details[e].rowdetailshidden = i;\n      } else {\n        return false;\n      }\n\n      var d = this.details[e];\n\n      if (i) {\n        this._raiseEvent(21, {\n          rowindex: e,\n          details: d.rowdetails,\n          height: d.rowdetailsheight\n        });\n      } else {\n        this._raiseEvent(20, {\n          rowindex: e,\n          details: d.rowdetails,\n          height: d.rowdetailsheight\n        });\n      }\n\n      return this._setrowdetails(e, d.rowdetails, d.rowdetailsheight, d.rowdetailshidden);\n    },\n    getrowvisibleindex: function (d) {\n      if (d == undefined || d == null || d < 0) {\n        return false;\n      }\n\n      if (this.virtualmode) {\n        var e = this.dataview.loadedrecords[d];\n\n        if (e == undefined) {\n          return -1;\n        }\n\n        return e.visibleindex;\n      }\n\n      return this.getrowdisplayindex(d);\n    },\n    hiderow: function (d) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (d == undefined || d == null || d < 0) {\n        return false;\n      }\n\n      if (d == null) {\n        return false;\n      }\n\n      this.hiddenboundrows[d] = {\n        index: d,\n        hidden: true\n      };\n      d = this.getrowvisibleindex(d);\n      return this._setrowvisibility(d, true);\n    },\n    showrow: function (d) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (d == undefined || d == null || d < 0) {\n        return false;\n      }\n\n      if (d == null) {\n        return false;\n      }\n\n      this.hiddenboundrows[d] = {\n        index: d,\n        hidden: false\n      };\n      d = this.getrowvisibleindex(d);\n      return this._setrowvisibility(d, false);\n    },\n    isrowhiddenat: function (d) {\n      if (d == null) {\n        return null;\n      }\n\n      d = this.getrowvisibleindex(d);\n\n      if (this.rows.records[d]) {\n        return this.rows.records[d].hidden;\n      }\n    },\n    _setrowvisibility: function (d, f, e) {\n      if (d == null) {\n        return false;\n      }\n\n      this.hiddens[d] = f;\n\n      if (e == undefined || e) {\n        this.rendergridcontent(true);\n        return true;\n      }\n\n      return false;\n    },\n    _loadrows: function () {\n      if (!this._pageviews[this.dataview.pagenum] && !this.pageable) {\n        return;\n      }\n\n      var k = !this.pageable ? this._pageviews[this.dataview.pagenum].top : 0;\n\n      if (!this.pageable && this._pagescache[this.dataview.pagenum] != undefined) {\n        return null;\n      }\n\n      if (!this.virtualsizeinfo) {\n        return;\n      }\n\n      var l = this.that;\n      var s = new Array();\n      var j = new Array();\n      var u = l.groupable && l.groups.length > 0;\n      var d = this.dataview.totalrecords;\n      var m = this.virtualsizeinfo.virtualheight;\n      var e = 0;\n      this.rows.beginupdate();\n      var n = this.dataview.pagesize;\n\n      if (this.pageable && u) {\n        n = this.dataview.rows.length;\n      }\n\n      for (var o = 0; o < n; o++) {\n        if (o >= this.dataview.rows.length) {\n          break;\n        }\n\n        var f = this.dataview.rows[o];\n        var g = null;\n\n        if (!l.rows.records[f.visibleindex]) {\n          g = new a(l, f);\n        } else {\n          g = l.rows.records[f.visibleindex];\n          g.setdata(f);\n        }\n\n        g.hidden = this.hiddens[g.visibleindex];\n\n        if (this.rowdetailstemplate) {\n          var v = typeof this.rowdetailstemplate === \"function\" ? this.rowdetailstemplate(g.boundindex) : this.rowdetailstemplate;\n          g.rowdetails = v.rowdetails;\n          g.rowdetailsheight = v.rowdetailsheight;\n          g.rowdetailshidden = v.rowdetailshidden;\n\n          if (g.rowdetailshidden === undefined) {\n            g.rowdetailshidden = true;\n          }\n\n          if (g.rowdetailsheight === undefined) {\n            g.rowdetailsheight = 200;\n          }\n\n          if (g.rowdetails === undefined) {\n            g.rowdetails = \"<div></div>\";\n          }\n        }\n\n        var r = this.details[g.visibleindex];\n\n        if (r) {\n          g.rowdetails = r.rowdetails;\n          g.rowdetailsheight = r.rowdetailsheight;\n          g.rowdetailshidden = r.rowdetailshidden;\n\n          if (g.rowdetailshidden === undefined) {\n            g.rowdetailshidden = true;\n          }\n\n          if (g.rowdetailsheight === undefined) {\n            g.rowdetailsheight = 200;\n          }\n\n          if (g.rowdetails === undefined) {\n            g.rowdetails = \"<div></div>\";\n          }\n        } else {\n          if (!this.rowdetailstemplate) {\n            g.rowdetails = null;\n          }\n        }\n\n        if (u && this.pageable && g.parentbounddata != null) {\n          var p = s[g.parentbounddata.uniqueid];\n\n          if (p != null) {\n            var q = this._findgroupstate(p.uniqueid);\n\n            if (this._setsubgroupsvisibility) {\n              this._setsubgroupsvisibility(this, g.parentbounddata, !q, false);\n            }\n\n            g.hidden = this.hiddens[g.visibleindex];\n          }\n\n          if (p != null && p != undefined) {\n            g.parentrow = p;\n            p.subrows[p.subrows.length++] = g;\n          }\n        }\n\n        if (g.hidden) {\n          continue;\n        }\n\n        var h = f.visibleindex;\n\n        if (!this.heights[h]) {\n          this.heights[h] = this.rowsheight;\n        }\n\n        g.height = this.heights[h];\n\n        if (this.rowdetails) {\n          if (g.rowdetails && !g.rowdetailshidden) {\n            g.height += g.rowdetailsheight;\n          }\n        }\n\n        s[g.uniqueid] = g;\n        j[e++] = g;\n        g.top = k;\n        k += g.height;\n        var t = h;\n        l.rows.replace(t, g);\n      }\n\n      if ((this.autoheight || this.pageable) && this.autorowheight) {\n        if (this._pageviews && this._pageviews.length > 0) {\n          this._pageviews[0].height = k;\n        }\n      }\n\n      this.rows.resumeupdate();\n\n      if (j.length > 0) {\n        this._pagescache[this.dataview.pagenum] = j;\n      }\n    },\n    _updateaddnewrowui: function (g) {\n      var m = this;\n      var k = m.everpresentrowposition != \"bottom\" ? m.addnewrowtop : m.addnewrowbottom;\n      var o = m.columns.records.length;\n      var f = 0;\n\n      for (var l = 0; l < o; l++) {\n        var h = m.columns.records[l];\n\n        if (h.addnewrowwidget) {\n          b(h.addnewrowwidget).detach();\n        }\n      }\n\n      for (var l = 0; l < o; l++) {\n        var h = m.columns.records[l];\n        var e = h.width;\n\n        if (e < h.minwidth) {\n          e = h.minwidth;\n        }\n\n        if (e > h.maxwidth) {\n          e = h.maxwidth;\n        }\n\n        var n = b(k[0].cells[l]);\n        n.css(\"left\", f);\n        var i = true;\n\n        if (n.width() == e) {\n          i = false;\n        }\n\n        if (g) {\n          i = true;\n        }\n\n        n.width(e);\n        n[0].left = f;\n\n        if (h.addnewrowwidget) {\n          n.html(\"\");\n          n.append(h.addnewrowwidget);\n        }\n\n        if (!(h.hidden && h.hideable) && !h.adaptivehidden) {\n          f += e;\n        } else {\n          n.css(\"display\", \"none\");\n        }\n\n        if (!i) {\n          continue;\n        }\n      }\n\n      var p = m.everpresentrowactions.split(\" \");\n      m.addnewrowbutton.show();\n      m.addnewrowupdatebutton.show();\n      m.addnewrowresetbutton.show();\n      m.addnewrowdeletebutton.show();\n\n      if (p.indexOf(\"add\") == -1 && p.indexOf(\"addBottom\") == -1) {\n        m.addnewrowbutton.hide();\n      }\n\n      if (p.indexOf(\"update\") == -1) {\n        m.addnewrowupdatebutton.hide();\n      }\n\n      if (p.indexOf(\"reset\") == -1) {\n        m.addnewrowresetbutton.hide();\n      }\n\n      if (p.indexOf(\"delete\") == -1) {\n        m.addnewrowdeletebutton.hide();\n      }\n\n      var d = b(k.children()[0]);\n      d.width(parseInt(f) + 2);\n      d.height(m.everpresentrowheight);\n      d.css(\"max-height\", m.everpresentrowheight + \"px\");\n    },\n    _removeaddnewrow: function () {\n      var g = this;\n      var d = g.columns.records.length;\n\n      for (var f = 0; f < d; f++) {\n        var e = g.columns.records[f];\n\n        if (e.addnewrowwidget) {\n          if (e.destroyeverpresentrowwidget) {\n            e.destroyeverpresentrowwidget(e.addnewrowwidget);\n          } else {\n            e.addnewrowwidget.remove();\n          }\n\n          e.addnewrowwidget = null;\n        }\n      }\n\n      if (g.addnewrowbutton) {\n        g.addnewrowbutton.remove();\n      }\n\n      if (g.addnewrowupdatebutton) {\n        g.addnewrowupdatebutton.remove();\n      }\n\n      if (g.addnewrowdeletebutton) {\n        g.addnewrowdeletebutton.remove();\n      }\n\n      if (g.addnewrowresetbutton) {\n        g.addnewrowresetbutton.remove();\n      }\n\n      if (g.addnewrowpopup) {\n        g.addnewrowpopup.remove();\n        g.addnewrowpopup = null;\n      }\n\n      if (g.addnewrowtop) {\n        g.addnewrowtop.remove();\n        g.addnewrowtop = null;\n      }\n\n      if (g.addnewrowbottom) {\n        g.addnewrowbottom.remove();\n        g.addnewrowbottom = null;\n      }\n    },\n    _updateaddnewrow: function () {\n      var o = this;\n      var f = o.everpresentrowposition != \"bottom\" ? o.addnewrowtop : o.addnewrowbottom;\n      var t = b('<div style=\"position: relative;\" id=\"row000' + o.element.id + '\"></div>');\n      var i = 0;\n      var z = o.columns.records.length;\n      var n = o.toThemeProperty(\"jqx-grid-cell\");\n      n += \" \" + o.toThemeProperty(\"jqx-grid-cell-add-new-row\");\n      n += \" \" + o.toThemeProperty(\"jqx-grid-cell-filter-row\");\n      var m = z + 10;\n      var h = new Array();\n      var D = o.that;\n      f[0].cells = h;\n      t.height(o.everpresentrowheight);\n\n      if (!o.showfilterrow && o.everpresentrowposition != \"bottom\") {\n        f.css(\"max-height\", o.everpresentrowheight - 1 + \"px\");\n      } else {\n        if (o.showfilterrow && o.everpresentrowposition != \"bottom\") {\n          f.css(\"max-height\", o.everpresentrowheight - 3 + \"px\");\n        }\n      }\n\n      t.css(\"max-height\", o.everpresentrowheight + \"px\");\n      f.append(t);\n      var C = b(\"<div style='border-width: 1px; border-style: solid; padding: 5px; z-index: 99; display: none; position: absolute;'><div>\").appendTo(b(document.body));\n      var d = b(\"<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>\" + o.gridlocalization.addrowstring + \"</button>\");\n      var q = b(\"<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>\" + o.gridlocalization.udpaterowstring + \"</button>\");\n      var k = b(\"<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>\" + o.gridlocalization.deleterowstring + \"</button>\");\n      var p = b(\"<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>\" + o.gridlocalization.resetrowstring + \"</button>\");\n      C.addClass(o.toThemeProperty(\"jqx-popup\"));\n      C.addClass(o.toThemeProperty(\"jqx-rc-all\"));\n      C.addClass(o.toThemeProperty(\"jqx-fill-state-normal\"));\n      C.addClass(o.toThemeProperty(\"jqx-shadow\"));\n      C.append(d);\n      C.append(q);\n      C.append(k);\n      C.append(p);\n      var g = o.everpresentrowactions.split(\" \");\n\n      if (g.indexOf(\"add\") == -1 && g.indexOf(\"addBottom\") == -1) {\n        d.hide();\n      }\n\n      if (g.indexOf(\"update\") == -1) {\n        q.hide();\n      }\n\n      if (g.indexOf(\"reset\") == -1) {\n        p.hide();\n      }\n\n      if (g.indexOf(\"delete\") == -1) {\n        k.hide();\n      }\n\n      o.addnewrowpopup = C;\n      o.addnewrowbutton = d;\n      o.addnewrowupdatebutton = q;\n      o.addnewrowdeletebutton = k;\n      o.addnewrowresetbutton = p;\n      d.jqxButton({\n        template: \"success\",\n        theme: o.theme\n      });\n      k.jqxButton({\n        template: \"danger\",\n        theme: o.theme\n      });\n      q.jqxButton({\n        template: \"primary\",\n        theme: o.theme\n      });\n      p.jqxButton({\n        template: \"warning\",\n        theme: o.theme\n      });\n      q.mousedown(function (E) {\n        var Q = {};\n        var J = {};\n\n        for (var H = 0; H < z; H++) {\n          var F = o.columns.records[H];\n\n          if (!F.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget);\n          J[F.datafield] = M;\n\n          if (F.datafield != F.displayfield) {\n            J[F.datafield] = M.value;\n            J[F.displayfield] = M.label;\n          }\n        }\n\n        var L = false;\n\n        for (var H = 0; H < z; H++) {\n          var F = o.columns.records[H];\n\n          if (!F.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget);\n\n          if (F.createeverpresentrowwidget && F.validateeverpresentrowwidgetvalue) {\n            var K = F.validateeverpresentrowwidgetvalue(F.displayfield, M, J);\n            var P = K;\n            var I = o.gridlocalization.validationstring;\n\n            if (P.message != undefined) {\n              I = P.message;\n            }\n\n            var O = typeof P == \"boolean\" ? P : P.result;\n\n            if (!O) {\n              M = \"invalid editor state\";\n              F.addnewrowwidget.attr(\"title\", I);\n              F.addnewrowwidget.addClass(o.toThemeProperty(\"jqx-input-invalid\"));\n            } else {\n              F.addnewrowwidget.attr(\"title\", \"\");\n              F.addnewrowwidget.removeClass(o.toThemeProperty(\"jqx-input-invalid\"));\n            }\n          }\n\n          if (M === \"invalid editor state\") {\n            E.preventDefault();\n            E.stopPropagation();\n            L = true;\n            continue;\n          }\n\n          if (L) {\n            continue;\n          }\n        }\n\n        if (L) {\n          C.hide();\n          o.focus();\n          return;\n        }\n\n        for (var H = 0; H < z; H++) {\n          var F = o.columns.records[H];\n\n          if (!F.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget);\n          Q[F.datafield] = M;\n\n          if (F.datafield != F.displayfield) {\n            Q[F.datafield] = M.value;\n            Q[F.displayfield] = M.label;\n          }\n\n          if (F.reseteverpresentrowwidgetvalue) {\n            F.reseteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget);\n          }\n        }\n\n        if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) {\n          if (o.selectionmode.indexOf(\"cell\") >= 0) {\n            var N = o.getselectedcells()[0].rowindex;\n          } else {\n            var N = o.selectedrowindexes[0];\n          }\n\n          var G = o.getrowdata(N);\n\n          if (G) {\n            o.updaterow(G.uid, Q);\n          }\n        }\n\n        C.hide();\n        o.focus();\n      });\n      k.mousedown(function (G) {\n        if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) {\n          if (o.selectionmode.indexOf(\"cell\") >= 0) {\n            var I = o.getselectedcells()[0].rowindex;\n          } else {\n            var I = o.selectedrowindexes[0];\n          }\n\n          var H = o.getrowdata(I);\n\n          if (H) {\n            o.deleterow(H.uid);\n          }\n        }\n\n        for (var F = 0; F < z; F++) {\n          var E = o.columns.records[F];\n\n          if (E.reseteverpresentrowwidgetvalue) {\n            E.reseteverpresentrowwidgetvalue(E.displayfield, E.addnewrowwidget);\n          }\n        }\n\n        C.hide();\n        o.focus();\n        o.updateeverpresentrow();\n      });\n      d.mousedown(function (F) {\n        var P = {};\n        var J = {};\n\n        for (var H = 0; H < z; H++) {\n          var G = o.columns.records[H];\n\n          if (!G.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget);\n          J[G.datafield] = M;\n\n          if (G.datafield != G.displayfield) {\n            J[G.datafield] = M.value;\n            J[G.displayfield] = M.label;\n          }\n\n          if (G.datafield != G.displayfield) {\n            J[G.datafield] = M.label;\n            J[G.displayfield] = M.value;\n          }\n        }\n\n        var L = false;\n\n        for (var H = 0; H < z; H++) {\n          var G = o.columns.records[H];\n\n          if (!G.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget);\n\n          if (G.createeverpresentrowwidget && G.validateeverpresentrowwidgetvalue) {\n            var K = G.validateeverpresentrowwidgetvalue(G.displayfield, M, J);\n            var O = K;\n            var I = o.gridlocalization.validationstring;\n\n            if (O.message != undefined) {\n              I = O.message;\n            }\n\n            var N = typeof O == \"boolean\" ? O : O.result;\n\n            if (!N) {\n              M = \"invalid editor state\";\n              G.addnewrowwidget.attr(\"title\", I);\n              G.addnewrowwidget.addClass(o.toThemeProperty(\"jqx-input-invalid\"));\n            } else {\n              G.addnewrowwidget.attr(\"title\", \"\");\n              G.addnewrowwidget.removeClass(o.toThemeProperty(\"jqx-input-invalid\"));\n            }\n          }\n\n          if (M === \"invalid editor state\") {\n            F.preventDefault();\n            F.stopPropagation();\n            L = true;\n            continue;\n          }\n\n          if (L) {\n            continue;\n          }\n        }\n\n        if (L) {\n          C.hide();\n          o.focus();\n          return;\n        }\n\n        for (var H = 0; H < z; H++) {\n          var G = o.columns.records[H];\n\n          if (!G.geteverpresentrowwidgetvalue) {\n            continue;\n          }\n\n          var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget);\n          P[G.datafield] = M;\n\n          if (G.datafield != G.displayfield) {\n            J[G.datafield] = M.label;\n            J[G.displayfield] = M.value;\n          }\n\n          if (G.reseteverpresentrowwidgetvalue) {\n            G.reseteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget);\n          }\n        }\n\n        var E = o.everpresentrowactions.indexOf(\"addBottom\") >= 0 ? \"last\" : \"first\";\n        o.addrow(null, P, E);\n        C.hide();\n        o.focus();\n      });\n      p.mousedown(function (G) {\n        var H = {};\n\n        for (var F = 0; F < z; F++) {\n          var E = o.columns.records[F];\n\n          if (E.reseteverpresentrowwidgetvalue) {\n            E.reseteverpresentrowwidgetvalue(E.displayfield, E.addnewrowwidget);\n          }\n\n          if (E.addnewrowwidget) {\n            E.addnewrowwidget.attr(\"title\", \"\");\n            E.addnewrowwidget.removeClass(o.toThemeProperty(\"jqx-input-invalid\"));\n          }\n        }\n\n        C.hide();\n        o.focus();\n      });\n\n      for (var w = 0; w < z; w++) {\n        var x = o.columns.records[w];\n        var u = x.width;\n\n        if (u < x.minwidth) {\n          u = x.minwidth;\n        }\n\n        if (u > x.maxwidth) {\n          u = x.maxwidth;\n        }\n\n        var e = b('<div style=\"overflow: hidden; position: absolute; height: 100%;\" class=\"' + n + '\"></div>');\n        t.append(e);\n        e.css(\"left\", i);\n\n        if (o.rtl) {\n          e.css(\"z-index\", m++);\n          e.css(\"border-left-width\", \"1px\");\n        } else {\n          e.css(\"z-index\", m--);\n        }\n\n        if (u == \"auto\") {\n          u = 0;\n        }\n\n        e[0].style.width = parseFloat(u) + \"px\";\n        e[0].left = i;\n\n        if (!(x.hidden && x.hideable) && !x.adaptivehidden) {\n          i += u;\n        } else {\n          e.css(\"display\", \"none\");\n        }\n\n        h[h.length] = e[0];\n\n        if (x.checkboxcolumn) {\n          var B = o.toThemeProperty(\"jqx-grid-cell\");\n          B += \" \" + o.toThemeProperty(\"jqx-grid-cell-filter-row\");\n          B += \" \" + o.toThemeProperty(\"jqx-grid-cell-pinned\");\n          e.removeClass().addClass(B);\n          continue;\n        }\n\n        var s = true;\n\n        if (!o.rtl) {\n          if (o.groupable) {\n            var y = o.showrowdetailscolumn && o.rowdetails ? 1 : 0;\n\n            if (o.groups.length + y > w) {\n              s = false;\n            }\n          }\n\n          if (o.showrowdetailscolumn && o.rowdetails && w == 0) {\n            s = false;\n          }\n        } else {\n          if (o.groupable) {\n            var y = o.showrowdetailscolumn && o.rowdetails ? 1 : 0;\n\n            if (o.groups.length + y + w > z - 1) {\n              s = false;\n            }\n          }\n\n          if (o.showrowdetailscolumn && o.rowdetails && w == z - 1) {\n            s = false;\n          }\n        }\n\n        o.updateeverpresentrow = function () {\n          var G = null;\n\n          if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) {\n            if (o.selectionmode.indexOf(\"cell\") >= 0) {\n              var H = o.getselectedcells()[0].rowindex;\n            } else {\n              var H = o.selectedrowindexes[0];\n            }\n\n            G = o.getrowdata(H);\n          }\n\n          if (!G) {\n            return;\n          }\n\n          for (var F = 0; F < o.columns.records.length; F++) {\n            var j = o.columns.records[F];\n\n            if (j.seteverpresentrowwidgetvalue) {\n              var E = o.getcelltext(H, j.displayfield);\n              j.seteverpresentrowwidgetvalue(j.addnewrowwidget, E);\n            }\n          }\n        };\n\n        if (s) {\n          if (x.createeverpresentrowwidget) {\n            var v = function () {\n              d.trigger(\"mousedown\");\n            };\n\n            x.addnewrowwidget = x.createeverpresentrowwidget(x.datafield, e, C, v);\n\n            if (x.initeverpresentrowwidget) {\n              x.initeverpresentrowwidget(x.datafield, e, C);\n            }\n          } else {\n            o._measureElement(\"column\");\n\n            var r = o.everpresentrowheight / 2 - o._columnheight / 2;\n\n            if (r < 0) {\n              r = 6;\n            }\n\n            r += \"px\";\n\n            if (x.datafield === \"addButtonColumn\") {\n              var l = b('<div style=\"padding-bottom: 2px; text-align: center; margin-top: ' + r + ';\"><a href=\"#\">' + o.gridlocalization.addrowstring + \"</a></div>\");\n              e.append(l);\n              l.mousedown(function () {\n                d.trigger(\"mousedown\");\n              });\n              continue;\n            } else {\n              if (x.datafield === \"resetButtonColumn\") {\n                var l = b('<div style=\"padding-bottom: 2px; text-align: center; margin-top: ' + r + ';\"><a href=\"#\">' + o.gridlocalization.resetrowstring + \"</a></div>\");\n                e.append(l);\n                l.mousedown(function () {\n                  p.trigger(\"mousedown\");\n                });\n                continue;\n              }\n            }\n\n            var A = function (F, H, j) {\n              var E = b('<input style=\"box-sizing: border-box; padding-right: 4px; padding-left: 4px; border:none;\" autocomplete=\"off\" type=\"textarea\"/>');\n              E[0].id = b.jqx.utilities.createId();\n              E.addClass(F.toThemeProperty(\"jqx-widget\"));\n              E.addClass(F.toThemeProperty(\"jqx-input\"));\n              E.addClass(F.toThemeProperty(\"jqx-widget-content\"));\n              E.addClass(F.toThemeProperty(\"jqx-enableselect\"));\n              E.addClass(F.toThemeProperty(\"jqx-grid-cell-add-new-row\"));\n              E.css(\"text-align\", j.cellsalign);\n\n              if (F.rtl) {\n                E.css(\"direction\", \"rtl\");\n              }\n\n              if (F.disabled) {\n                E.attr(\"disabled\", true);\n              }\n\n              E.attr(\"disabled\", false);\n              E.attr(\"placeholder\", F.gridlocalization.everpresentrowplaceholder + j.text);\n              E.appendTo(H);\n              E.css(\"width\", \"100%\");\n              E.css(\"height\", F.everpresentrowheight + \"px\");\n              E.css(\"line-height\", F.everpresentrowheight + \"px\");\n              E.css(\"max-height\", F.everpresentrowheight + \"px\");\n              E.css(\"margin\", \"0px\");\n              E.focus(function () {\n                if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) {\n                  if (o.selectionmode.indexOf(\"cell\") >= 0) {\n                    var K = o.getselectedcells()[0].rowindex;\n                  } else {\n                    var K = o.selectedrowindexes[0];\n                  }\n                }\n\n                E.addClass(F.toThemeProperty(\"jqx-fill-state-focus\"));\n                var I = F.columns.records.indexOf(j);\n\n                if (F.everpresentrowactionsmode !== \"columns\") {\n                  C.css({\n                    display: \"block\",\n                    top: E.coord().top + F.everpresentrowheight - 1,\n                    left: I > 0 ? E.coord().left : E.coord().left - 1\n                  });\n                }\n\n                var J = C.children().width();\n\n                if (j.cellsalign === \"right\") {\n                  var J = d.width() + p.width();\n                  C.children().css(\"left\", J - J + \"px\");\n                } else {\n                  C.children().css(\"left\", \"0px\");\n                }\n\n                F.content[0].scrollLeft = 0;\n                F.content[0].scrollTop = 0;\n                setTimeout(function () {\n                  F.content[0].scrollLeft = 0;\n                  F.content[0].scrollTop = 0;\n                }, 50);\n                return false;\n              });\n              j.addnewrowwidget = E;\n\n              if (!j.reseteverpresentrowwidgetvalue) {\n                j.reseteverpresentrowwidgetvalue = function (J, I) {\n                  I.val(\"\");\n                  I.focus();\n                  I.blur();\n                  I.removeClass(o.toThemeProperty(\"jqx-input-invalid\"));\n                  I.attr(\"title\", \"\");\n                };\n              }\n\n              if (!j.seteverpresentrowwidgetvalue) {\n                j.seteverpresentrowwidgetvalue = function (J, I) {\n                  J.val(I);\n                };\n              }\n\n              if (!j.geteverpresentrowwidgetvalue) {\n                var G = j;\n\n                j.geteverpresentrowwidgetvalue = function (I, P, R) {\n                  var U = P.val();\n\n                  if (R !== false && G.validateeverpresentrowwidgetvalue) {\n                    var Y = {};\n                    var O = {};\n\n                    for (var M = 0; M < z; M++) {\n                      var K = o.columns.records[M];\n\n                      if (!K.geteverpresentrowwidgetvalue) {\n                        continue;\n                      }\n\n                      var Q = K.geteverpresentrowwidgetvalue(K.displayfield, K.addnewrowwidget, false);\n                      O[K.datafield] = Q;\n\n                      if (K.datafield != K.displayfield) {\n                        O[K.datafield] = Q.value;\n                        O[K.displayfield] = Q.label;\n                      }\n                    }\n\n                    var T = G.validateeverpresentrowwidgetvalue(G.displayfield, U, O);\n                    var X = T;\n                    var N = o.gridlocalization.validationstring;\n\n                    if (X.message != undefined) {\n                      N = X.message;\n                    }\n\n                    var W = typeof X == \"boolean\" ? X : X.result;\n\n                    if (!W) {\n                      E.addClass(o.toThemeProperty(\"jqx-input-invalid\"));\n                      E.attr(\"title\", N);\n                      return \"invalid editor state\";\n                    } else {\n                      E.removeClass(o.toThemeProperty(\"jqx-input-invalid\"));\n                      E.attr(\"title\", \"\");\n                    }\n                  }\n\n                  var S = \"string\";\n                  var J = o.source.datafields || (o.source._source ? o.source._source.datafields : null);\n\n                  if (J) {\n                    var V = \"\";\n                    b.each(J, function () {\n                      if (this.name == G.displayfield) {\n                        if (this.type) {\n                          V = this.type;\n                        }\n\n                        return false;\n                      }\n                    });\n\n                    if (V) {\n                      S = V;\n                    }\n                  }\n\n                  if (S === \"number\") {\n                    var L = parseFloat(U);\n\n                    if (isNaN(L)) {\n                      return null;\n                    }\n                  }\n\n                  if (S === \"date\") {\n                    return b.jqx.dataFormat.tryparsedate(U, o.gridlocalization);\n                  }\n\n                  if (S === \"bool\" || S === \"boolean\") {\n                    if (U === \"true\") {\n                      return true;\n                    }\n\n                    if (U == \"1\") {\n                      return true;\n                    }\n\n                    if (U === \"false\") {\n                      return false;\n                    }\n\n                    if (U == \"0\") {\n                      return false;\n                    }\n\n                    if (U === true) {\n                      return U;\n                    }\n\n                    if (U === false) {\n                      return U;\n                    }\n\n                    return false;\n                  }\n\n                  return U;\n                };\n              }\n\n              E.keydown(function (I) {\n                if (I.keyCode === 13) {\n                  if (o.everpresentrowactions.indexOf(\"add\") >= 0) {\n                    d.trigger(\"mousedown\");\n                  } else {\n                    if (o.everpresentrowactions.indexOf(\"update\") >= 0) {\n                      q.trigger(\"mousedown\");\n                    } else {\n                      if (o.everpresentrowactions.indexOf(\"delete\") >= 0) {\n                        k.trigger(\"mousedown\");\n                      }\n                    }\n                  }\n                }\n              });\n              E.blur(function () {\n                E.removeClass(F.toThemeProperty(\"jqx-fill-state-focus\"));\n                C.css(\"display\", \"none\");\n              });\n\n              if (j.initeverpresentrowwidget) {\n                j.initeverpresentrowwidget(j.datafield, H, C);\n              }\n            };\n\n            A(this, e, x);\n          }\n        }\n      }\n\n      if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n        t.css(\"z-index\", m--);\n      }\n\n      t.width(parseFloat(i) + 2);\n      f.addClass(n);\n      f.css(\"border-bottom-width\", \"0px\");\n\n      if (o.showfilterrow) {\n        f.css(\"border-top-width\", \"0px\");\n      } else {\n        f.css(\"border-top-width\", \"1px\");\n      }\n\n      f.css(\"box-sizing\", \"border-box\");\n      f.css(\"border-right-width\", \"0px\");\n    },\n    _gettableheight: function () {\n      if (this.tableheight != undefined) {\n        return this.tableheight;\n      }\n\n      var e = this.host.height();\n\n      if (this.columnsheader) {\n        var d = this.columnsheader.outerHeight();\n\n        if (!this.showheader) {\n          d = 0;\n        }\n      }\n\n      e -= d;\n\n      if (this.hScrollBar[0].style.visibility == \"visible\") {\n        e -= this.hScrollBar.outerHeight();\n      }\n\n      if (this.pageable) {\n        e -= this.pager.outerHeight();\n      }\n\n      if (this._groupsheader()) {\n        e -= this.groupsheader.outerHeight();\n      }\n\n      if (this.showtoolbar) {\n        e -= this.toolbarheight;\n      }\n\n      if (this.showstatusbar) {\n        e -= this.statusbarheight;\n      }\n\n      if (this.showeverpresentrow && this.everpresentrowposition === \"bottom\") {\n        e -= this.everpresentrowheight;\n      }\n\n      if (e > 0) {\n        this.tableheight = e;\n        return e;\n      }\n\n      return this.host.height();\n    },\n    _getpagesize: function () {\n      if (this.pageable) {\n        return this.pagesize;\n      }\n\n      if (this.virtualmode) {\n        var e = Math.round(this.host.height()) + 2 * this.rowsheight;\n        var d = Math.round(e / this.rowsheight);\n        return d;\n      }\n\n      if (this.autoheight || this.autorowheight) {\n        if (this.dataview.totalrows == 0) {\n          return 1;\n        }\n\n        return this.dataview.totalrows;\n      }\n\n      if (this.dataview.totalrows < 100 && this.dataview.totalrecords < 100 && this.dataview.totalrows > 0) {\n        return this.dataview.totalrows;\n      }\n\n      return 100;\n    },\n    _calculatevirtualheight: function () {\n      var p = this.that;\n      var e = Math.round(this.host.height()) + 2 * this.rowsheight;\n\n      var k = this._gettableheight();\n\n      var r = Math.round(e / this.rowsheight);\n      this.heights = new Array();\n      this.hiddens = new Array();\n      this.details = new Array();\n      this.expandedgroups = new Array();\n      this.hiddenboundrows = new Array();\n      this.heightboundrows = new Array();\n      this.detailboundrows = new Array();\n      var h = Math.max(this.dataview.totalrows, this.dataview.totalrecords);\n\n      if (this.pageable) {\n        h = this.pagesize;\n\n        if (this.pagesize > Math.max(this.dataview.totalrows, this.dataview.totalrecords) && this.autoheight) {\n          h = Math.max(this.dataview.totalrows, this.dataview.totalrecords);\n        } else {\n          if (!this.autoheight) {\n            if (this.dataview.totalrows < this.pagesize) {\n              h = Math.max(this.dataview.totalrows, this.dataview.totalrecords);\n            }\n          }\n        }\n      }\n\n      var m = h * this.rowsheight;\n      var n = 0;\n      var j = 0;\n      var l = 0;\n\n      var f = this._getpagesize();\n\n      var d = f * this.rowsheight;\n      var g = 0;\n\n      if (!this.pageable && this.autoheight) {\n        r = h;\n      }\n\n      if (h + f > 0) {\n        while (g <= h + f) {\n          n += d;\n\n          if (g - f < h && g >= h) {\n            var q = g - h;\n\n            if (q > 0) {\n              l -= d;\n              this._pageviews[j - 1] = {\n                top: l,\n                height: d - q * this.rowsheight\n              };\n            }\n\n            break;\n          } else {\n            this._pageviews[j++] = {\n              top: l,\n              height: d\n            };\n          }\n\n          l = n;\n          g += f;\n        }\n      }\n\n      if (this.resizingGrid != true) {\n        this.vScrollBar.jqxScrollBar({\n          value: 0\n        });\n      }\n\n      if (this.hScrollBar.css(\"visibility\") == \"hidden\") {\n        var o = 0;\n\n        if (this.columns && this.columns.records) {\n          for (var g = 0; g < this.columns.records.length; g++) {\n            o += !isNaN(this.columns.records[g].width) ? this.columns.records[g].width : this.columns.records[g].minwidth;\n          }\n\n          if (!isNaN(o) && parseInt(o) > this.host.width()) {\n            k -= 30;\n          }\n        }\n      }\n\n      if (m > k && !this.autoheight) {\n        this.vScrollBar.css(\"visibility\", \"visible\");\n\n        if (this.scrollmode == \"deferred\") {\n          this.vScrollBar.jqxScrollBar({\n            max: m\n          });\n        } else {\n          this.vScrollBar.jqxScrollBar({\n            max: m - k\n          });\n        }\n      } else {\n        this.vScrollBar.css(\"visibility\", \"hidden\");\n      }\n\n      this.dataview.pagesize = f;\n      this.dataview.updateview();\n      return {\n        visiblerecords: r,\n        virtualheight: m\n      };\n    },\n    _updatepageviews: function () {\n      if (this.updating()) {\n        return;\n      }\n\n      this._pagescache = new Array();\n      this._pageviews = new Array();\n      this.tableheight = null;\n      var m = this.that;\n      var h = Math.round(this.host.height()) + 2 * this.rowsheight;\n      var w = Math.round(h / this.rowsheight);\n      var f = Math.max(this.dataview.totalrows, this.dataview.totalrecords);\n      var n = f * this.rowsheight;\n      var l = 0;\n      var q = 0;\n      var g = 0;\n      var p = 0;\n      var r = 0;\n\n      var o = this._getpagesize();\n\n      if (!this.pageable) {\n        for (var t = 0; t < f; t++) {\n          var d = {\n            index: t,\n            height: this.heights[t],\n            hidden: this.hiddens[t],\n            details: this.details[t]\n          };\n\n          if (this.heights[t] == undefined) {\n            this.heights[t] = this.rowsheight;\n            d.height = this.rowsheight;\n          }\n\n          if (this.hiddens[t] == undefined) {\n            this.hiddens[t] = false;\n            d.hidden = false;\n          }\n\n          if (this.details[t] == undefined) {\n            this.details[t] = null;\n          }\n\n          if (d.height != m.rowsheight) {\n            n -= m.rowsheight;\n            n += d.height;\n          }\n\n          if (d.hidden) {\n            n -= d.height;\n          } else {\n            q += d.height;\n            var e = 0;\n\n            if (this.rowdetails) {\n              if (this.rowdetailstemplate) {\n                if (!d.details) {\n                  var v = typeof this.rowdetailstemplate === \"function\" ? this.rowdetailstemplate() : this.rowdetailstemplate;\n\n                  if (v.rowdetailshidden === undefined) {\n                    v.rowdetailshidden = true;\n                  }\n\n                  if (v.rowdetailsheight === undefined) {\n                    v.rowdetailsheight = 200;\n                  }\n\n                  if (v.rowdetails === undefined) {\n                    v.rowdetails = \"<div></div>\";\n                  }\n\n                  d.details = v;\n                }\n              }\n\n              if (d.details && d.details.rowdetails && !d.details.rowdetailshidden) {\n                e = d.details.rowdetailsheight;\n                q += e;\n                n += e;\n              }\n            }\n\n            l += d.height + e;\n          }\n\n          r++;\n\n          if (r >= o || t == f - 1) {\n            this._pageviews[g++] = {\n              top: p,\n              height: q\n            };\n            q = 0;\n            p = l;\n            r = 0;\n          }\n        }\n      } else {\n        if (this._updatepagedview) {\n          n = this._updatepagedview(f, n, 0);\n        }\n\n        if (this.autoheight) {\n          this._arrange();\n        }\n      }\n\n      var j = this._gettableheight();\n\n      if (n > j) {\n        if (this.pageable && this.gotopage) {\n          n = this._pageviews[0].height;\n\n          if (n < 0) {\n            n = this._pageviews[0].height;\n          }\n        }\n\n        if (this.vScrollBar.css(\"visibility\") != \"visible\") {\n          this.vScrollBar.css(\"visibility\", \"visible\");\n        }\n\n        if (n <= j || this.autoheight) {\n          this.vScrollBar.css(\"visibility\", \"hidden\");\n        }\n\n        if (n - j > 0) {\n          if (this.scrollmode != \"deferred\") {\n            var s = n - j;\n            var u = this.vScrollInstance.max;\n            this.vScrollBar.jqxScrollBar({\n              max: s\n            });\n\n            if (s != u) {\n              this.vScrollBar.jqxScrollBar({\n                value: 0\n              });\n            }\n          } else {\n            this.vScrollBar.jqxScrollBar({\n              value: 0,\n              max: n\n            });\n          }\n        } else {\n          this.vScrollBar.jqxScrollBar({\n            value: 0,\n            max: n\n          });\n        }\n      } else {\n        if (!this._loading) {\n          this.vScrollBar.css(\"visibility\", \"hidden\");\n        }\n\n        this.vScrollBar.jqxScrollBar({\n          value: 0\n        });\n      }\n\n      this._arrange();\n\n      if (this.autoheight) {\n        w = Math.round(this.host.height() / this.rowsheight);\n      }\n\n      this.virtualsizeinfo = {\n        visiblerecords: w,\n        virtualheight: n\n      };\n    },\n    updatebounddata: function (f) {\n      if (f != \"data\" && f != \"sort\" && f != \"filter\" && f != \"cells\" && f != \"pagechanged\" && f != \"pagesizechanged\" && !this.virtualmode) {\n        this.virtualsizeinfo = null;\n\n        if (this.columns && this.columns.records) {\n          for (var d = 0; d < this.columns.records.length; d++) {\n            var e = this.columns.records[d];\n\n            if (e.destroywidget && e.widget) {\n              if (e.destroywidget) {\n                e.destroywidget(e.widget);\n              }\n            }\n          }\n        }\n\n        if (this.showfilterrow && this.filterable && this.filterrow) {\n          if (this.clearfilters) {\n            this.clearfilters(false);\n          }\n\n          if (this.filterable && this._destroyedfilters && this.showfilterrow) {\n            this._destroyedfilters();\n          }\n\n          this.filterrow.remove();\n          this._filterrowcache = new Array();\n          this.filterrow = null;\n        } else {\n          if (this.filterable) {\n            if (this.clearfilters) {\n              this.clearfilters(false);\n            }\n          }\n        }\n\n        if (this.showeverpresentrow) {\n          this._removeaddnewrow();\n        }\n\n        this.detailsVisibility = new Array();\n        this.groupsVisibility = new Array();\n\n        if (this.groupable) {\n          this.dataview.groups = [];\n          this.groups = [];\n        }\n\n        if (this.pageable) {\n          this.pagenum = 0;\n          this.dataview.pagenum = 0;\n        }\n\n        if (this.sortable) {\n          this.sortcolumn = null;\n          this.sortdirection = \"\";\n          this.dataview.sortfielddirection = \"\";\n          this.dataview.clearsortdata();\n        }\n      }\n\n      this.databind(this.source, f);\n    },\n    refreshdata: function () {\n      this._refreshdataview();\n\n      this.render();\n    },\n    _updatevscrollbarmax: function () {\n      if (this._pageviews && this._pageviews.length > 0) {\n        var f = this._pageviews[0].height;\n\n        if (this.virtualmode || !this.pageable) {\n          f = this.virtualsizeinfo.virtualheight;\n        }\n\n        var e = this._gettableheight();\n\n        if (f > e) {\n          if (this.pageable && this.gotopage) {\n            f = this._pageviews[0].height;\n\n            if (f < 0) {\n              f = this._pageviews[0].height;\n            }\n          }\n\n          if (this.vScrollBar.css(\"visibility\") != \"visible\") {\n            this.vScrollBar.css(\"visibility\", \"visible\");\n          }\n\n          if (f <= e || this.autoheight) {\n            this.vScrollBar.css(\"visibility\", \"hidden\");\n          }\n\n          if (f - e > 0) {\n            var d = f - e;\n            this.vScrollBar.jqxScrollBar({\n              max: d\n            });\n          } else {\n            this.vScrollBar.jqxScrollBar({\n              value: 0,\n              max: f\n            });\n          }\n        } else {\n          this.vScrollBar.css(\"visibility\", \"hidden\");\n          this.vScrollBar.jqxScrollBar({\n            value: 0\n          });\n        }\n      }\n    },\n    _refreshdataview: function () {\n      this.dataview.refresh();\n    },\n    refresh: function (d) {\n      if (d != true) {\n        if (b.jqx.isHidden(this.host)) {\n          return;\n        }\n\n        if (this.virtualsizeinfo != null) {\n          this._cellscache = new Array();\n\n          this._renderrows(this.virtualsizeinfo);\n\n          this._updatesize();\n        }\n      }\n    },\n    render: function () {\n      this._render(true, true, true, true);\n    },\n    invalidate: function () {\n      if (this.virtualsizeinfo) {\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n    },\n    clear: function () {\n      this.databind(null);\n      this.render();\n    },\n    _preparecolumngroups: function () {\n      var o = this.columnsheight;\n\n      if (this.columngroups) {\n        this.columnshierarchy = new Array();\n\n        if (this.columngroups.length) {\n          var n = this;\n\n          for (var h = 0; h < this.columngroups.length; h++) {\n            this.columngroups[h].parent = null;\n            this.columngroups[h].groups = null;\n          }\n\n          for (var h = 0; h < this.columns.records.length; h++) {\n            this.columns.records[h].parent = null;\n            this.columns.records[h].groups = null;\n          }\n\n          var p = function (j) {\n            for (var u = 0; u < n.columngroups.length; u++) {\n              var v = n.columngroups[u];\n\n              if (v.name === j) {\n                return v;\n              }\n            }\n\n            return null;\n          };\n\n          for (var h = 0; h < this.columngroups.length; h++) {\n            var q = this.columngroups[h];\n\n            if (!q.groups) {\n              q.groups = null;\n            }\n\n            if (q.parentgroup) {\n              var s = p(q.parentgroup);\n\n              if (s) {\n                q.parent = s;\n\n                if (!s.groups) {\n                  s.groups = new Array();\n                }\n\n                if (s.groups.indexOf(q) === -1) {\n                  s.groups.push(q);\n                }\n              }\n            }\n          }\n\n          for (var h = 0; h < this.columns.records.length; h++) {\n            var q = this.columns.records[h];\n\n            if (q.columngroup) {\n              var s = p(q.columngroup);\n\n              if (s) {\n                if (!s.groups) {\n                  s.groups = new Array();\n                }\n\n                q.parent = s;\n\n                if (s.groups.indexOf(q) === -1) {\n                  s.groups.push(q);\n                }\n              }\n            }\n          }\n\n          var r = 0;\n\n          for (var h = 0; h < this.columns.records.length; h++) {\n            var q = this.columns.records[h];\n            var e = q;\n            q.level = 0;\n\n            while (e.parent) {\n              e = e.parent;\n              q.level++;\n            }\n\n            var e = q;\n            var d = q.level;\n            r = Math.max(r, q.level);\n\n            while (e.parent) {\n              e = e.parent;\n\n              if (e) {\n                e.level = --d;\n              }\n            }\n          }\n\n          var m = function (y) {\n            var x = new Array();\n\n            if (y.columngroup) {\n              x.push(y);\n            }\n\n            if (y.groups) {\n              for (var w = 0; w < y.groups.length; w++) {\n                if (y.groups[w].columngroup) {\n                  x.push(y.groups[w]);\n                } else {\n                  if (y.groups[w].groups) {\n                    var v = m(y.groups[w]);\n\n                    for (var u = 0; u < v.length; u++) {\n                      x.push(v[u]);\n                    }\n                  }\n                }\n              }\n            }\n\n            return x;\n          };\n\n          for (var h = 0; h < this.columngroups.length; h++) {\n            var q = this.columngroups[h];\n            var f = m(q);\n            q.columns = f;\n            var k = new Array();\n            var t = 0;\n\n            for (var g = 0; g < f.length; g++) {\n              k.push(this.columns.records.indexOf(f[g]));\n\n              if (f[g].pinned) {\n                t++;\n              }\n            }\n\n            if (t != 0) {\n              throw new Error(\"jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group cannot be pinned.\");\n            }\n\n            k.sort(function (j, i) {\n              j = parseInt(j);\n              i = parseInt(i);\n\n              if (j < i) {\n                return -1;\n              }\n\n              if (j > i) {\n                return 1;\n              }\n\n              return 0;\n            });\n\n            for (var l = 1; l < k.length; l++) {\n              if (k[l] != k[l - 1] + 1) {\n                throw new Error(\"jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group are expected to be siblings in the columns array.\");\n                this.host.remove();\n              }\n            }\n          }\n        }\n\n        this.columngroupslevel = 1 + r;\n        o = this.columngroupslevel * this.columnsheight;\n      }\n\n      return o;\n    },\n    _render: function (k, j, l, e, f) {\n      if (this.dataview == null) {\n        return;\n      }\n\n      if (this._loading) {\n        return;\n      }\n\n      if (this._batchupdate) {\n        return;\n      }\n\n      if (b.jqx.isHidden(this.host)) {\n        var g = this;\n\n        if (g.___hiddenTimer) {\n          clearInterval(g.___hiddenTimer);\n          g.___hiddenTimer = null;\n        }\n\n        this.___hiddenTimer = setInterval(function () {\n          if (!b.jqx.isHidden(g.host)) {\n            clearInterval(g.___hiddenTimer);\n            g.render();\n          }\n        }, 300);\n        return;\n      }\n\n      if (this.editcell != null && this.endcelledit) {\n        this.endcelledit(this.editcell.row, this.editcell.column, true, false);\n      }\n\n      this.validationpopup = null;\n\n      this._removeHandlers();\n\n      this._addHandlers();\n\n      this._initializeRows();\n\n      this._requiresupdate = j != undefined ? j : true;\n      this._newmax = null;\n\n      if (l) {\n        if (!this._requiresupdate) {\n          if (e != false) {\n            this._initmenu();\n          }\n        }\n\n        if (this.columns == null) {\n          this.columns = new b.jqx.collection(this.element);\n        } else {\n          var i = this;\n\n          if (this.columns && this.columns.name === \"observableArray\") {\n            this.columns.notifier = function (p) {\n              var n = function () {\n                i.columns = i._columns;\n                i.render();\n              };\n\n              switch (p.type) {\n                case \"add\":\n                  n();\n                  break;\n\n                case \"update\":\n                  if (p.name === \"index\") {\n                    i.beginupdate();\n\n                    for (var o in p.newValue) {\n                      i.setcolumnproperty(p.newValue.datafield, o, p.newValue[o]);\n                    }\n\n                    i.endupdate();\n                  } else {\n                    var m = p.path.split(\".\");\n                    i.setcolumnproperty(i.columns[m[0]].datafield, p.name, p.newValue);\n                  }\n\n                  break;\n\n                case \"delete\":\n                  n();\n                  break;\n              }\n            };\n          }\n\n          if (this.columngroups && this.columngroups.name === \"observableArray\") {\n            this.columngroups.notifier = function (m) {\n              i.render();\n            };\n          }\n\n          this._initializeColumns();\n        }\n      }\n\n      this.tableheight = null;\n      this._pagescache = new Array();\n      this._pageviews = new Array();\n      this.visiblerows = new Array();\n      this.hittestinfo = new Array();\n\n      if (this._requiresupdate) {\n        this._clearcaches();\n\n        if (e == true) {\n          this._initmenu();\n        }\n      }\n\n      this.virtualsizeinfo = null;\n      this.prerenderrequired = true;\n\n      if (this.groupable && this.groups.length > 0 && this.rowdetails || this.rowdetails) {\n        if (this.gridcontent) {\n          this._rowdetailscache = new Array();\n          this._rowdetailselementscache = new Array();\n          this.detailboundrows = new Array();\n          this.details = new Array();\n          b.jqx.utilities.html(this.gridcontent, \"\");\n          this.gridcontent = null;\n        }\n      }\n\n      if (this.gridcontent) {\n        if (this.editable && this._destroyeditors) {\n          this._destroyeditors();\n        }\n      }\n\n      if (l) {\n        if (this.filterrow) {\n          this.filterrow.detach();\n        }\n\n        b.jqx.utilities.html(this.content, \"\");\n        this.columnsheader = this.columnsheader || b('<div style=\"overflow: hidden;\"></div>');\n        this.columnsheader.remove();\n        this.columnsheader.addClass(this.toTP(\"jqx-widget-header\"));\n        this.columnsheader.addClass(this.toTP(\"jqx-grid-header\"));\n      } else {\n        if (this.gridcontent) {\n          b.jqx.utilities.html(this.gridcontent, \"\");\n        }\n      }\n\n      if (!this.showheader) {\n        this.columnsheader.css(\"display\", \"none\");\n      } else {\n        if (this.columnsheader) {\n          this.columnsheader.css(\"display\", \"block\");\n        }\n      }\n\n      this.gridcontent = this.gridcontent || b('<div style=\"width: 100%; overflow: hidden; position: absolute;\"></div>');\n      this.gridcontent.remove();\n      var h = this.columnsheight;\n      h = this._preparecolumngroups();\n\n      if (this.showfilterrow && this.filterable) {\n        this.columnsheader.height(h + this.filterrowheight);\n\n        if (this.showeverpresentrow && this.everpresentrowposition !== \"bottom\") {\n          this.columnsheader.height(h + this.filterrowheight + this.everpresentrowheight);\n        }\n      } else {\n        if (this.showeverpresentrow && this.everpresentrowposition !== \"bottom\") {\n          this.columnsheader.height(h + this.everpresentrowheight);\n        } else {\n          this.columnsheader.height(h);\n        }\n      }\n\n      this.content.append(this.columnsheader);\n      this.content.append(this.gridcontent);\n\n      this._arrange();\n\n      if (this._initgroupsheader) {\n        this._initgroupsheader();\n      }\n\n      this.selectionarea = this.selectionarea || b(\"<div style='z-index: 99; visibility: hidden; position: absolute;'></div>\");\n      this.selectionarea.addClass(this.toThemeProperty(\"jqx-grid-selectionarea\"));\n      this.selectionarea.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n      this.content.append(this.selectionarea);\n      this.tableheight = null;\n      this.rendergridcontent(false, l);\n\n      if (this.groups.length > 0 && this.groupable) {\n        var d = this.vScrollBar[0].style.visibility;\n        this.suspendgroupevents = true;\n\n        if (this.collapseallgroups) {\n          if (!this.groupsexpandedbydefault) {\n            this.collapseallgroups(false);\n\n            this._updatescrollbarsafterrowsprerender();\n          } else {\n            this.expandallgroups(false);\n          }\n        }\n\n        if (this.vScrollBar[0].style.visibility != d) {\n          this._updatecolumnwidths();\n\n          this._updatecellwidths();\n        }\n\n        this.suspendgroupevents = false;\n      }\n\n      if (this.pageable && this.updatepagerdetails) {\n        this.updatepagerdetails();\n\n        if (this.autoheight) {\n          this._updatepageviews();\n        }\n\n        if (this.autorowheight) {\n          if (!this.autoheight) {\n            this._updatepageviews();\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n      }\n\n      if (this.showaggregates && this._updateaggregates) {\n        this._updateaggregates();\n      }\n\n      this._addoverlayelement();\n\n      if (this.scrollmode == \"deferred\") {\n        this._addscrollelement();\n      }\n\n      if (this.showfilterrow && this.filterable && this.filterrow && (f == undefined || f == true)) {\n        this._updatelistfilters(!l);\n      }\n\n      if (this.rendered) {\n        this.rendered(\"full\");\n      }\n\n      this.__isRendered = true;\n    },\n    _addoverlayelement: function () {\n      var d = b.jqx.utilities.getBrowser();\n\n      if (d.browser == \"msie\" && parseInt(d.version) < 9 || this.isTouchDevice()) {\n        if (this._overlayElement) {\n          this._overlayElement.remove();\n        }\n\n        this._overlayElement = b(\"<div class='jqxgrid-overlay' style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>\");\n\n        this._overlayElement.css(\"background\", \"white\");\n\n        this._overlayElement.css(\"z-index\", 180);\n\n        this._overlayElement.css(\"opacity\", 0.001);\n\n        if (this.isTouchDevice()) {\n          if (this.vScrollBar.css(\"visibility\") !== \"hidden\" || this.hScrollBar.css(\"visibility\") !== \"hidden\") {\n            var e = 0;\n\n            if (this.selectionmode == \"checkbox\") {\n              e += 30;\n            }\n\n            if (this.groupable || this.rowdetails) {\n              this._overlayElement.css(\"left\", 30 * (this.groups.length + (this.rowdetails ? 1 : 0)));\n            }\n\n            var f = this._overlayElement.css(\"left\");\n\n            this._overlayElement.css(\"left\", f + e);\n          } else {\n            if (this._overlayElement) {\n              this._overlayElement.remove();\n            }\n          }\n        } else {\n          this.content.prepend(this._overlayElement);\n        }\n      }\n\n      this._updateTouchScrolling();\n    },\n    _addscrollelement: function () {\n      if (this._scrollelement) {\n        this._scrollelement.remove();\n      }\n\n      if (this._scrollelementoverlay) {\n        this._scrollelementoverlay.remove();\n      }\n\n      this._scrollelementoverlay = b(\"<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>\");\n\n      this._scrollelementoverlay.css(\"background\", \"black\");\n\n      this._scrollelementoverlay.css(\"z-index\", 1800);\n\n      this._scrollelementoverlay.css(\"opacity\", 0.1);\n\n      this._scrollelement = b(\"<span style='visibility: hidden; top: 50%; right: 10px; position: absolute;'></span>\");\n\n      this._scrollelement.css(\"z-index\", 1900);\n\n      this._scrollelement.addClass(this.toThemeProperty(\"jqx-button\"));\n\n      this._scrollelement.addClass(this.toThemeProperty(\"jqx-fill-state-normal\"));\n\n      this._scrollelement.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n\n      this._scrollelement.addClass(this.toThemeProperty(\"jqx-shadow\"));\n\n      this.content.prepend(this._scrollelement);\n      this.content.prepend(this._scrollelementoverlay);\n    },\n    _postrender: function (f) {\n      if (f == \"filter\" || f == \"sort\" || f == \"group\") {\n        if (this.rowdetails && this.detailsVisibility && this.detailsVisibility.length > 0) {\n          this._detailsUpdate = true;\n\n          for (var e = 0; e < this.details.length; e++) {\n            if (this.details[e]) {\n              this.details[e].rowdetailshidden = true;\n            }\n          }\n\n          if (!this._loading) {\n            for (var e = 0; e < this.detailsVisibility.length; e++) {\n              if (false === this.detailsVisibility[e]) {\n                this.showrowdetails(e);\n              } else {\n                if (true === this.detailsVisibility[e]) {\n                  this.hiderowdetails(e);\n                }\n              }\n            }\n          }\n\n          this._detailsUpdate = false;\n          this.rendergridcontent(true);\n\n          this._updatecolumnwidths();\n\n          this._updatecellwidths();\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n      }\n\n      if (this.groupable && this.groups.length > 0) {\n        if (f == \"filter\" || f == \"sort\") {\n          for (var e = 0; e < this.dataview.loadedgroups.length; e++) {\n            var h = this.dataview.loadedgroups[e];\n            var d = 0;\n            var k;\n\n            for (var g in this.groupsVisibility) {\n              if (g == h.group && this.groupsVisibility[g]) {\n                k = true;\n\n                this._setgroupstate(h, true, false);\n\n                d++;\n              }\n            }\n\n            if (d > 0) {\n              k = false;\n              var j = this.vScrollBar[0].style.visibility;\n              this.rendergridcontent(true, false);\n\n              if (j != this.vScrollBar[0].style.visibility || this._hiddencolumns) {\n                this._updatecolumnwidths();\n\n                this._updatecellwidths();\n\n                this._renderrows(this.virtualsizeinfo);\n              }\n            }\n          }\n        } else {\n          if (f == \"group\") {\n            this.groupsVisibility = new Array();\n          }\n        }\n      }\n    },\n    rendergridcontent: function (e, g) {\n      if (this.updating()) {\n        return false;\n      }\n\n      if (e == undefined || e == null) {\n        e = false;\n      }\n\n      this._requiresupdate = e;\n      var i = this.prerenderrequired;\n\n      if (this.prerenderrequired) {\n        this._arrange();\n      }\n\n      var h = this.that;\n      var g = g;\n\n      if (g == null || g == undefined) {\n        g = true;\n      }\n\n      this.tableheight = null;\n      h.virtualsizeinfo = h.virtualsizeinfo || h._calculatevirtualheight();\n\n      if (h.pageable && !h.autoheight) {\n        if (h.dataview.totalrows < h.pagesize) {\n          h._requiresupdate = true;\n        }\n      }\n\n      if (g) {\n        h._rendercolumnheaders();\n      } else {\n        if (this._rendersortcolumn) {\n          this._rendersortcolumn();\n        }\n\n        if (this._renderfiltercolumn) {\n          this._renderfiltercolumn();\n        }\n      }\n\n      h._renderrows(h.virtualsizeinfo);\n\n      if (this.gridcontent) {\n        if (this.gridcontent[0].scrollTop != 0) {\n          this.gridcontent[0].scrollTop = 0;\n        }\n\n        if (this.gridcontent[0].scrollLeft != 0) {\n          this.gridcontent[0].scrollLeft = 0;\n        }\n      }\n\n      if (i) {\n        var f = this.tableheight;\n\n        this._arrange();\n\n        if (f != this.tableheight && this.autoheight) {\n          h._renderrows(h.virtualsizeinfo);\n        }\n      }\n\n      if (this.rtl) {\n        this._renderhorizontalscroll();\n      }\n\n      if (this.autosavestate) {\n        if (this.initializedcall != null) {\n          if (this.savestate) {\n            this.savestate();\n          }\n        }\n      }\n\n      if (this.adaptive && this.element.offsetWidth <= this.adaptivewidth) {\n        var d = 0;\n        var j = h.element.offsetWidth - 2;\n        b.each(this.columns.records, function (k, l) {\n          d += this.width;\n\n          if (this.columntype === \"adaptive\") {\n            return true;\n          }\n\n          if (d >= j) {\n            this.adaptivehidden = true;\n          }\n        });\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      return true;\n    },\n    _updatecolumnwidths: function () {\n      var p = this.host.width();\n      var f = p;\n      var n = \"\";\n\n      if (this.columns == undefined || this.columns.records == undefined) {\n        return;\n      }\n\n      var u = this.that;\n      var h = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : this.groups.length * this.groupindentwidth;\n      var m = this.adaptive && this.element.offsetWidth <= this.adaptivewidth;\n      var e = 0;\n\n      if (m) {\n        var t = 1;\n        b.each(this.columns.records, function (q, v) {\n          if (this.adaptivehidden) {\n            t++;\n          }\n        });\n        var l = this.vScrollBar[0].offsetWidth > 0 ? this.vScrollBar[0].offsetWidth + 4 : 0;\n\n        if (this.vScrollBar.css(\"visibility\") == \"hidden\") {\n          l = 0;\n        }\n\n        var k = this.columns.records.length - t;\n        e = (this.element.offsetWidth - 32 - l) / k;\n      }\n\n      b.each(this.columns.records, function (v, x) {\n        if (!(this.hidden && this.hideable) && !this.adaptivehidden) {\n          if (this.width.toString().indexOf(\"%\") != -1 || this._percentagewidth != undefined) {\n            var x = 0;\n            var y = u.vScrollBar[0].style.visibility == \"hidden\" ? 0 : u.scrollbarsize + 5;\n\n            if (u.scrollbarautoshow || u.scrollbarsize == 0) {\n              y = 0;\n            }\n\n            var q = f;\n            x = parseFloat(this.width) * q / 100;\n            y += h;\n\n            if (this._percentagewidth != undefined) {\n              x = parseFloat(this._percentagewidth) * (q - y) / 100;\n            }\n\n            if (x < this.minwidth && this.minwidth != \"auto\") {\n              x = this.minwidth;\n            }\n\n            if (x > this.maxwidth && this.maxwidth != \"auto\") {\n              x = this.maxwidth;\n            }\n\n            p -= x;\n          } else {\n            if (this.width != \"auto\" && !this._width) {\n              p -= this.width;\n            } else {\n              n += this.text;\n            }\n          }\n        }\n      });\n\n      var g = this._gettableheight();\n\n      if (!this.autoheight) {\n        if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > g) {\n          if (this.groupable && this.groups.length > 0) {\n            if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {\n              var s = this.dataview.loadedrootgroups.length * this.rowsheight;\n\n              if (this.pageable) {\n                for (var d = 0; d < this.dataview.rows.length; d++) {\n                  if (this.dataview.rows[d].group && this.dataview.rows[d].level === 0) {\n                    s += this.rowsheight;\n                  }\n                }\n              }\n\n              if (s > g) {\n                p -= this.scrollbarsize + 5;\n                f -= this.scrollbarsize + 5;\n              } else {\n                if (this.vScrollBar.css(\"visibility\") == \"visible\") {\n                  p -= this.scrollbarsize + 5;\n                  f -= this.scrollbarsize + 5;\n                }\n              }\n            } else {\n              p -= this.scrollbarsize + 5;\n              f -= this.scrollbarsize + 5;\n            }\n          } else {\n            if (this.vScrollBar.css(\"visibility\") != \"hidden\" && this.scrollbarsize > 0) {\n              p -= this.scrollbarsize + 5;\n              f -= this.scrollbarsize + 5;\n            }\n          }\n        }\n      }\n\n      var h = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : this.groups.length * this.groupindentwidth;\n      f -= h;\n\n      if (!this.columnsheader) {\n        return;\n      }\n\n      var j = this.columnsheader.find(\"#columntable\" + this.element.id);\n\n      if (j.length == 0) {\n        return;\n      }\n\n      var i = 0;\n      var o = this;\n      var r = 0;\n      b.each(this.columns.records, function (w, A) {\n        var y = b(this.element);\n\n        if (!this.hidden && !this.adaptivehidden && this.element.style.display === \"none\") {\n          this.element.style.display = \"block\";\n        }\n\n        if (this.adaptivehidden) {\n          this.element.style.display = \"none\";\n        }\n\n        var v = false;\n        var z = this.width;\n\n        if (this.width.toString().indexOf(\"%\") != -1 || this._percentagewidth != undefined) {\n          if (this._percentagewidth != undefined) {\n            z = parseFloat(this._percentagewidth) * f / 100;\n          } else {\n            z = parseFloat(this.width) * f / 100;\n          }\n\n          v = true;\n        }\n\n        if (e > 0 && this.columntype !== \"adaptive\") {\n          y.width(e);\n          this.adaptivewidth = e;\n        } else {\n          if (this.width != \"auto\" && !this._width && !v) {\n            if (parseInt(y[0].style.width) != this.width) {\n              y.width(this.width);\n            }\n          } else {\n            if (v) {\n              if (z < this.minwidth && this.minwidth != \"auto\") {\n                z = this.minwidth;\n                this.width = z;\n              }\n\n              if (z > this.maxwidth && this.maxwidth != \"auto\") {\n                z = this.maxwidth;\n                this.width = z;\n              }\n\n              if (parseInt(y[0].style.width) != z) {\n                y.width(z);\n                this.width = z;\n              }\n            } else {\n              var x = Math.floor(p * (this.text.length / n.length));\n              r += x;\n\n              if (p - r < 3 && p != r && p - r > 0.01) {\n                if (p - r === 1) {\n                  x++;\n                } else {\n                  x += 2;\n                }\n              } else {\n                if (w == u.columns.records.length - 1) {\n                  if (r < p) {\n                    x += p - r;\n                  }\n                }\n              }\n\n              if (isNaN(x)) {\n                x = this.minwidth;\n              }\n\n              if (isNaN(x)) {\n                x = this.minwidth;\n              }\n\n              if (x == Infinity) {\n                x = 0;\n              }\n\n              if (x < 0) {\n                var q = b(\"<span>\" + this.text + \"</span>\");\n                b(document.body).append(q);\n                x = 10 + q.width();\n                q.remove();\n              }\n\n              if (x < this.minwidth) {\n                x = this.minwidth;\n              }\n\n              if (x > this.maxwidth) {\n                x = this.maxwidth;\n              }\n\n              this._width = \"auto\";\n              this.width = x;\n              y.width(this.width);\n            }\n          }\n        }\n\n        if (parseInt(y[0].style.left) != i) {\n          y.css(\"left\", i);\n        }\n\n        if (!(this.hidden && this.hideable) && !this.adaptivehidden) {\n          if (e > 0 && this.columntype !== \"adaptive\") {\n            i += e;\n          } else {\n            i += this.width;\n          }\n        }\n\n        this._requirewidthupdate = true;\n      });\n      this.columnsheader.width(2 + i);\n      j.width(this.columnsheader.width());\n\n      if (i == 0) {\n        this.columnsheader[0].style.visibility = \"hidden\";\n      } else {\n        this.columnsheader[0].style.visibility = \"inherit\";\n      }\n\n      this._resizecolumngroups();\n\n      if (this.showfilterrow && this.filterrow) {\n        this.filterrow.width(this.columnsheader.width());\n\n        this._updatefilterrowui();\n      }\n\n      if (this.showeverpresentrow) {\n        if (this.everpresentrowposition !== \"bottom\") {\n          this.addnewrowtop.width(this.columnsheader.width());\n        } else {\n          this.addnewrowbottom.width(this.columnsheader.width());\n        }\n\n        this._updateaddnewrowui();\n      }\n\n      if (this.autowidth) {\n        this._arrange();\n      }\n    },\n    _rendercolumnheaders: function () {\n      var x = this.that;\n\n      if (!this.prerenderrequired) {\n        if (this._rendersortcolumn) {\n          this._rendersortcolumn();\n        }\n\n        if (this._renderfiltercolumn) {\n          this._renderfiltercolumn();\n        }\n\n        if (this.showfilterrow && this.filterrow) {\n          this.filterrow.width(this.columnsheader.width());\n\n          this._updatefilterrowui();\n        }\n\n        if (this.showeverpresentrow) {\n          if (this.everpresentrowposition !== \"bottom\") {\n            this.addnewrowtop.width(this.columnsheader.width());\n          } else {\n            this.addnewrowbottom.width(this.columnsheader.width());\n          }\n\n          this._updateaddnewrowui();\n        }\n\n        return;\n      }\n\n      this._columnsbydatafield = new Array();\n      this.columnsheader.find(\"#columntable\" + this.element.id).remove();\n      var o = b('<div id=\"columntable' + this.element.id + '\" style=\"height: 100%; position: relative;\"></div>');\n      o[0].cells = new Array();\n      var B = 0;\n      var h = 0;\n      var u = \"\";\n      var G = this.host.width();\n      var s = G;\n      var g = new Array();\n      var A = new Array();\n      var t = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : this.groups.length * this.groupindentwidth;\n      b.each(this.columns.records, function (j, k) {\n        if (!(this.hidden && this.hideable) && !this.adaptivehidden) {\n          if (this.width != \"auto\" && !this._width) {\n            if (this.width < this.minwidth && this.minwidth != \"auto\") {\n              G -= this.minwidth;\n            } else {\n              if (this.width > this.maxwidth && this.maxwidth != \"auto\") {\n                G -= this.maxwidth;\n              } else {\n                if (this.width.toString().indexOf(\"%\") != -1) {\n                  var k = 0;\n                  var p = x.vScrollBar[0].style.visibility == \"hidden\" ? 0 : x.scrollbarsize + 5;\n                  p += t;\n                  k = parseFloat(this.width) * (s - p) / 100;\n\n                  if (k < this.minwidth && this.minwidth != \"auto\") {\n                    k = this.minwidth;\n                  }\n\n                  if (k > this.maxwidth && this.maxwidth != \"auto\") {\n                    k = this.maxwidth;\n                  }\n\n                  G -= k;\n                } else {\n                  if (typeof this.width == \"string\") {\n                    this.width = parseInt(this.width);\n                  }\n\n                  G -= this.width;\n                }\n              }\n            }\n          } else {\n            u += this.text;\n          }\n        }\n\n        if (this.pinned || this.grouped || this.checkboxcolumn) {\n          if (x._haspinned) {\n            this.pinned = true;\n          }\n\n          g[g.length] = this;\n        } else {\n          A[A.length] = this;\n        }\n      });\n\n      if (!this.rtl) {\n        for (var D = 0; D < g.length; D++) {\n          this.columns.replace(D, g[D]);\n        }\n\n        for (var C = 0; C < A.length; C++) {\n          this.columns.replace(g.length + C, A[C]);\n        }\n      } else {\n        var y = 0;\n        g.reverse();\n\n        for (var D = this.columns.records.length - 1; D >= this.columns.records.length - g.length; D--) {\n          this.columns.replace(D, g[y++]);\n        }\n\n        for (var C = 0; C < A.length; C++) {\n          this.columns.replace(C, A[C]);\n        }\n      }\n\n      var n = this.headerZIndex;\n      var r = x.groupable ? x.groups.length : 0;\n\n      if (this.rowdetails && this.showrowdetailscolumn) {\n        r++;\n      }\n\n      var l = x.columnsheader.height();\n\n      if (this.showfilterrow) {\n        if (!this.columngroups) {\n          l = this.columnsheight;\n        } else {\n          l -= this.filterrowheight;\n        }\n      }\n\n      if (this.showeverpresentrow && this.everpresentrowposition !== \"bottom\") {\n        if (!this.columngroups) {\n          l = this.columnsheight;\n        } else {\n          l -= this.everpresentrowheight;\n        }\n      }\n\n      var v = this._gettableheight();\n\n      if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > v && !this.scrollbarautoshow) {\n        if (this.groupable && this.groups.length > 0) {\n          if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {\n            var E = 0;\n\n            if (!this.pageable) {\n              var E = this.dataview.loadedrootgroups.length * this.rowsheight;\n            } else {\n              if (this.pageable) {\n                for (var w = 0; w < this.dataview.rows.length; w++) {\n                  if (this.dataview.rows[w].group && this.dataview.rows[w].level === 0) {\n                    E += this.rowsheight;\n                  }\n                }\n              }\n            }\n\n            if (E > v) {\n              G -= this.scrollbarsize + 5;\n              s -= this.scrollbarsize + 5;\n            }\n          } else {\n            G -= this.scrollbarsize + 5;\n            s -= this.scrollbarsize + 5;\n          }\n        } else {\n          if (!this.autoheight && this.scrollbarsize > 0) {\n            G -= this.scrollbarsize + 5;\n            s -= this.scrollbarsize + 5;\n          }\n        }\n      }\n\n      s -= t;\n\n      var d = function (j, k) {\n        var i = x.columngroupslevel * x.columnsheight;\n        i = i - k.level * x.columnsheight;\n        return i;\n      };\n\n      var f = document.createDocumentFragment();\n      var z = 0;\n      b.each(this.columns.records, function (X, V) {\n        this.height = x.columnsheight;\n\n        if (x.columngroups) {\n          if (x.columngroups.length) {\n            this.height = d(this.datafield, this);\n            l = this.height;\n          }\n        }\n\n        var ab = x.toTP(\"jqx-grid-column-header\") + \" \" + x.toTP(\"jqx-widget-header\");\n\n        if (x.rtl) {\n          ab += \" \" + x.toTP(\"jqx-grid-column-header-rtl\");\n        }\n\n        var Z = !x.rtl ? 150 + n - 1 : 150 + n + 1;\n        var T = !x.rtl ? n-- : n++;\n        var H = b('<div role=\"columnheader\" style=\"z-index: ' + T + ';position: absolute; height: 100%;\" class=\"' + ab + '\"><div style=\"height: 100%; width: 100%;\"></div></div>');\n\n        if (x.columngroups) {\n          H[0].style.height = l + \"px\";\n          H[0].style.bottom = \"0px\";\n\n          if (this.pinned) {\n            H[0].style.zIndex = Z;\n          }\n        }\n\n        this.uielement = H;\n\n        if (this.classname != \"\" && this.classname) {\n          H.addClass(this.classname);\n        }\n\n        var P = this.width;\n        var Q = false;\n\n        if (this.width === null) {\n          this.width = \"auto\";\n        }\n\n        if (this.width.toString().indexOf(\"%\") != -1 || this._percentagewidth != undefined) {\n          if (this._percentagewidth != undefined) {\n            P = parseFloat(this._percentagewidth) * s / 100;\n          } else {\n            P = parseFloat(this.width) * s / 100;\n          }\n\n          Q = true;\n        }\n\n        if (this.width != \"auto\" && !this._width && !Q) {\n          if (P < this.minwidth && this.minwidth != \"auto\") {\n            P = this.minwidth;\n            this.width = P;\n          }\n\n          if (P > this.maxwidth && this.maxwidth != \"auto\") {\n            P = this.maxwidth;\n            this.width = P;\n          }\n\n          H[0].style.width = parseInt(P) + \"px\";\n        } else {\n          if (Q) {\n            if (P < this.minwidth && this.minwidth != \"auto\") {\n              P = this.minwidth;\n            }\n\n            if (P > this.maxwidth && this.maxwidth != \"auto\") {\n              P = this.maxwidth;\n            }\n\n            if (this._percentagewidth == undefined || this.width.toString().indexOf(\"%\") != -1) {\n              this._percentagewidth = this.width;\n            }\n\n            H.width(P);\n            this.width = P;\n          } else {\n            if (!this.hidden && !this.adaptivehidden) {\n              var U = Math.floor(G * (this.text.length / u.length));\n              z += U;\n\n              if (G - z < 3 && G != z && G - z > 0.01) {\n                if (G - z === 1) {\n                  U++;\n                } else {\n                  U += 2;\n                }\n              } else {\n                if (X == x.columns.records.length - 1) {\n                  if (z < G) {\n                    U += G - z;\n                  }\n                }\n              }\n\n              if (isNaN(U)) {\n                U = this.minwidth;\n              }\n\n              if (U < 0) {\n                var S = b(\"<span>\" + this.text + \"</span>\");\n                b(document.body).append(S);\n                U = 10 + S.width();\n                S.remove();\n              }\n\n              if (U < this.minwidth) {\n                U = this.minwidth;\n              }\n\n              if (U > this.maxwidth) {\n                U = this.maxwidth;\n              }\n\n              this._width = \"auto\";\n              this.width = U;\n              P = this.width;\n              H.width(this.width);\n            }\n          }\n        }\n\n        if (this.hidden && this.hideable || this.adaptivehidden) {\n          H.css(\"display\", \"none\");\n        }\n\n        var p = b(H.children()[0]);\n        var Y = x.rtl ? x.toTP(\"jqx-grid-column-menubutton\") + \" \" + x.toTP(\"jqx-grid-column-menubutton-rtl\") : x.toTP(\"jqx-grid-column-menubutton\");\n        Y += \" \" + x.toTP(\"jqx-icon-arrow-down\");\n        var K = b('<div style=\"height: ' + l + 'px; display: none; left: 100%; top: 0%; position: absolute;\"><div class=\"' + Y + '\" style=\"width: 100%; height:100%;\"></div></div>');\n\n        if (!x.enableanimations) {\n          K.css(\"margin-left\", -16);\n        }\n\n        if (x.rtl) {\n          K.css(\"left\", \"0px\");\n        }\n\n        this.columnsmenu = K[0];\n        o[0].cells[X] = H[0];\n        K[0].style.width = parseInt(x.columnsmenuwidth) + \"px\";\n        var J = x.columnsmenu;\n        var q = false;\n        var W = false;\n        var R = x.groupable && r > 0 && B < r || x.rowdetails && B < r;\n\n        if (x.rtl) {\n          R = x.groupable && r > 0 && B < r || x.rowdetails && B < r;\n          R &= X > x.columns.records.length - 1 - r;\n        }\n\n        if (R) {\n          B++;\n          J &= false;\n          this.sortable = false;\n          this.editable = false;\n          W = true;\n        } else {\n          var M = this.renderer != null ? this.renderer(this.text, this.align, l) : x._rendercolumnheader(this.text, this.align, l, x);\n\n          if (M == null) {\n            M = x._rendercolumnheader(this.text, this.align, l, x);\n          }\n\n          if (this.renderer != null) {\n            M = b(M);\n          }\n\n          J &= true;\n          q = true;\n        }\n\n        if (x.WinJS) {\n          MSApp.execUnsafeLocalFunction(function () {\n            p.append(b(M));\n          });\n        } else {\n          if (this.renderer) {\n            p.append(b(M));\n          } else {\n            if (M) {\n              p[0].innerHTML = M;\n            }\n          }\n        }\n\n        if (M != null) {\n          var O = b('<div class=\"iconscontainer\" style=\"height: ' + l + 'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;\"><div class=\"filtericon ' + x.toTP(\"jqx-widget-header\") + '\" style=\"height: ' + l + 'px; float: right; display: none; width: 16px;\"><div class=\"' + x.toTP(\"jqx-grid-column-filterbutton\") + '\" style=\"width: 100%; height:100%;\"></div></div><div class=\"sortasc ' + x.toTP(\"jqx-widget-header\") + '\" style=\"height: ' + l + 'px; float: right; display: none; width: 16px;\"><div class=\"' + x.toTP(\"jqx-grid-column-sortascbutton\") + \" \" + x.toTP(\"jqx-icon-arrow-up\") + '\" style=\"width: 100%; height:100%;\"></div></div><div class=\"sortdesc ' + x.toTP(\"jqx-widget-header\") + '\" style=\"height: ' + l + 'px; float: right; display: none; width: 16px;\"><div class=\"' + x.toTP(\"jqx-grid-column-sortdescbutton\") + \" \" + x.toTP(\"jqx-icon-arrow-down\") + '\" style=\"width: 100%; height:100%;\"></div></div><div class=\"sorticon ' + x.toTP(\"jqx-widget-header\") + '\" style=\"height: ' + l + 'px; float: right; visibility: hidden; width: 16px;\"><div class=\"' + x.toTP(\"jqx-grid-column-sorticon\") + \" \" + x.toTP(\"jqx-icon-arrow-down\") + '\" style=\"width: 100%; height:100%;\"></div></div></div>');\n          K.addClass(x.toTP(\"jqx-widget-header\"));\n          p.append(O);\n          var ad = O.children();\n          this.sorticon = ad[3];\n          this.sortasc = ad[1];\n          this.sortdesc = ad[2];\n          this.filtericon = ad[0];\n          this.iconscontainer = O;\n\n          if (x.rtl) {\n            O.css(\"margin-left\", \"0px\");\n            O.css(\"left\", \"0px\");\n            b(this.sorticon).css(\"float\", \"left\");\n            b(this.sortasc).css(\"float\", \"left\");\n            b(this.filtericon).css(\"float\", \"left\");\n            b(this.sortdesc).css(\"float\", \"left\");\n          }\n\n          if (!x.autoshowfiltericon && this.filterable) {\n            b(this.filtericon).css(\"display\", \"block\");\n          }\n        }\n\n        this.element = H[0];\n\n        if (J) {\n          x._handlecolumnsmenu(x, p, H, K, this);\n\n          if (!this.menu) {\n            K.hide();\n          }\n        }\n\n        f.appendChild(H[0]);\n\n        if (x.groupable && q) {\n          H[0].id = x.dataview.generatekey();\n\n          if (x._handlecolumnstogroupsdragdrop) {\n            x._handlecolumnstogroupsdragdrop(this, H);\n          } else {\n            throw new Error(\"jqxGrid: Missing reference to jqxgrid.grouping.js.\");\n          }\n        }\n\n        if (x.columnsreorder && this.draggable && x._handlecolumnsdragreorder) {\n          x._handlecolumnsdragreorder(this, H);\n        }\n\n        var aa = this;\n\n        aa._applyStyle();\n\n        x.addHandler(H, \"mouseenter\", function (i) {\n          aa.hovered = true;\n\n          aa._applyStyle();\n        });\n        x.addHandler(H, \"mouseleave\", function (i) {\n          aa.hovered = false;\n\n          aa._applyStyle();\n        });\n\n        var ac = function (aj, ae, ak) {\n          if (aj.selectable) {\n            var am = x.getrows();\n\n            if (aj.selected === undefined) {\n              aj.selected = false;\n            }\n\n            if (!ae.shiftKey || x._clickedcolumn === undefined) {\n              x._clickedcolumn = aj;\n            }\n\n            if (ae.shiftKey && x._clickedcolumn && ak === undefined) {\n              var al = x.columns.records.indexOf(x._clickedcolumn);\n              var ai = x.columns.records.indexOf(aj);\n              var af = Math.min(al, ai);\n              var ag = Math.max(al, ai);\n              x.clearselection();\n\n              for (var ah = af; ah <= ag; ah++) {\n                ac(x.columns.records[ah], ae, true);\n              }\n\n              x._renderrows(this.virtualsizeinfo);\n\n              return;\n            }\n\n            if (ak) {\n              aj.selected = true;\n            } else {\n              if (!ae.ctrlKey) {\n                x.clearselection();\n              }\n\n              aj.selected = !aj.selected;\n            }\n\n            for (var ah = 0; ah < am.length; ah++) {\n              x._applycellselection(am[ah].boundindex, aj.displayfield, aj.selected, false);\n            }\n\n            if (aj.selected) {\n              aj.element.setAttribute(\"selected\", \"\");\n            } else {\n              aj.element.removeAttribute(\"selected\");\n            }\n\n            aj._applyStyle();\n\n            if (ak === undefined) {\n              x._renderrows(this.virtualsizeinfo);\n            }\n          }\n        };\n\n        x.addHandler(H, \"click\", function (i) {\n          if (aa.checkboxcolumn) {\n            return true;\n          }\n\n          if (x.sorttogglestates > 0 && x._togglesort) {\n            if (!x._loading) {\n              if (x.suspendClick) {\n                return true;\n              }\n\n              x._togglesort(aa);\n            }\n          }\n\n          ac(aa, i);\n          i.preventDefault();\n\n          x._raiseEvent(7, {\n            column: aa.getcolumnproperties(),\n            datafield: aa.datafield,\n            originalEvent: i\n          });\n        });\n\n        if (aa.resizable && x.columnsresize && !W) {\n          var I = false;\n          var j = \"mousemove\";\n\n          if (x.isTouchDevice() && x.touchmode !== true) {\n            I = true;\n            j = b.jqx.mobile.getTouchEventName(\"touchstart\");\n          }\n\n          x.addHandler(H, j, function (ae) {\n            var i = parseInt(ae.pageX);\n            var ag = 5;\n            var aj = parseInt(H.coord().left);\n\n            if (x.hasTransform) {\n              aj = b.jqx.utilities.getOffset(H).left;\n            }\n\n            if (x.resizing) {\n              return true;\n            }\n\n            if (x._handlecolumnsresize) {\n              if (I) {\n                var af = x.getTouches(ae);\n                var ai = af[0];\n                i = ai.pageX;\n                ag = 40;\n\n                if (i >= aj + aa.width - ag) {\n                  x.resizablecolumn = {\n                    columnelement: H,\n                    column: aa\n                  };\n                  H.css(\"cursor\", \"col-resize\");\n                } else {\n                  H.css(\"cursor\", \"\");\n                  x.resizablecolumn = null;\n                }\n\n                return true;\n              }\n\n              var ah = aa.width;\n\n              if (x.rtl) {\n                ah = 0;\n              }\n\n              if (i >= aj + ah - ag) {\n                if (i <= aj + ah + ag) {\n                  x.resizablecolumn = {\n                    columnelement: H,\n                    column: aa\n                  };\n                  H.css(\"cursor\", \"col-resize\");\n                  return false;\n                } else {\n                  H.css(\"cursor\", \"\");\n                  x.resizablecolumn = null;\n                }\n              } else {\n                H.css(\"cursor\", \"\");\n\n                if (i < aj + ah - ag) {\n                  if (!aa._animating && !aa._menuvisible) {\n                    H.mouseenter();\n                  }\n                }\n\n                x.resizablecolumn = null;\n              }\n            }\n          });\n        }\n\n        H.css(\"left\", h);\n\n        if (!(this.hidden && this.hideable) && !this.adaptivehidden) {\n          h += P;\n        }\n\n        if (aa.rendered) {\n          var N = aa.rendered(b(p[0].firstChild), aa.align, l);\n\n          if (N && O != null) {\n            O.hide();\n          }\n        }\n\n        if (aa.checkboxcolumn) {\n          if (O) {\n            O.hide();\n          }\n\n          if (!x.host.jqxCheckBox) {\n            throw new Error(\"jqxGrid: Missing reference to jqxcheckbox.js\");\n          }\n\n          p.html('<div style=\"cursor: pointer; margin-left: 3px; top: 50%; margin-top: -9px; position: relative;\"></div>');\n          var k = p.find(\"div:first\");\n          k.jqxCheckBox({\n            _canFocus: false,\n            disabled: x.disabled,\n            disabledContainer: true,\n            theme: x.theme,\n            enableContainerClick: false,\n            animationShowDelay: 0,\n            animationHideDelay: 0\n          });\n          k.addClass(x.toThemeProperty(\"jqx-checkbox\"));\n          aa.checkboxelement = k;\n          var L = k.data().jqxCheckBox.instance;\n          x._checkboxcolumn = aa;\n\n          L.updated = function (ae, i, af) {\n            x._checkboxcolumnupdating = true;\n\n            if (x.disabled) {\n              k.jqxCheckBox({\n                disabled: x.disabled\n              });\n              i = af;\n            }\n\n            if (i) {\n              x.selectallrows();\n            } else {\n              x.unselectallrows();\n            }\n\n            x._checkboxcolumnupdating = false;\n          };\n        }\n      });\n\n      if (h > 0) {\n        this.columnsheader.width(2 + h);\n      } else {\n        this.columnsheader.width(h);\n      }\n\n      o[0].appendChild(f);\n      this.columnsrow = o;\n      x.columnsheader.append(o);\n\n      if (this.showfilterrow && this._updatefilterrow) {\n        if (!this.columngroups) {\n          o.height(this.columnsheight);\n        } else {\n          o.height(this.columngroupslevel * this.columnsheight);\n        }\n\n        if (!this.filterrow) {\n          var F = b(\"<div style='position: relative !important; '></div>\");\n          F[0].id = \"filterrow.\" + this.element.id;\n          F.height(this.filterrowheight);\n          this.filterrow = F;\n        }\n\n        this.filterrow.width(2 + h);\n        this.columnsheader.append(this.filterrow);\n\n        this._updatefilterrow();\n      }\n\n      if (this.showeverpresentrow && this.everpresentrowposition !== \"bottom\") {\n        if (!this.columngroups) {\n          o.height(this.columnsheight);\n        } else {\n          o.height(this.columngroupslevel * this.columnsheight);\n        }\n\n        if (!this.addnewrowtop) {\n          var m = b(\"<div style='position: relative !important; z-index:\" + this.headerZIndex + \";'></div>\");\n          m[0].id = \"addnewrowtop.\" + this.element.id;\n          m.height(this.everpresentrowheight);\n          this.addnewrowtop = m;\n        }\n\n        this.addnewrowtop.width(2 + h);\n\n        if (this.everpresentrowposition == \"topAboveFilterRow\") {\n          if (this.filterrow) {\n            this.addnewrowtop.insertBefore(this.filterrow);\n          } else {\n            this.columnsheader.append(this.addnewrowtop);\n          }\n        } else {\n          this.columnsheader.append(this.addnewrowtop);\n        }\n\n        this._updateaddnewrow();\n      } else {\n        if (this.showeverpresentrow && this.everpresentrowposition === \"bottom\") {\n          if (!this.addnewrowbottom) {\n            var e = b(\"<div style='position: relative !important; z-index:\" + this.headerZIndex + \";'></div>\");\n            e[0].id = \"addnewrowbottom.\" + this.element.id;\n            e.height(this.everpresentrowheight);\n            this.addnewrowbottom = e;\n          }\n\n          this.addnewrowbottom.width(2 + h);\n          this.addnewrow.append(this.addnewrowbottom);\n\n          this._updateaddnewrow();\n        }\n      }\n\n      if (h == 0) {\n        o[0].style.visibility = \"hidden\";\n      } else {\n        o[0].style.visibility = \"inherit\";\n      }\n\n      o.width(h);\n\n      if (this._handlecolumnsdragdrop) {\n        this._handlecolumnsdragdrop();\n      }\n\n      if (this._handlecolumnsreorder) {\n        this._handlecolumnsreorder();\n      }\n\n      if (this._rendersortcolumn) {\n        this._rendersortcolumn();\n      }\n\n      if (this._renderfiltercolumn) {\n        this._renderfiltercolumn();\n      }\n\n      if (this._handlecolumnsresize) {\n        this._handlecolumnsresize();\n      }\n\n      if (this.columngroups) {\n        this._rendercolumngroups();\n      }\n\n      if (this._updatecheckboxselection) {\n        this._updatecheckboxselection();\n      }\n    },\n    _rendercolumngroups: function () {\n      if (!this.columngroups) {\n        return;\n      }\n\n      var p = 0;\n\n      for (var m = 0; m < this.columns.records.length; m++) {\n        if (this.columns.records[m].pinned) {\n          p++;\n        }\n      }\n\n      var u = this.headerZIndex - p + this.columns.records.length;\n      var v = this.that;\n      var h = v.toTP(\"jqx-grid-column-header\") + \" \" + v.toTP(\"jqx-grid-columngroup-header\") + \" \" + v.toTP(\"jqx-widget-header\");\n\n      if (v.rtl) {\n        h += \" \" + v.toTP(\"jqx-grid-columngroup-header-rtl\");\n      }\n\n      var f = this.columnsheader.find(\"#columntable\" + this.element.id);\n      f.find(\"jqx-grid-columngroup-header\").remove();\n\n      for (var k = 0; k < this.columngroupslevel - 1; k++) {\n        for (var m = 0; m < this.columngroups.length; m++) {\n          var r = this.columngroups[m];\n          var d = r.level;\n\n          if (d !== k) {\n            continue;\n          }\n\n          var q = d * this.columnsheight;\n          var e = 99999;\n\n          if (r.groups) {\n            var t = function (y) {\n              var x = 0;\n\n              for (var w = 0; w < y.groups.length; w++) {\n                var i = y.groups[w];\n\n                if (!i.groups) {\n                  if (!i.hidden) {\n                    x += i.width;\n                    e = Math.min(parseFloat(i.element.style.left), e);\n                  }\n                } else {\n                  x += t(i);\n                }\n              }\n\n              return x;\n            };\n\n            r.width = t(r);\n            r.left = e;\n            var s = this.columnsheight;\n            var n = u--;\n            var g = b('<div role=\"columnheader\" style=\"z-index: ' + n + ';position: absolute;\" class=\"' + h + '\"></div>');\n            var l = b(this._rendercolumnheader(r.text, r.align, this.columnsheight, this));\n\n            if (r.renderer) {\n              var l = b(\"<div style='height: 100%; width: 100%;'></div>\");\n              var o = r.renderer(r.text, r.align, s);\n              l.html(o);\n            }\n\n            g.append(l);\n            g[0].style.left = e + \"px\";\n\n            if (e === 0) {\n              g[0].style.borderLeftColor = \"transparent\";\n            }\n\n            if (!this.showcolumnheaderlines) {\n              g[0].style.borderRightColor = \"transparent\";\n              g[0].style.borderBottomColor = \"transparent\";\n              g[0].style.boxShadow = \"none\";\n            }\n\n            g[0].style.top = q + \"px\";\n            g[0].style.height = s + \"px\";\n            g[0].style.width = -1 + r.width + \"px\";\n            f.append(g);\n            r.element = g;\n\n            if (r.rendered) {\n              r.rendered(l, r.align, s);\n            }\n          }\n        }\n      }\n    },\n    _resizecolumngroups: function () {\n      if (!this.columngroups) {\n        return;\n      }\n\n      for (var e = 0; e < this.columngroups.length; e++) {\n        var k = this.columngroups[e];\n        var l = k.level;\n        var j = l * this.columnsheight;\n        var h = 99999;\n\n        if (k.groups) {\n          var g = function (o) {\n            var n = 0;\n\n            for (var m = 0; m < o.groups.length; m++) {\n              var i = o.groups[m];\n\n              if (!i.groups) {\n                if (!i.hidden) {\n                  n += i.width;\n                  h = Math.min(parseFloat(i.element.style.left), h);\n                }\n              } else {\n                n += g(i);\n              }\n            }\n\n            return n;\n          };\n\n          k.width = g(k);\n          k.left = h;\n          var d = this.columnsheight;\n          var f = k.element;\n          f[0].style.left = h + \"px\";\n          f[0].style.top = j + \"px\";\n          f[0].style.height = d + \"px\";\n          f[0].style.width = -1 + k.width + \"px\";\n        }\n      }\n    },\n    _handlecolumnsmenu: function (p, g, h, k, m) {\n      p.dragmousedown = null;\n      k[0].id = p.dataview.generatekey();\n      g.append(k);\n      h[0].columnsmenu = k[0];\n      m.element = h[0];\n      var l = this.columnsmenuwidth + 1;\n\n      var o = function () {\n        if (!m.menu) {\n          return false;\n        }\n\n        if (!p.resizing) {\n          if (m._menuvisible && p._hasOpenedMenu) {\n            return false;\n          }\n\n          m._animating = true;\n\n          if (p.menuitemsarray && p.menuitemsarray.length > 0) {\n            if (!p.enableanimations) {\n              k.css(\"display\", \"block\");\n              var q = !p.rtl ? -48 : 16;\n              m.iconscontainer.css(\"margin-left\", q + \"px\");\n              m._animating = false;\n              m._menuvisible = true;\n            } else {\n              k.css(\"display\", \"block\");\n              k.stop();\n              m.iconscontainer.stop();\n\n              if (!p.rtl) {\n                k.css(\"margin-left\", \"0px\");\n                k.animate({\n                  \"margin-left\": -l\n                }, \"fast\", function () {\n                  k.css(\"display\", \"block\");\n                  m._animating = false;\n                  m._menuvisible = true;\n                });\n              } else {\n                k.css(\"margin-left\", -l);\n                k.animate({\n                  \"margin-left\": \"0px\"\n                }, \"fast\", function () {\n                  k.css(\"display\", \"block\");\n                  m._animating = false;\n                  m._menuvisible = true;\n                });\n              }\n\n              var q = !p.rtl ? -(32 + l) : l;\n              m.iconscontainer.animate({\n                \"margin-left\": q\n              }, \"fast\");\n            }\n          }\n        }\n      };\n\n      var f = \"mouseenter\";\n\n      if (p.isTouchDevice()) {\n        f = \"touchstart\";\n      }\n\n      p.addHandler(h, f, function (r) {\n        var q = parseInt(r.pageX);\n        var t = p.columnsresize && m.resizable ? 3 : 0;\n        var v = parseInt(h.coord().left);\n\n        if (p.hasTransform) {\n          v = b.jqx.utilities.getOffset(h).left;\n        }\n\n        var u = m.width;\n\n        if (p.rtl) {\n          u = 0;\n        }\n\n        if (t != 0) {\n          if (q >= v + u - t) {\n            if (q <= v + u + t) {\n              return false;\n            }\n          }\n        }\n\n        var s = p.vScrollInstance.isScrolling();\n\n        if (m.menu && p.autoshowcolumnsmenubutton && !s && !p.disabled) {\n          o();\n        }\n      });\n\n      if (!p.autoshowcolumnsmenubutton) {\n        k.css(\"display\", \"block\");\n        var e = !p.rtl ? -48 : 16;\n        m.iconscontainer.css(\"margin-left\", e + \"px\");\n\n        if (!p.rtl) {\n          k.css({\n            \"margin-left\": -l\n          });\n        } else {\n          k.css({\n            \"margin-left\": \"0px\"\n          });\n        }\n      }\n\n      p.addHandler(h, \"mouseleave\", function (q) {\n        if (p.menuitemsarray && p.menuitemsarray.length > 0 && m.menu) {\n          var s = b.data(document.body, \"contextmenu\" + p.element.id);\n\n          if (s != undefined && k[0].id == s.columnsmenu.id) {\n            return;\n          }\n\n          if (p.autoshowcolumnsmenubutton) {\n            if (!p.enableanimations) {\n              k.css(\"display\", \"none\");\n              var r = !p.rtl ? -32 : 0;\n              m.iconscontainer.css(\"margin-left\", r + \"px\");\n              m._menuvisible = false;\n            } else {\n              if (!p.rtl) {\n                k.css(\"margin-left\", -l);\n              } else {\n                k.css(\"margin-left\", \"0px\");\n              }\n\n              k.stop();\n              m.iconscontainer.stop();\n\n              if (!p.rtl) {\n                k.animate({\n                  \"margin-left\": 0\n                }, \"fast\", function () {\n                  k.css(\"display\", \"none\");\n                  m._menuvisible = false;\n                });\n              } else {\n                k.animate({\n                  \"margin-left\": -l\n                }, \"fast\", function () {\n                  k.css(\"display\", \"none\");\n                  m._menuvisible = false;\n                });\n              }\n\n              var r = !p.rtl ? -32 : 0;\n              m.iconscontainer.animate({\n                \"margin-left\": r\n              }, \"fast\");\n            }\n          }\n        }\n      });\n      var j = true;\n      var d = \"\";\n      var i = b(m.filtericon);\n      p.addHandler(k, \"mousedown\", function (q) {\n        if (!p.gridmenu) {\n          p._initmenu();\n        }\n\n        j = !b.data(p.gridmenu[0], \"contextMenuOpened\" + p.gridmenu[0].id);\n        d = b.data(document.body, \"contextmenu\" + p.element.id);\n\n        if (d != null) {\n          d = d.column.datafield;\n        }\n      });\n      p.addHandler(i, \"mousedown\", function (q) {\n        if (!p.gridmenu) {\n          p._initmenu();\n        }\n\n        j = !b.data(p.gridmenu[0], \"contextMenuOpened\" + p.gridmenu[0].id);\n        d = b.data(document.body, \"contextmenu\" + p.element.id);\n\n        if (d != null) {\n          d = d.column.datafield;\n        }\n      });\n\n      var n = function () {\n        if (!m.menu) {\n          return false;\n        }\n\n        if (!p.gridmenu) {\n          p._initmenu();\n        }\n\n        if (p.disabled) {\n          return false;\n        }\n\n        for (var H = 0; H < p.columns.records.length; H++) {\n          if (p.columns.records[H].datafield != m.datafield) {\n            p.columns.records[H]._menuvisible = false;\n          }\n        }\n\n        var w = k.coord(true);\n        var B = k.height();\n\n        if (!j) {\n          j = true;\n\n          if (d == m.datafield) {\n            p._closemenu();\n\n            return false;\n          }\n        }\n\n        var r = p.host.coord(true);\n\n        if (p.hasTransform) {\n          r = b.jqx.utilities.getOffset(p.host);\n          w = b.jqx.utilities.getOffset(k);\n        }\n\n        if (r.left + p.host.width() > parseInt(w.left) + p.gridmenu.width()) {\n          p.gridmenu.jqxMenu(\"open\", w.left, w.top + B);\n        } else {\n          p.gridmenu.jqxMenu(\"open\", k.width() + w.left - p.gridmenu.width(), w.top + B);\n        }\n\n        if (p.gridmenu.width() < 100) {\n          p._arrangemenu();\n        }\n\n        if (p.adaptive && p.element.offsetWidth < p.adaptivewidth) {\n          p.gridmenu.jqxMenu(\"close\");\n          p.gridmenu.jqxMenu(\"open\", r.left, w.top + B);\n          var D = 0;\n\n          for (var H = 0; H < p.columns.records.length; H++) {\n            var v = p.columns.records[H];\n\n            if (v.hidden || v.adaptivehidden || v.columntype === \"adaptive\") {\n              continue;\n            }\n\n            D += v.adaptivewidth;\n          }\n\n          p.gridmenu.width(D);\n          p.gridmenu.height(p.content.height());\n        }\n\n        if (!p.filterable || p.filterable && p.showfilterrow) {\n          setTimeout(function () {\n            p.gridmenu.focus();\n            var I = p.gridmenu.find(\".jqx-item\");\n\n            for (var J = 0; J < I.length; J++) {\n              if (I[J].active) {\n                I[J].active = false;\n              }\n            }\n\n            var K = I[0];\n\n            if (I[0].className.indexOf(\"disabled\") >= 0) {\n              K = I[1];\n            }\n\n            b(I).removeClass(\"jqx-fill-state-focus\");\n            b(K).addClass(\"jqx-fill-state-focus\");\n            K.active = true;\n          }, 225);\n        }\n\n        p._hasOpenedMenu = true;\n\n        var z = p._getmenuitembyindex(0);\n\n        var x = p._getmenuitembyindex(1);\n\n        var q = p._getmenuitembyindex(2);\n\n        var y = p._getmenuitembyindex(3);\n\n        var t = p._getmenuitembyindex(4);\n\n        var G = p._getmenuitembyindex(5);\n\n        if (z != null && x != null && q != null) {\n          var u = m.sortable && p.sortable;\n          p.gridmenu.jqxMenu(\"disable\", z.id, !u);\n          p.gridmenu.jqxMenu(\"disable\", x.id, !u);\n          p.gridmenu.jqxMenu(\"disable\", q.id, !u);\n\n          if (m.displayfield != undefined) {\n            if (p.sortcolumn == m.displayfield) {\n              var E = p.getsortinformation();\n\n              if (u) {\n                if (E.sortdirection.ascending) {\n                  p.gridmenu.jqxMenu(\"disable\", z.id, true);\n                } else {\n                  p.gridmenu.jqxMenu(\"disable\", x.id, true);\n                }\n              }\n            } else {\n              p.gridmenu.jqxMenu(\"disable\", q.id, true);\n            }\n          }\n        }\n\n        if (y != null && t != null) {\n          if (!p.groupable || !m.groupable) {\n            p.gridmenu.jqxMenu(\"disable\", t.id, true);\n            p.gridmenu.jqxMenu(\"disable\", y.id, true);\n          } else {\n            if (p.groups && p.groups.indexOf(m.datafield) != -1) {\n              p.gridmenu.jqxMenu(\"disable\", y.id, true);\n              p.gridmenu.jqxMenu(\"disable\", t.id, false);\n            } else {\n              p.gridmenu.jqxMenu(\"disable\", y.id, false);\n              p.gridmenu.jqxMenu(\"disable\", t.id, true);\n            }\n          }\n        }\n\n        if (G != null) {\n          p.menuOwner = m;\n\n          p._updatefilterpanel(p, G, m);\n\n          var s = 0;\n\n          if (p.sortable && p._togglesort && p.showsortmenuitems) {\n            s += 3;\n          }\n\n          if (p.groupable && p.addgroup && p.showgroupmenuitems) {\n            s += 2;\n          }\n\n          var C = s * 33 + 6;\n\n          var F = p._measureMenuElement();\n\n          var C = s * F + 14;\n\n          if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n            C += 20;\n            b(G).height(194);\n          }\n\n          if (p.isTouchDevice()) {\n            C += 10;\n          }\n\n          if (p.filterable && p.showfiltermenuitems) {\n            if (!m.filterable) {\n              p.gridmenu.height(C);\n              b(G).css(\"display\", \"none\");\n            } else {\n              p.gridmenu.height(C + 194);\n              b(G).css(\"display\", \"block\");\n            }\n          }\n        }\n\n        if (p.columnmenuopening) {\n          var A = p.columnmenuopening(p.gridmenu, m.displayfield, p.gridmenu.height());\n\n          if (false === A) {\n            setTimeout(function () {\n              p._closemenu();\n            });\n          }\n        }\n\n        b.data(document.body, \"contextmenu\" + p.element.id, {\n          column: m,\n          columnsmenu: k[0]\n        });\n      };\n\n      p.addHandler(i, \"click\", function (q) {\n        if (!m.menu) {\n          return false;\n        }\n\n        if (!p.showfilterrow) {\n          if (k[0].style.display != \"block\") {\n            h.trigger(\"mouseenter\");\n          }\n\n          setTimeout(function () {\n            if (k[0].style.display != \"block\") {\n              h.trigger(\"mouseenter\");\n            }\n\n            n();\n          }, 200);\n        }\n\n        return false;\n      });\n      p.addHandler(k, \"click\", function (q) {\n        if (!m.menu) {\n          return false;\n        }\n\n        n();\n        return false;\n      });\n\n      if (p.isTouchDevice()) {\n        p.addHandler(k, b.jqx.mobile.getTouchEventName(\"touchstart\"), function (q) {\n          if (!m.menu) {\n            return false;\n          }\n\n          if (!p._hasOpenedMenu) {\n            n();\n          } else {\n            p._closemenu();\n          }\n\n          return false;\n        });\n      }\n    },\n    _removecolumnhandlers: function (h) {\n      var e = this.that;\n      var f = b(h.element);\n\n      if (f.length > 0) {\n        e.removeHandler(f, \"mouseenter\");\n        e.removeHandler(f, \"mouseleave\");\n        var g = b(h.filtericon);\n        e.removeHandler(g, \"mousedown\");\n        e.removeHandler(g, \"click\");\n        e.removeHandler(f, \"click\");\n        e.removeHandler(f, \"mousemove\");\n\n        if (e.columnsreorder) {\n          e.removeHandler(f, \"mousedown.drag\");\n          e.removeHandler(f, \"mousemove.drag\");\n        }\n\n        e.removeHandler(f, \"dragstart\");\n\n        if (f[0].columnsmenu) {\n          var d = b(f[0].columnsmenu);\n          e.removeHandler(d, \"click\");\n          e.removeHandler(d, \"mousedown\");\n          e.removeHandler(d, b.jqx.mobile.getTouchEventName(\"touchstart\"));\n        }\n      }\n    },\n    _rendercolumnheader: function (h, i, e, d) {\n      var g = \"8px\";\n\n      if (d.columngroups) {\n        g = e / 2 - this._columnheight / 2;\n\n        if (g < 0) {\n          g = 6;\n        }\n\n        g += \"px\";\n      } else {\n        if (this.columnsheight != 32) {\n          g = this.columnsheight / 2 - this._columnheight / 2;\n\n          if (g < 0) {\n            g = 6;\n          }\n\n          g += \"px\";\n        }\n      }\n\n      if (this.enableellipsis) {\n        if (i == \"left\") {\n          return '<div style=\"padding-bottom: 2px; overflow: hidden; text-overflow: ellipsis; text-align: ' + i + \"; margin-left: 4px; margin-right: 2px; line-height: \" + e + 'px;\"><span style=\"text-overflow: ellipsis; cursor: default;\">' + h + \"</span></div>\";\n        } else {\n          return '<div style=\"padding-bottom: 2px; overflow: hidden; text-overflow: ellipsis; text-align: ' + i + \"; margin-left: 2px; margin-right: 4px; line-height: \" + e + 'px;\"><span style=\"text-overflow: ellipsis; cursor: default;\">' + h + \"</span></div>\";\n        }\n      }\n\n      if (i == \"center\" || i == \"middle\") {\n        return '<div style=\"padding-bottom: 2px; text-align: center; line-height: ' + e + 'px;\"><a href=\"#\">' + h + \"</a></div>\";\n      }\n\n      var f = '<a style=\"line-height: ' + e + \"px; float: \" + i + ';\" href=\"#\">' + h + \"</a>\";\n      return f;\n    },\n    _renderrows: function (m, p, t) {\n      var o = this.that;\n\n      if ((this.pageable || this.groupable) && (this.autoheight || this.autorowheight)) {\n        if (this.table != null && this.table[0].rows != null && this.table[0].rows.length < this.dataview.rows.length) {\n          o.prerenderrequired = true;\n        }\n      }\n\n      if (!this.pageable && (this.autoheight || this.autorowheight) && (this.virtualmode || this.unboundmode)) {\n        var f = this.source.totalrecords;\n\n        if (!isNaN(f)) {\n          if (this.table != null && this.table[0].rows != null && this.table[0].rows.length != f) {\n            o.prerenderrequired = true;\n          }\n        }\n      }\n\n      if ((this.autoheight || this.autorowheight) && !o.prerenderrequired) {\n        if (this.table && this.table[0].rows) {\n          if (this.table[0].rows.length < this.dataview.records.length) {\n            if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {\n              o.prerenderrequired = true;\n            } else {\n              if (!this.pageable) {\n                o.prerenderrequired = true;\n              }\n            }\n          }\n\n          if (this.table[0].rows.length < this.dataview.cachedrecords.length) {\n            if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {\n              o.prerenderrequired = true;\n            } else {\n              if (!this.pageable) {\n                o.prerenderrequired = true;\n              }\n            }\n          }\n        }\n      }\n\n      o._prerenderrows(m);\n\n      if (o._requiresupdate) {\n        o._requiresupdate = false;\n\n        o._updatepageviews();\n      }\n\n      var l = function () {\n        if (o._loading) {\n          return;\n        }\n\n        if (o.WinJS) {\n          MSApp.execUnsafeLocalFunction(function () {\n            o._rendervisualrows();\n          });\n        } else {\n          o._rendervisualrows();\n        }\n\n        if (o.virtualmode && o.showaggregates && o._updateaggregates) {\n          o.refreshaggregates();\n        }\n      };\n\n      var k = b.jqx.browser.msie && b.jqx.browser.version < 10;\n\n      if (this.virtualmode) {\n        var e = function () {\n          if (o.rendergridrows) {\n            var y = o._startboundindex;\n\n            if (y == undefined) {\n              y = 0;\n            }\n\n            var w = y + 1 + o.dataview.pagesize;\n\n            if (y != null && w != null) {\n              var x = o.source._source ? true : false;\n              var z = !x ? o.source.recordstartindex : o.source._source.recordstartindex;\n\n              if (z != y || p == true) {\n                if (!x) {\n                  o.source.recordstartindex = y;\n                  o.source.recordendindex = w;\n                } else {\n                  if (w >= o.source._source.totalrecords) {\n                    w = o.source._source.totalrecords;\n                    y = w - o.dataview.pagesize - 1;\n\n                    if (y < 0) {\n                      y = 0;\n                    }\n\n                    if (o.source._source.recordendindex == w && o.source._source.recordstartindex == y) {\n                      return;\n                    }\n                  }\n\n                  o.source._source.recordstartindex = y;\n                  o.source._source.recordendindex = w;\n                }\n\n                o.updatebounddata(\"cells\");\n              }\n            }\n          }\n        };\n\n        if (this.loadondemand) {\n          l();\n          e();\n          this.loadondemand = false;\n        }\n\n        var d = this._browser == undefined ? this._isIE10() : this._browser;\n\n        if (this.editable && this.editcell && !this.vScrollInstance.isScrolling() && !this.hScrollInstance.isScrolling()) {\n          l();\n        } else {\n          if (this.autoheight) {\n            l();\n          } else {\n            if (d || k || navigator && navigator.userAgent.indexOf(\"Safari\") != -1) {\n              if (this._scrolltimer != null) {\n                clearTimeout(this._scrolltimer);\n              }\n\n              this._scrolltimer = setTimeout(function () {\n                l();\n              }, 5);\n            } else {\n              l();\n            }\n          }\n        }\n      } else {\n        if (this.scrollmode == \"deferred\" && (this.hScrollInstance.isScrolling() || this.vScrollInstance.isScrolling())) {\n          if (this._scrolltimer != null) {\n            clearInterval(this._scrolltimer);\n          }\n\n          var g = this._getfirstvisualrow();\n\n          if (g != null) {\n            var r = function (B) {\n              if (g == null) {\n                return \"\";\n              }\n\n              var A = \"<table>\";\n              var y = o.deferreddatafields;\n\n              if (y == null) {\n                if (o.columns.records.length > 0) {\n                  y = new Array();\n                  y.push(o.columns.records[0].displayfield);\n                }\n              }\n\n              for (var x = 0; x < y.length; x++) {\n                var C = y[x];\n\n                var z = o._getcolumnbydatafield(C);\n\n                if (z) {\n                  var w = o._getcellvalue(z, g);\n\n                  if (z.cellsformat != \"\") {\n                    if (b.jqx.dataFormat) {\n                      if (b.jqx.dataFormat.isDate(w)) {\n                        w = b.jqx.dataFormat.formatdate(w, z.cellsformat, o.gridlocalization);\n                      } else {\n                        if (b.jqx.dataFormat.isNumber(w)) {\n                          w = b.jqx.dataFormat.formatnumber(w, z.cellsformat, o.gridlocalization);\n                        }\n                      }\n                    }\n                  }\n\n                  A += \"<tr><td>\" + w + \"</td></tr>\";\n                }\n              }\n\n              A += \"</table>\";\n              return A;\n            };\n\n            var i = this.scrollfeedback ? this.scrollfeedback(g.bounddata) : r(g.bounddata);\n\n            if (i != this._scrollelementcontent) {\n              this._scrollelement[0].innerHTML = i;\n              this._scrollelementcontent = i;\n            }\n          }\n\n          this._scrollelement.css(\"visibility\", \"visible\");\n\n          this._scrollelementoverlay.css(\"visibility\", \"visible\");\n\n          this._scrollelement.css(\"margin-top\", -this._scrollelement.height() / 2);\n\n          this._scrolltimer = setInterval(function () {\n            if (!o.hScrollInstance.isScrolling() && !o.vScrollInstance.isScrolling()) {\n              l();\n\n              o._scrollelement.css(\"visibility\", \"hidden\");\n\n              o._scrollelementoverlay.css(\"visibility\", \"hidden\");\n\n              clearInterval(o._scrolltimer);\n\n              if (g) {\n                o.ensurerowvisible(g.visibleindex);\n              }\n            }\n          }, 100);\n          return;\n        }\n\n        if (navigator && navigator.userAgent.indexOf(\"Chrome\") == -1 && navigator.userAgent.indexOf(\"Safari\") != -1) {\n          this._updatedelay = 1;\n        }\n\n        if (this.touchDevice != undefined && this.touchDevice == true) {\n          this._updatedelay = 5;\n        }\n\n        var d = this._browser == undefined ? this._isIE10() : this._browser;\n\n        if (d || k) {\n          this._updatedelay = 5;\n        }\n\n        if (d && this.hScrollInstance.isScrolling()) {\n          l();\n          return;\n        }\n\n        if (b.jqx.browser.mozilla && this._updatedelay == 0 && (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling())) {\n          this._updatedelay = 0;\n        }\n\n        var h = this.isTouchDevice();\n\n        if (h) {\n          this._updatedelay = 0;\n        }\n\n        if (this.updatedelay != null) {\n          this._updatedelay = this.updatedelay;\n        }\n\n        if (this._updatedelay == 0) {\n          l();\n        } else {\n          var j = this._jqxgridrendertimer;\n\n          if (j != null) {\n            clearTimeout(j);\n          }\n\n          if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {\n            if (this._updatedelay) {\n              j = setTimeout(function () {\n                l();\n              }, this._updatedelay);\n            } else {\n              j = null;\n              l();\n            }\n\n            this._jqxgridrendertimer = j;\n          } else {\n            this._jqxgridrendertimer = j;\n            l();\n          }\n        }\n      }\n\n      if (o.autorowheight && !o.autoheight) {\n        if (this._pageviews.length > 0) {\n          var n = this._gettableheight();\n\n          var q = this._pageviews[0].height;\n\n          if (q > n) {\n            if (this.pageable && this.gotopage) {\n              q = this._pageviews[0].height;\n\n              if (q < 0) {\n                q = this._pageviews[0].height;\n              }\n            }\n\n            if (this.vScrollBar.css(\"visibility\") != \"visible\") {\n              this.vScrollBar.css(\"visibility\", \"visible\");\n            }\n\n            if (q <= n || this.autoheight) {\n              this.vScrollBar.css(\"visibility\", \"hidden\");\n            }\n\n            if (q - n > 0) {\n              if (this.scrollmode != \"deferred\") {\n                var s = q - n;\n                var u = this.vScrollInstance.max;\n                this.vScrollBar.jqxScrollBar({\n                  max: s\n                });\n\n                if (Math.round(s) != Math.round(u)) {\n                  var v = this.vScrollBar.jqxScrollBar(\"value\");\n\n                  if (v > s) {\n                    this.vScrollBar.jqxScrollBar({\n                      value: 0\n                    });\n                  }\n                }\n              }\n            } else {\n              this.vScrollBar.jqxScrollBar({\n                value: 0,\n                max: q\n              });\n            }\n          } else {\n            if (!this._loading) {\n              this.vScrollBar.css(\"visibility\", \"hidden\");\n            }\n\n            this.vScrollBar.jqxScrollBar({\n              value: 0\n            });\n          }\n\n          this._arrange();\n\n          if (this.virtualsizeinfo) {\n            this.virtualsizeinfo.virtualheight = q;\n          }\n        }\n      }\n    },\n    scrolling: function () {\n      var e = this.vScrollInstance.isScrolling();\n      var d = this.hScrollInstance.isScrolling();\n      return {\n        vertical: e,\n        horizontal: d\n      };\n    },\n    _renderhorizontalscroll: function () {\n      var t = this.hScrollInstance;\n      var u = t.value;\n\n      if (this.hScrollBar.css(\"visibility\") === \"hidden\") {\n        t.value = 0;\n        u = 0;\n      }\n\n      var k = parseInt(u);\n\n      if (this.table == null) {\n        return;\n      }\n\n      var q = this.table[0].rows.length;\n      var p = this.columnsrow;\n      var r = this.groupable && this.groups.length > 0 ? this.groups.length : 0;\n      var l = this.columns.records.length - r;\n      var f = this.columns.records;\n      var n = this.dataview.rows.length == 0;\n\n      if (this.rtl) {\n        if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n          k = t.max - k;\n        }\n      }\n\n      if (n && !this._haspinned) {\n        for (var w = 0; w < q; w++) {\n          var s = this.table[0].rows[w];\n\n          for (var v = 0; v < r + l; v++) {\n            var d = s.cells[v];\n\n            if (d != undefined) {\n              var g = f[v];\n\n              if (g.pinned) {\n                d.style.marginLeft = k + \"px\";\n\n                if (w == 0) {\n                  var e = p[0].cells[v];\n                  e.style.marginLeft = k + \"px\";\n                }\n              }\n            }\n          }\n        }\n\n        this.table[0].style.marginLeft = -k + \"px\";\n        p[0].style.marginLeft = -k + \"px\";\n      } else {\n        if (this._haspinned || this._haspinned == undefined) {\n          for (var w = 0; w < q; w++) {\n            var s = this.table[0].rows[w];\n\n            for (var v = 0; v < r + l; v++) {\n              var d = s.cells[v];\n\n              if (d != undefined) {\n                var g = f[v];\n\n                if (g.pinned) {\n                  if (k == 0 && d.style.marginLeft == \"\") {\n                    continue;\n                  }\n\n                  var h = null;\n                  var x = null;\n                  var o = null;\n\n                  if (this.showeverpresentrow && this.addnewrowtop) {\n                    if (this.addnewrowtop[0].cells) {\n                      o = this.addnewrowtop[0].cells[v];\n                    }\n                  }\n\n                  if (this.showfilterrow && this.filterrow) {\n                    if (this.filterrow[0].cells) {\n                      x = this.filterrow[0].cells[v];\n                    }\n                  }\n\n                  if (this.showaggregates) {\n                    if (this.statusbar[0].cells) {\n                      h = this.statusbar[0].cells[v];\n                    }\n                  }\n\n                  if (!this.rtl) {\n                    d.style.marginLeft = k + \"px\";\n\n                    if (w == 0) {\n                      var e = p[0].cells[v];\n                      e.style.marginLeft = k + \"px\";\n\n                      if (h) {\n                        h.style.marginLeft = k + \"px\";\n                      }\n\n                      if (x) {\n                        x.style.marginLeft = k + \"px\";\n                      }\n\n                      if (o) {\n                        o.style.marginLeft = k + \"px\";\n                      }\n                    }\n                  } else {\n                    d.style.marginLeft = -parseInt(u) + \"px\";\n\n                    if (w == 0) {\n                      var e = p[0].cells[v];\n                      e.style.marginLeft = -parseInt(u) + \"px\";\n\n                      if (h) {\n                        h.style.marginLeft = -parseInt(u) + \"px\";\n                      }\n\n                      if (x) {\n                        x.style.marginLeft = -parseInt(u) + \"px\";\n                      }\n\n                      if (o) {\n                        o.style.marginLeft = -parseInt(u) + \"px\";\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          this.table[0].style.marginLeft = -k + \"px\";\n          p[0].style.marginLeft = -k + \"px\";\n        } else {\n          if (this._haspinned == false) {\n            this.table[0].style.marginLeft = -k + \"px\";\n            p[0].style.marginLeft = -k + \"px\";\n          }\n        }\n      }\n\n      if (this.showaggregates) {\n        if (this.statusbar[0].cells) {\n          var m = 0;\n\n          if (this.rtl) {\n            if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n              if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n                m = 2 + parseInt(this.hScrollBar.css(\"left\"));\n              }\n            }\n          }\n\n          this.statusbar[0].style.marginLeft = -k + m + \"px\";\n        }\n      }\n\n      if (this.showfilterrow && this.filterrow) {\n        if (this.filterrow[0].cells) {\n          this.filterrow[0].style.marginLeft = -k + \"px\";\n        }\n      }\n\n      if (this.showeverpresentrow && this.addnewrowtop) {\n        if (this.addnewrowtop[0].cells) {\n          this.addnewrowtop[0].style.marginLeft = -k + \"px\";\n        }\n      }\n    },\n    _updaterowdetailsvisibility: function () {\n      if (this.rowdetails) {\n        for (var d = 0; d < this._rowdetailselementscache.length; d++) {\n          b(this._rowdetailselementscache[d]).css(\"display\", \"none\");\n        }\n      }\n    },\n    _getvisualcolumnsindexes: function (e, n, i, m, d, l) {\n      if (this.rowdetails || this.rtl || this.editcell || this.width && this.width.toString().indexOf(\"%\") >= 0 || this.exporting) {\n        return {\n          start: 0,\n          end: i + m\n        };\n      }\n\n      var f = 0;\n      var k = -1;\n      var g = i + m;\n      var o = false;\n\n      if (this.autorowheight) {\n        return {\n          start: 0,\n          end: i + m\n        };\n      }\n\n      if (!d) {\n        for (var h = 0; h < i + m; h++) {\n          var p = h;\n\n          if (!o) {\n            if (this.columns.records[h].pinned && l) {\n              o = true;\n            }\n          }\n\n          if (!this.columns.records[h].hidden && !this.columns.records[h].adaptivehidden) {\n            f += this.columns.records[h].width;\n          }\n\n          if (f >= e && k == -1) {\n            k = h;\n          }\n\n          if (f > n + e) {\n            g = h;\n            break;\n          }\n        }\n      }\n\n      g++;\n\n      if (g > i + m) {\n        g = i + m;\n      }\n\n      if (k == -1 || o) {\n        k = 0;\n      }\n\n      return {\n        start: k,\n        end: g\n      };\n    },\n    _getvirtualcolumnsindexes: function (e, m, i, l, d) {\n      if (this.rtl || this.editcell || this.exporting) {\n        return {\n          start: 0,\n          end: i + l\n        };\n      }\n\n      var f = 0;\n      var k = -1;\n      var g = i + l;\n\n      if (this.autorowheight) {\n        return {\n          start: 0,\n          end: i + l\n        };\n      }\n\n      if (!d) {\n        for (var h = 0; h < i + l; h++) {\n          var n = h;\n\n          if (!this.columns.records[h].hidden && !this.columns.records[h].adaptivehidden) {\n            f += this.columns.records[h].width;\n          }\n\n          if (f >= e && k == -1) {\n            k = h;\n          }\n\n          if (f > m + e) {\n            g = h;\n            break;\n          }\n        }\n      }\n\n      g++;\n\n      if (g > i + l) {\n        g = i + l;\n      }\n\n      if (k == -1) {\n        k = 0;\n      }\n\n      return {\n        start: k,\n        end: g\n      };\n    },\n    _getfirstvisualrow: function () {\n      var e = this.vScrollInstance;\n      var g = e.value;\n      var f = parseInt(g);\n\n      if (this._pagescache.length == 0) {\n        this.dataview.updateview();\n\n        this._loadrows();\n      }\n\n      if (this.vScrollBar[0].style.visibility != \"visible\") {\n        f = 0;\n      }\n\n      if (!this.pageable) {\n        var d = this._findvisiblerow(f, this._pageviews);\n\n        if (d == -1) {\n          return null;\n        }\n\n        if (d != this.dataview.pagenum) {\n          this.dataview.pagenum = d;\n          this.dataview.updateview();\n\n          this._loadrows();\n        } else {\n          if (!this._pagescache[this.dataview.pagenum]) {\n            this._loadrows();\n          }\n        }\n      }\n\n      var h = this._findvisiblerow(f, this._pagescache[this.dataview.pagenum]);\n\n      var i = this._pagescache[this.dataview.pagenum];\n\n      if (i && i[0]) {\n        return i[h];\n      }\n    },\n    _rendervisualrows: function () {\n      if (!this.virtualsizeinfo) {\n        return;\n      }\n\n      var Y = this.vScrollInstance;\n      var p = this.hScrollInstance;\n      var j = Y.value;\n      var C = p.value;\n      var o = parseInt(j);\n      var l = parseInt(C);\n\n      var x = this._gettableheight();\n\n      var J = this._hostwidth != undefined ? this._hostwidth : this.host.width();\n\n      if (this.hScrollBar[0].style.visibility == \"visible\") {\n        x += 29;\n      }\n\n      if (this.scrollmode == \"deferred\" && this._newmax != 0) {\n        if (o > this._newmax && this._newmax != null) {\n          o = this._newmax;\n        }\n      }\n\n      var al = Y.isScrolling() || p.isScrolling() || this._keydown;\n\n      var D = this.groupable && this.groups.length > 0;\n      this.visiblerows = new Array();\n      this.hittestinfo = new Array();\n\n      if (this.editcell && this.editrow == undefined) {\n        this._hidecelleditor(false);\n      }\n\n      if (this.editrow != undefined) {\n        this._hideeditors();\n      }\n\n      if (this.virtualmode && !this.pageable) {\n        this._pagescache = new Array();\n      }\n\n      if (this._pagescache.length == 0) {\n        this.dataview.updateview();\n\n        this._loadrows();\n      }\n\n      if (this.vScrollBar[0].style.visibility == \"hidden\") {\n        o = 0;\n      }\n\n      if (!this.pageable) {\n        var L = this._findvisiblerow(o, this._pageviews);\n\n        if (L == -1) {\n          this._clearvisualrows();\n\n          this._renderemptyrow();\n\n          this._updaterowdetailsvisibility();\n\n          return;\n        }\n\n        if (L != this.dataview.pagenum) {\n          this.dataview.pagenum = L;\n          this.dataview.updateview();\n\n          this._loadrows();\n        } else {\n          if (!this._pagescache[this.dataview.pagenum]) {\n            this._loadrows();\n          }\n        }\n      }\n\n      var an = this.groupable && this.groups.length > 0 ? this.groups.length : 0;\n\n      if (!this.columns.records) {\n        return;\n      }\n\n      var r = this.columns.records.length - an;\n\n      var ad = this._findvisiblerow(o, this._pagescache[this.dataview.pagenum]);\n\n      var M = this._pagescache[this.dataview.pagenum];\n      var S = ad;\n\n      if (S < 0) {\n        S = 0;\n      }\n\n      var ag = 0;\n      var ac = 0;\n      var Q = 0;\n      var e = 0;\n      var U = this.virtualsizeinfo.visiblerecords;\n      var P = this.groupable ? this.groups.length : 0;\n      var B = this.toTP(\"jqx-grid-cell\") + \" \" + this.toTP(\"jqx-item\");\n\n      if (this.rtl) {\n        B += \" \" + this.toTP(\"jqx-grid-cell-rtl\");\n      }\n\n      if ((this.autoheight || this.autorowheight) && this.pageable) {\n        if (!this.groupable || this.groupable && this.groups.length === 0) {\n          U = this.dataview.pagesize;\n        }\n      }\n\n      if (D) {\n        B = \" \" + this.toTP(\"jqx-grid-group-cell\");\n      }\n\n      if (this.isTouchDevice()) {\n        B += \" \" + this.toTP(\"jqx-touch\");\n      }\n\n      if (this.autorowheight) {\n        B += \" jqx-grid-cell-wrap\";\n      }\n\n      var O = this.rowsheight;\n      var G = S;\n      var am = this._rendercell;\n      var u = true;\n\n      var q = this._getvisualcolumnsindexes(l, J, an, r, D, true);\n\n      var d = q.start;\n      var ab = q.end;\n\n      var t = this._getvirtualcolumnsindexes(l, J, an, r, D);\n\n      var I = t.start;\n      var h = t.end;\n      var af = b.jqx.browser.msie && b.jqx.browser.version < 9;\n\n      if ((this.autoheight || this.pageable) && this.autorowheight) {\n        if (this._pageviews[0]) {\n          this._oldpageviewheight = this._pageviews[0].height;\n        }\n      }\n\n      if (this.autorowheight) {\n        S = 0;\n      }\n\n      if (S >= 0) {\n        this._updaterowdetailsvisibility();\n\n        this._startboundindex = M != null ? M[S].bounddata.boundindex : 0;\n        this._startvisibleindex = M != null ? M[S].bounddata.visibleindex : 0;\n        var A = this.table[0].rows;\n\n        if (this.columns.records.length > 10 && this.enablecolumnsvirtualization) {\n          var H = function (i) {\n            if (i.parentNode && i.parentNode.nodeName != \"#document-fragment\") {\n              return true;\n            }\n\n            return false;\n          };\n\n          for (var ah = 0; ah < A.length; ah++) {\n            var k = A[ah];\n\n            for (var V = 0; V < I; V++) {\n              var aj = V;\n\n              if (this.columns.records[aj].pinned) {\n                continue;\n              }\n\n              if (this.columns.records[aj].datafield == null) {\n                continue;\n              }\n\n              var ai = k.cells[aj];\n\n              if (H(ai)) {\n                ai.parentNode.removeChild(ai);\n              }\n\n              var R = this.columns.records[aj].element;\n              this.columns.records[aj]._rendered = false;\n\n              if (H(R)) {\n                this.columnsrow[0].removeChild(R);\n              }\n\n              if (this.filterrow) {\n                if (H(this.filterrow[0].cells[aj]) && this.columns.records[aj].filterable) {\n                  this.filterrow[0].cells[aj].parentNode.removeChild(this.filterrow[0].cells[aj]);\n                }\n              }\n            }\n\n            for (var V = h; V < this.columns.records.length; V++) {\n              var aj = V;\n\n              if (this.columns.records[aj].pinned) {\n                continue;\n              }\n\n              if (this.columns.records[aj].datafield == null) {\n                continue;\n              }\n\n              var ai = k.cells[aj];\n\n              if (H(ai)) {\n                ai.parentNode.removeChild(ai);\n              }\n\n              var R = this.columns.records[aj].element;\n              this.columns.records[aj]._rendered = false;\n\n              if (H(R)) {\n                this.columnsrow[0].removeChild(R);\n              }\n\n              if (this.filterrow) {\n                if (H(this.filterrow[0].cells[aj]) && this.columns.records[aj].filterable) {\n                  this.filterrow[0].cells[aj].parentNode.removeChild(this.filterrow[0].cells[aj]);\n                }\n              }\n            }\n\n            for (var V = I; V < h; V++) {\n              var aj = V;\n              var ai = k.cells[aj];\n\n              if (!H(ai)) {\n                k.appendChild(ai);\n              }\n\n              var R = this.columns.records[aj].element;\n              this.columns.records[aj]._rendered = true;\n\n              if (R.selectable) {\n                ai.removeAttribute(\"selected\");\n\n                if (R.selected) {\n                  ai.setAttribute(\"selected\", \"\");\n                }\n              }\n\n              if (!H(R)) {\n                this.columnsrow[0].appendChild(R);\n              }\n\n              if (this.filterrow && !H(this.filterrow[0].cells[aj]) && this.columns.records[aj].filterable) {\n                this.filterrow[0].firstChild.appendChild(this.filterrow[0].cells[aj]);\n              }\n            }\n          }\n        }\n\n        for (var n = 0; n < U && ac < U; n++) {\n          var ae = M != undefined ? M[S + n] : null;\n\n          if (this.virtualmode && n >= this.source.totalrecords) {\n            ae = null;\n          }\n\n          if (ae == null) {\n            S = -n;\n\n            if (this._pagescache[this.dataview.pagenum + 1]) {\n              M = this._pagescache[this.dataview.pagenum + 1];\n              this.dataview.pagenum++;\n            } else {\n              var s = this._pageviews.length;\n\n              do {\n                if (this.dataview.pagenum < this._pageviews.length - 1) {\n                  this.dataview.pagenum++;\n                  M = undefined;\n\n                  if (this._pageviews[this.dataview.pagenum].height > 0) {\n                    this.dataview.updateview();\n\n                    this._loadrows();\n\n                    M = this._pagescache[this.dataview.pagenum];\n                  }\n                } else {\n                  M = undefined;\n                  break;\n                }\n              } while (M == undefined && this.dataview.pagenum < s);\n            }\n\n            if (M != undefined) {\n              ae = M[S + n];\n            }\n          }\n\n          if (ae != null) {\n            if (ae.hidden) {\n              continue;\n            }\n\n            this._endboundindex = this._startboundindex + n;\n            this._endvisibleindex = this._startvisibleindex + n;\n\n            if (n == 0) {\n              var m = Math.abs(o - ae.top);\n              this.table[0].style.top = -m + \"px\";\n              e = -m;\n            }\n\n            var k = this.table[0].rows[ac];\n\n            if (!k) {\n              continue;\n            }\n\n            if (parseInt(k.style.height) != ae.height) {\n              k.style.height = parseInt(ae.height) + \"px\";\n            }\n\n            Q += ae.height;\n            var X = this.rowdetails && ae.rowdetails;\n            var w = !ae.rowdetailshidden;\n\n            if (X && w) {\n              k.style.height = parseInt(ae.height - ae.rowdetailsheight) + \"px\";\n              U++;\n            }\n\n            var K = this._isrowselected(u, ae);\n\n            for (var V = d; V < ab; V++) {\n              var aj = V;\n\n              this._rendervisualcell(am, B, K, X, w, D, P, k, ae, aj, ac, al);\n            }\n\n            if (ae.group != undefined && this._rendergroup) {\n              this._rendergroup(P, k, ae, an, r, ac, J);\n            }\n\n            if (this.autorowheight && (this.autoheight || this.pageable)) {\n              var O = this.rowsheight;\n\n              for (var V = d; V < ab; V++) {\n                if (this.editable && this.editcell && this.editcell.column == this.columns.records[V].datafield && this.editcell.row == this.getboundindex(ae)) {\n                  if (this.editcell.editor) {\n                    O = Math.max(O, this.editcell.editor.height());\n                    continue;\n                  }\n                }\n\n                if (k.cells[V].firstChild) {\n                  O = Math.max(O, 8 + parseInt(k.cells[V].firstChild.offsetHeight));\n                }\n              }\n\n              k.style.height = parseInt(O) + \"px\";\n              this.heights[this._startboundindex + n] = O;\n\n              if (X && w) {\n                O += ae.rowdetailsheight;\n              }\n\n              ae.height = O;\n            }\n\n            this.visiblerows[this.visiblerows.length] = ae;\n            this.hittestinfo[this.hittestinfo.length] = {\n              row: ae,\n              visualrow: k,\n              details: false\n            };\n\n            if (X && w) {\n              ac++;\n              var k = this.table[0].rows[ac];\n\n              this._renderrowdetails(B, k, ae, an, r, ac);\n\n              this.visiblerows[this.visiblerows.length] = ae;\n              this.hittestinfo[this.hittestinfo.length] = {\n                row: ae,\n                visualrow: k,\n                details: true\n              };\n            }\n\n            if (!this.autorowheight) {\n              if (Q + e >= x) {\n                break;\n              }\n            }\n          } else {\n            var aa = true;\n\n            this._clearvisualrow(l, D, ac, an, r);\n\n            if (Q + ag + e <= x) {\n              ag += O;\n            }\n          }\n\n          ac++;\n        }\n\n        this._horizontalvalue = l;\n\n        if (ag > 0) {\n          if (this.vScrollBar[0].style.visibility == \"visible\") {\n            var ak = parseInt(this.table.css(\"top\"));\n            var F = this._pageviews[this._pageviews.length - 1];\n            var v = Y.max;\n            var E = F.top + F.height - x;\n\n            if (this.hScrollBar.css(\"visibility\") == \"visible\") {\n              E += this.scrollbarsize + 20;\n            }\n\n            if (v != E && !this.autorowheight) {\n              if (E >= 0) {\n                if (this.scrollmode != \"deferred\") {\n                  Y.max = E;\n                  Y.setPosition(Y.max);\n                } else {\n                  if (this._newmax != E) {\n                    this._newmax = E;\n\n                    this._rendervisualrows();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if ((this.autoheight || this.pageable) && this.autorowheight) {\n        this._pagescache = new Array();\n        var W = 0;\n        var g = 0;\n\n        for (var ah = 0; ah < this.visiblerows.length; ah++) {\n          var z = this.visiblerows[ah];\n          z.top = W;\n          W += z.height;\n          g += z.height;\n          var X = this.rowdetails && z.rowdetails;\n          var w = !z.rowdetailshidden;\n          var k = this.table[0].rows[ah];\n\n          if (X && w) {\n            ah++;\n          }\n\n          for (var V = d; V < ab; V++) {\n            var Z = this.columns.records[V];\n\n            if (!Z.hidden && !Z.adaptivehidden) {\n              if (!Z.cellsrenderer) {\n                var N = k.cells[V];\n                var f = 0;\n\n                if (N.firstChild) {\n                  var f = (z.height - parseInt(N.firstChild.offsetHeight) - 8) / 2;\n\n                  if (X && w) {\n                    var f = (z.height - z.rowdetailsheight - b(N.firstChild).height() - 8) / 2;\n                  }\n                } else {\n                  var f = (z.height - parseInt(b(N).height()) - 8) / 2;\n                }\n\n                if (f >= 0) {\n                  f = parseInt(f) + 4;\n\n                  if (N.firstChild) {\n                    if (N.firstChild.className.indexOf(\"jqx-grid-groups-row\") == -1) {\n                      if (Z.columntype != \"checkbox\" && Z.columntype != \"button\") {\n                        if (this.editable && this.editcell && this.editcell.column == Z.datafield && this.editcell.row == this.getboundindex(z)) {\n                          continue;\n                        }\n\n                        N.firstChild.style.marginTop = f + \"px\";\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (this._pageviews[0]) {\n          this._pageviews[0].height = g;\n        }\n\n        this._arrange();\n      }\n\n      this._renderemptyrow();\n\n      if (this.toCompile && this.toCompile.length > 0) {\n        var T = this;\n        b.each(T.toCompile, function (y, ao) {\n          if (this.compiled) {\n            return true;\n          }\n\n          var i = this.cell;\n\n          if (!i) {\n            return true;\n          }\n\n          if (b.jqx.angularCompile) {\n            b.jqx.angularCompile(i, \"<div>\" + this.value + \"</div>\");\n          }\n\n          this.compiled = true;\n        });\n      }\n    },\n    _hideemptyrow: function () {\n      if (!this.showemptyrow) {\n        return;\n      }\n\n      if (!this.table) {\n        return;\n      }\n\n      if (!this.table[0].rows) {\n        return;\n      }\n\n      var f = this.table[0].rows[0];\n\n      if (!f) {\n        return;\n      }\n\n      var g = false;\n\n      for (var e = 0; e < f.cells.length; e++) {\n        var d = b(f.cells[e]);\n\n        if (d.css(\"display\") != \"none\" && !g) {\n          if (d.width() == this.host.width() || d.text() == this.gridlocalization.emptydatastring) {\n            d[0].checkbox = null;\n            d[0].button = null;\n            g = true;\n            d[0].innerHTML = \"\";\n          }\n        }\n      }\n    },\n    _renderemptyrow: function () {\n      if (this._loading) {\n        return;\n      }\n\n      if (this.dataview.records.length == 0 && this.showemptyrow) {\n        var l = false;\n        var e = this.toTP(\"jqx-grid-cell\");\n\n        if (this.table && this.table.length > 0 && this.table[0].rows && this.table[0].rows.length > 0) {\n          var k = this.table[0].rows[0];\n          this.table[0].style.top = \"0px\";\n\n          for (var f = 0; f < k.cells.length; f++) {\n            var d = b(k.cells[f]);\n\n            if (d.css(\"display\") != \"none\" && !l) {\n              d[0].checkbox = null;\n              d[0].button = null;\n              d[0].className = e;\n              l = true;\n              d[0].innerHTML = \"\";\n              var g = b(\"<span style='white-space: nowrap; float: left; margin-left: 50%; position: relative;'></span>\");\n              g.text(this.gridlocalization.emptydatastring);\n              d.append(g);\n              var j = 0;\n\n              if (!this.oldhscroll) {\n                j = parseInt(this.table[0].style.marginLeft);\n\n                if (this.rtl) {\n                  d.css(\"z-index\", 999);\n                  d.css(\"overflow\", \"visible\");\n                }\n              }\n\n              g.css(\"left\", -j - g.width() / 2);\n              g.css(\"top\", this._gettableheight() / 2 - g.height() / 2);\n\n              if (b.jqx.browser.msie && b.jqx.browser.version < 8) {\n                g.css(\"margin-left\", \"0px\");\n                g.css(\"left\", this.host.width() / 2 - g.width() / 2);\n              }\n\n              var h = Math.abs(parseInt(this.table[0].style.top));\n\n              if (isNaN(h)) {\n                h = 0;\n              }\n\n              b(k).height(this._gettableheight() + h);\n              d.css(\"margin-left\", \"0px\");\n              d.width(this.host.width());\n\n              if (this.table.width() < this.host.width()) {\n                this.table.width(this.host.width());\n              }\n            }\n\n            d.addClass(this.toThemeProperty(\"jqx-grid-empty-cell\"));\n          }\n        }\n      }\n    },\n    _clearvisualrows: function () {\n      var e = this.virtualsizeinfo.visiblerecords;\n      var f = this.hScrollInstance;\n      var d = f.value;\n      var g = parseInt(d);\n      var i = this.groupable && this.groups.length > 0;\n\n      if (!this.columns.records) {\n        return;\n      }\n\n      for (var h = 0; h < e; h++) {\n        this._clearvisualrow(g, i, h, 0, this.columns.records.length);\n      }\n    },\n    _iscellselected: function (j, i, g) {\n      var f = false;\n      var e = 0;\n\n      if (this.virtualmode && this.pageable && this.groupable) {\n        if (this.groups.length > 0) {\n          e = this.dataview.pagesize * this.dataview.pagenum;\n        }\n      }\n\n      if (this.groups.length > 0 && this.pageable && this.groupable) {\n        var d = this.getrowboundindexbyid(i.bounddata.uid);\n\n        if (d != -1) {\n          for (var h in this.selectedcells) {\n            if (h == d + \"_\" + g) {\n              f = true;\n            }\n          }\n\n          return f;\n        }\n\n        return false;\n      }\n\n      if (j && i.bounddata != null) {\n        if (this.selectionmode != \"singlerow\") {\n          if (this.dataview.filters.length > 0) {\n            if (!this.virtualmode && i.bounddata.dataindex != undefined) {\n              for (var h in this.selectedcells) {\n                if (h == e + i.bounddata.dataindex + \"_\" + g) {\n                  f = true;\n                }\n              }\n            } else {\n              for (var h in this.selectedcells) {\n                if (h == e + i.bounddata.boundindex + \"_\" + g) {\n                  f = true;\n                }\n              }\n            }\n          } else {\n            for (var h in this.selectedcells) {\n              if (h == e + i.bounddata.boundindex + \"_\" + g) {\n                f = true;\n                break;\n              }\n            }\n          }\n        } else {\n          if (this.dataview.filters.length > 0) {\n            if (!this.virtualmode && i.bounddata.dataindex != undefined) {\n              for (var h in this.selectedcells) {\n                if (h == e + i.bounddata.dataindex + \"_\" + g) {\n                  f = true;\n                  break;\n                }\n              }\n            } else {\n              for (var h in this.selectedcells) {\n                if (h == e + i.bounddata.boundindex + \"_\" + g) {\n                  f = true;\n                  break;\n                }\n              }\n            }\n          } else {\n            for (var h in this.selectedcells) {\n              if (h == e + i.bounddata.boundindex == this.selectedrowindex) {\n                f = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      return f;\n    },\n    _isrowselected: function (h, g) {\n      var f = false;\n      var e = 0;\n\n      if (this.virtualmode && this.pageable && this.groupable) {\n        if (this.groups.length > 0) {\n          e = this.dataview.pagesize * this.dataview.pagenum;\n        }\n      }\n\n      if (this.groupable && this.groups.length > 0 && this.pageable) {\n        var d = this.getrowboundindexbyid(g.bounddata.uid);\n\n        if (d == undefined || d == -1) {\n          return false;\n        }\n\n        if (this.selectedrowindexes.indexOf(d) != -1) {\n          f = true;\n        }\n\n        if (!f) {\n          f = d == this.selectedrowindex && this.selectedrowindex != -1;\n        }\n\n        return f;\n      }\n\n      if (h && g.bounddata != null) {\n        if (this.selectionmode != \"singlerow\") {\n          if (this.dataview.filters.length > 0) {\n            if (!this.virtualmode && g.bounddata.dataindex != undefined) {\n              if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) {\n                f = true;\n              }\n            } else {\n              if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) {\n                f = true;\n              }\n            }\n          } else {\n            if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) {\n              f = true;\n            }\n          }\n        } else {\n          if (this.dataview.filters.length > 0) {\n            if (!this.virtualmode && g.bounddata.dataindex != undefined) {\n              if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) {\n                f = true;\n              }\n            } else {\n              if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) {\n                f = true;\n              }\n            }\n          } else {\n            if (e + g.bounddata.boundindex == this.selectedrowindex) {\n              f = true;\n            }\n          }\n        }\n      }\n\n      return f;\n    },\n    _rendervisualcell: function (D, j, s, l, x, B, k, t, d, i, w, q) {\n      var f = null;\n      var g = this.columns.records[i];\n\n      if (g.hidden || g.adaptivehidden) {\n        var e = t.cells[i];\n        e.innerHTML = \"\";\n        return;\n      }\n\n      var o = this._getcellvalue(g, d);\n\n      var e = t.cells[i];\n      var A = j;\n\n      if (this.selectionmode.indexOf(\"cell\") != -1) {\n        if (this.dataview.filters.length > 0) {\n          if (this.selectedcells[d.bounddata.dataindex + \"_\" + g.datafield]) {\n            s = true;\n          } else {\n            s = false;\n          }\n        } else {\n          if (this.selectedcells[d.boundindex + \"_\" + g.datafield]) {\n            s = true;\n          } else {\n            s = false;\n          }\n        }\n\n        if (this.editcell) {\n          if (this.editcell.row === d.boundindex && this.editcell.column === g.datafield) {\n            if (g.columntype !== \"checkbox\") {\n              s = false;\n            }\n          }\n        }\n\n        if (this.virtualmode || this.groupable && this.groups.length > 0 && this.pageable) {\n          s = this._iscellselected(true, d, g.datafield);\n        }\n      }\n\n      if (g.cellclassname != \"\" && g.cellclassname) {\n        if (typeof g.cellclassname == \"string\") {\n          A += \" \" + g.cellclassname;\n        } else {\n          var p = g.cellclassname(this.getboundindex(d), g.datafield, o, d.bounddata);\n\n          if (p) {\n            A += \" \" + p;\n          }\n        }\n      }\n\n      var r = this.showsortcolumnbackground && this.sortcolumn && g.displayfield == this.sortcolumn;\n\n      if (this.sortmode === \"many\" && this.showsortcolumnbackground) {\n        var h = this.getsortcolumns();\n\n        for (var v = 0; v < h.length; v++) {\n          if (g.displayfield === h[v].dataField) {\n            r = true;\n          }\n        }\n      }\n\n      if (r) {\n        A += \" \" + this.toTP(\"jqx-grid-cell-sort\");\n      }\n\n      if (g.filter && this.showfiltercolumnbackground) {\n        A += \" \" + this.toTP(\"jqx-grid-cell-filter\");\n      }\n\n      if (d.bounddata.totalsrow) {\n        A += \" \" + this.toTP(\"jqx-grid-cell-pinned\");\n      }\n\n      if (g.pinned && this.showpinnedcolumnbackground || g.grouped) {\n        if (B) {\n          if (!d.bounddata.totalsrow) {\n            A += \" \" + this.toTP(\"jqx-grid-cell-pinned\");\n          } else {}\n        } else {\n          A += \" \" + this.toTP(\"jqx-grid-cell-pinned\");\n        }\n      }\n\n      if (this.altrows && d.group == undefined) {\n        var C = d.visibleindex;\n\n        if (C >= this.altstart) {\n          if ((this.altstart + C) % (1 + this.altstep) == 0) {\n            if (!r) {\n              A += \" \" + this.toTP(\"jqx-grid-cell-alt\");\n            } else {\n              A += \" \" + this.toTP(\"jqx-grid-cell-sort-alt\");\n            }\n\n            if (g.filter && this.showfiltercolumnbackground) {\n              A += \" \" + this.toTP(\"jqx-grid-cell-filter-alt\");\n            }\n\n            if (g.pinned && this.showpinnedcolumnbackground) {\n              A += \" \" + this.toTP(\"jqx-grid-cell-pinned-alt\");\n            }\n          }\n        }\n      }\n\n      if (i <= k) {\n        if (B || this.rowdetails || this.pageable && this.virtualmode) {\n          var y = b(e);\n          var n = this.columns.records[i].width;\n\n          if (e.style.width != parseInt(n) + \"px\") {\n            y.width(n);\n          }\n        }\n      } else {\n        if (B || this.rowdetails) {\n          if (this._hiddencolumns) {\n            var y = b(e);\n            var n = this.columns.records[i].width;\n\n            if (parseInt(e.style.width) != n) {\n              y.width(n);\n            }\n          }\n        }\n      }\n\n      var z = true;\n\n      if (this.rowdetails && l) {\n        if (x && !B) {\n          A += \" \" + this.toTP(\"jqx-grid-details-cell\");\n        } else {\n          if (B) {\n            A += \" \" + this.toTP(\"jqx-grid-group-details-cell\");\n          }\n        }\n\n        if (this.showrowdetailscolumn) {\n          if (!this.rtl) {\n            if (d.group == undefined && i == k && !d.bounddata.totalsrow) {\n              var u = this.toThemeProperty(\"jqx-icon-arrow-down\");\n\n              if (x) {\n                A += \" \" + this.toTP(\"jqx-grid-group-expand\");\n                A += \" \" + u;\n              } else {\n                A += \" \" + this.toTP(\"jqx-grid-group-collapse\");\n                var u = this.toThemeProperty(\"jqx-icon-arrow-right\");\n                A += \" \" + u;\n              }\n\n              z = false;\n              e.title = \"\";\n              e.innerHTML = \"\";\n\n              if (e.className != A) {\n                e.className = A;\n              }\n\n              return;\n            }\n          } else {\n            if (d.group == undefined && i == t.cells.length - k - 1) {\n              var u = this.toThemeProperty(\"jqx-icon-arrow-down\");\n\n              if (x) {\n                A += \" \" + this.toTP(\"jqx-grid-group-expand-rtl\");\n                A += \" \" + u;\n              } else {\n                A += \" \" + this.toTP(\"jqx-grid-group-collapse-rtl\");\n                var u = this.toThemeProperty(\"jqx-icon-arrow-left\");\n                A += \" \" + u;\n              }\n\n              z = false;\n              e.title = \"\";\n              e.innerHTML = \"\";\n\n              if (e.className != A) {\n                e.className = A;\n              }\n\n              return;\n            }\n          }\n        }\n      }\n\n      if (s && z && i >= k) {\n        A += \" \" + this.toTP(\"jqx-grid-cell-selected\");\n        A += \" \" + this.toTP(\"jqx-fill-state-pressed\");\n      }\n\n      if (e.className != A) {\n        e.className = A;\n      }\n\n      g._applyCellStyle(e);\n\n      if (d.group != undefined) {\n        o = \"\";\n        e.title = \"\";\n        e.innerHTML = \"\";\n        return;\n      }\n\n      D(this, g, d, o, e, q);\n    },\n    _rendercell: function (v, f, k, t, d, r) {\n      var g = t + \"_\" + f.visibleindex;\n\n      if (f.columntype == \"number\" || f.cellsrenderer != null) {\n        var g = k.uniqueid + \"_\" + f.visibleindex;\n      }\n\n      if (f.columntype == \"number\") {\n        t = k.visibleindex;\n      }\n\n      if (f.columntype === \"adaptive\") {\n        t = \"...\";\n      }\n\n      f._applyCellStyle(d);\n\n      if (v.showrowlines) {\n        d.style.borderBottomColor = \"\";\n      } else {\n        d.style.borderBottomColor = \"transparent\";\n      }\n\n      if (v.showcolumnheaderlines) {\n        f.element.style.borderRightColor = \"\";\n        f.element.style.boxShadow = \"\";\n      } else {\n        f.element.style.borderRightColor = \"transparent\";\n        f.element.style.boxShadow = \"none\";\n      }\n\n      if (v.showcolumnlines) {\n        d.style.borderRightColor = \"\";\n      } else {\n        d.style.borderRightColor = \"transparent\";\n      }\n\n      if (v.editcell && v.editrow == undefined) {\n        if (v.editmode == \"selectedrow\" && f.editable && v.editable) {\n          if (v.editcell.row == v.getboundindex(k)) {\n            if (v._showcelleditor) {\n              if (!v.hScrollInstance.isScrolling() && !v.vScrollInstance.isScrolling()) {\n                v._showcelleditor(v.editcell.row, f, d, v.editcell.init);\n              } else {\n                v._showcelleditor(v.editcell.row, f, d, false, false);\n              }\n\n              d.className += \" \" + v.toTP(\"jqx-grid-cell-edit\");\n              return;\n            }\n          }\n        } else {\n          if (v.editcell.row == v.getboundindex(k) && v.editcell.column == f.datafield) {\n            v.editcell.element = d;\n\n            if (v.editcell.editing) {\n              if (v._showcelleditor) {\n                if (!v.hScrollInstance.isScrolling() && !v.vScrollInstance.isScrolling()) {\n                  v._showcelleditor(v.editcell.row, f, v.editcell.element, v.editcell.init);\n                } else {\n                  v._showcelleditor(v.editcell.row, f, v.editcell.element, v.editcell.init, false);\n                }\n\n                d.className += \" \" + v.toTP(\"jqx-grid-cell-edit\");\n                return;\n              }\n            }\n          }\n        }\n      }\n\n      var s = v._defaultcellsrenderer(t, f);\n\n      var o = v._cellscache[g];\n\n      if (o) {\n        if (f.columntype == \"checkbox\") {\n          if (v.host.jqxCheckBox) {\n            if (t === \"\") {\n              t = null;\n            }\n\n            var n = d.innerHTML.toString().length == 0;\n\n            if (d.checkbox && !v.groupable && !n) {\n              d.checkboxrow = v.getboundindex(k);\n\n              if (t == \"\") {\n                t = false;\n              }\n\n              if (t == \"1\") {\n                t = true;\n              }\n\n              if (t == \"0\") {\n                t = false;\n              }\n\n              if (t == 1) {\n                t = true;\n              }\n\n              if (t == 0) {\n                t = false;\n              }\n\n              if (t == \"true\") {\n                t = true;\n              }\n\n              if (t == \"false\") {\n                t = false;\n              }\n\n              if (t == null && !f.threestatecheckbox) {\n                t = false;\n              }\n\n              if (f.checkboxcolumn) {\n                t = false;\n\n                if (v.dataview.filters.length > 0 && !v.virtualmode && k.bounddata.dataindex != undefined) {\n                  if (v.selectedrowindexes.indexOf(k.bounddata.dataindex) != -1) {\n                    t = true;\n                  }\n                } else {\n                  if (v.selectedrowindexes.indexOf(k.bounddata.boundindex) != -1) {\n                    t = true;\n                  }\n                }\n              }\n\n              if (!v.disabled) {\n                if (d.checkboxinstance) {\n                  d.checkboxinstance._setState(t);\n                } else {\n                  d.checkbox.jqxCheckBox(\"_setState\", t);\n                }\n              }\n            } else {\n              v._rendercheckboxcell(v, d, f, k, t);\n            }\n\n            if (f.cellsrenderer != null) {\n              var h = f.cellsrenderer(v.getboundindex(k), f.datafield, t, s, f.getcolumnproperties(), k.bounddata);\n\n              if (h != undefined) {\n                d.innerHTML = h;\n              }\n            }\n\n            return;\n          }\n        } else {\n          if (f.columntype == \"button\") {\n            if (v.host.jqxButton) {\n              if (t == \"\") {\n                t = false;\n              }\n\n              if (f.cellsrenderer != null) {\n                t = f.cellsrenderer(v.getboundindex(k), f.datafield, t, s, f.getcolumnproperties(), k.bounddata);\n              }\n\n              if (d.innerHTML == \"\") {\n                d.buttonrow = v.getboundindex(k);\n                d.button = null;\n\n                v._renderbuttoncell(v, d, f, k, t);\n              }\n\n              if (d.button && !v.groupable) {\n                d.buttonrow = v.getboundindex(k);\n                d.button.val(t);\n              } else {\n                v._renderbuttoncell(v, d, f, k, t);\n              }\n\n              return;\n            }\n          }\n        }\n\n        if (f.createwidget) {\n          if (d.innerHTML == \"\") {\n            d.widgetrow = v.getboundindex(k);\n            d.widget = null;\n            f.widget = null;\n\n            v._renderwidgetcell(v, d, f, k, t);\n          }\n\n          if (d.widget && !v.groupable) {\n            d.widgetrow = v.getboundindex(k);\n\n            if (f.initwidget) {\n              f.initwidget(v.getboundindex(k), f.datafield, t, d.firstChild);\n            } else {\n              throw new Error(\"jqxGrid: 'initwidget' column function is not implemented. Please, implement 'initwidget'\");\n            }\n          } else {\n            v._renderwidgetcell(v, d, f, k, t);\n          }\n\n          return;\n        }\n\n        var u = o.element;\n\n        if (f.cellsrenderer != null || d.childNodes && d.childNodes.length == 0 || v.groupable || v.rowdetails) {\n          if (d.innerHTML != u) {\n            d.innerHTML = u;\n          }\n        } else {\n          if (d.innerHTML.indexOf(\"editor\") >= 0) {\n            d.innerHTML = u;\n          } else {\n            if (r) {\n              var p = u.indexOf(\">\");\n              var m = u.indexOf(\"</\");\n              var q = u.substring(p + 1, m);\n              var i = d.childNodes[0];\n\n              if (q.indexOf(\">\") >= 0) {\n                d.innerHTML = u;\n              } else {\n                if (i.childNodes[0]) {\n                  if (q != i.childNodes[0].nodeValue) {\n                    if (q.indexOf(\"&\") >= 0) {\n                      d.innerHTML = u;\n                    } else {\n                      i.childNodes[0].nodeValue = q;\n                    }\n                  }\n                } else {\n                  var e = document.createTextNode(q);\n                  i.appendChild(e);\n                }\n              }\n            } else {\n              if (d.innerHTML != u) {\n                d.innerHTML = u;\n              }\n            }\n          }\n        }\n\n        if (v.enabletooltips && f.enabletooltips) {\n          d.title = o.title;\n        }\n\n        return;\n      }\n\n      if (f.columntype == \"checkbox\") {\n        v._rendercheckboxcell(v, d, f, k, t);\n\n        v._cellscache[g] = {\n          element: \"\",\n          title: t\n        };\n\n        if (v.enabletooltips && f.enabletooltips) {\n          d.title = \"\" + t;\n        }\n\n        return;\n      } else {\n        if (f.columntype == \"button\") {\n          if (f.cellsrenderer != null) {\n            t = f.cellsrenderer(v.getboundindex(k), f.datafield, t, s, f.getcolumnproperties(), k.bounddata);\n          }\n\n          v._renderbuttoncell(v, d, f, k, t);\n\n          v._cellscache[g] = {\n            element: \"\",\n            title: t\n          };\n\n          if (v.enabletooltips && f.enabletooltips) {\n            d.title = \"\" + t;\n          }\n\n          return;\n        } else {\n          if (f.columntype == \"number\") {\n            t = k.visibleindex;\n          }\n        }\n      }\n\n      if (f.createwidget) {\n        if (f.cellsrenderer != null) {\n          t = f.cellsrenderer(v.getboundindex(k), f.datafield, t, s, f.getcolumnproperties(), k.bounddata);\n        }\n\n        v._renderwidgetcell(v, d, f, k, t);\n\n        v._cellscache[g] = {\n          element: \"\",\n          title: t\n        };\n\n        if (v.enabletooltips && f.enabletooltips) {\n          d.title = t;\n        }\n\n        return;\n      }\n\n      var u = null;\n\n      if (f.cellsrenderer != null) {\n        u = f.cellsrenderer(v.getboundindex(k), f.datafield, t, s, f.getcolumnproperties(), k.bounddata);\n\n        if (u && (u.indexOf(\"<jqx-\") >= 0 || u.indexOf(\" ng-\") >= 0)) {\n          if (v.toCompile) {\n            v.toCompile.push({\n              cell: d,\n              value: u,\n              row: v.getboundindex(k)\n            });\n          }\n\n          return;\n        }\n      } else {\n        u = s;\n      }\n\n      if (u == null) {\n        u = s;\n      }\n\n      var l = t;\n\n      if (v.enabletooltips && f.enabletooltips) {\n        if (f.cellsformat != \"\") {\n          if (b.jqx.dataFormat) {\n            if (b.jqx.dataFormat.isDate(t)) {\n              l = b.jqx.dataFormat.formatdate(l, f.cellsformat, v.gridlocalization);\n            } else {\n              if (b.jqx.dataFormat.isNumber(t)) {\n                l = b.jqx.dataFormat.formatnumber(l, f.cellsformat, v.gridlocalization);\n              }\n            }\n          }\n        }\n\n        d.title = l;\n      }\n\n      if (v.WinJS) {\n        b(d).html(u);\n      } else {\n        var j = d.innerHTML;\n\n        if (j.indexOf(\"editor\") >= 0 || f.cellsrenderer != null || v.groupable || v.virtualmode) {\n          d.innerHTML = u;\n        } else {\n          if (j.length > 0) {\n            var p = u.indexOf(\">\");\n            var m = u.indexOf(\"</\");\n            var q = u.substring(p + 1, m);\n            var i = d.childNodes[0];\n\n            if (q.indexOf(\">\") >= 0) {\n              d.innerHTML = u;\n            } else {\n              if (i.childNodes[0]) {\n                if (q != i.childNodes[0].nodeValue) {\n                  if (q.indexOf(\"&\") >= 0 || j.indexOf(\"span\") >= 0) {\n                    d.innerHTML = u;\n                  } else {\n                    i.childNodes[0].nodeValue = q;\n                  }\n                }\n              } else {\n                var e = document.createTextNode(q);\n                i.appendChild(e);\n              }\n            }\n          } else {\n            if (j != u) {\n              d.innerHTML = u;\n            }\n          }\n        }\n      }\n\n      v._cellscache[g] = {\n        element: d.innerHTML,\n        title: l\n      };\n      return true;\n    },\n    _isIE10: function () {\n      if (this._browser == undefined) {\n        var e = b.jqx.utilities.getBrowser();\n\n        if (e.browser == \"msie\" && parseInt(e.version) > 9) {\n          this._browser = true;\n        } else {\n          this._browser = false;\n\n          if (e.browser == \"msie\") {\n            var d = \"Browser CodeName: \" + navigator.appCodeName + \"\";\n            d += \"Browser Name: \" + navigator.appName + \"\";\n            d += \"Browser Version: \" + navigator.appVersion + \"\";\n            d += \"Platform: \" + navigator.platform + \"\";\n            d += \"User-agent header: \" + navigator.userAgent + \"\";\n\n            if (d.indexOf(\"Zune 4.7\") != -1) {\n              this._browser = true;\n            }\n          }\n        }\n      }\n\n      return this._browser;\n    },\n    _renderinlinecell: function (f, d, e, i, g) {\n      var h = b(d);\n      d.innerHTML = '<div style=\"position: absolute;\"></div>';\n    },\n    _rendercheckboxcell: function (g, e, f, k, h) {\n      if (g.host.jqxCheckBox) {\n        var j = b(e);\n\n        if (h === \"\") {\n          if (f.threestatecheckbox) {\n            h = null;\n          } else {\n            h = false;\n          }\n        }\n\n        if (h === null && !f.threestatecheckbox) {\n          h = false;\n        }\n\n        if (h == \"1\") {\n          h = true;\n        }\n\n        if (h == \"0\") {\n          h = false;\n        }\n\n        if (h == 1) {\n          h = true;\n        }\n\n        if (h == 0) {\n          h = false;\n        }\n\n        if (h == \"true\") {\n          h = true;\n        }\n\n        if (h == \"false\") {\n          h = false;\n        }\n\n        if (f.checkboxcolumn) {\n          h = false;\n          var d = this.getboundindex(k);\n\n          if (this.selectedrowindexes.indexOf(d) != -1) {\n            h = true;\n          }\n        }\n\n        if (j.find(\".jqx-checkbox\").length == 0) {\n          e.innerHTML = '<div style=\"position: absolute; top: 50%; left: 50%; margin-top: -9px; margin-left: -12px;\"></div>';\n          b(e.firstChild).jqxCheckBox({\n            disabled: g.disabled,\n            _canFocus: false,\n            hasInput: false,\n            hasThreeStates: f.threestatecheckbox,\n            enableContainerClick: false,\n            animationShowDelay: 0,\n            animationHideDelay: 0,\n            locked: true,\n            theme: g.theme,\n            checked: h\n          });\n\n          if (this.enabletooltips && f.enabletooltips) {\n            e.title = \"\" + h;\n          }\n\n          if (this.editable && f.editable) {\n            b(e.firstChild).jqxCheckBox({\n              locked: false\n            });\n          }\n\n          if (f.checkboxcolumn) {\n            b(e.firstChild).jqxCheckBox({\n              locked: false\n            });\n          }\n\n          e.checkbox = b(e.firstChild);\n          e.checkboxinstance = e.checkbox.data().jqxCheckBox.instance;\n          e.checkboxrow = this.getboundindex(k);\n          var i = b.data(e.firstChild, \"jqxCheckBox\").instance;\n\n          i.updated = function (l, s, m) {\n            if (g.disabled) {\n              s = m;\n              var p = g.table[0].rows.length;\n\n              var r = g._getcolumnindex(f.datafield);\n\n              for (var o = 0; o < p; o++) {\n                var n = g.table[0].rows[o].cells[r].firstChild;\n\n                if (n) {\n                  b(n).jqxCheckBox({\n                    disabled: g.disabled\n                  });\n                }\n              }\n            }\n\n            if (f.editable && !g.disabled) {\n              var p = g.table[0].rows.length;\n\n              var r = g._getcolumnindex(f.datafield);\n\n              if (g.editrow == undefined) {\n                if (f.cellbeginedit) {\n                  var u = f.cellbeginedit(e.checkboxrow, f.datafield, f.columntype, !s);\n\n                  if (u == false) {\n                    g.setcellvalue(e.checkboxrow, f.datafield, !s, true);\n                    return;\n                  }\n                }\n\n                if (f.cellvaluechanging) {\n                  var t = f.cellvaluechanging(e.checkboxrow, f.datafield, f.columntype, m, s);\n\n                  if (t != undefined) {\n                    s = t;\n                  }\n                }\n\n                if (g.editmode !== \"selectedrow\") {\n                  for (var o = 0; o < p; o++) {\n                    var n = g.table[0].rows[o].cells[r].firstChild;\n\n                    if (n) {\n                      b(n).jqxCheckBox(\"destroy\");\n                    }\n                  }\n                }\n\n                if (g.editcell && g.editcell.validated == false) {\n                  g.setcellvalue(e.checkboxrow, f.datafield, !s, true);\n                } else {\n                  if (g.editmode !== \"selectedrow\" || g.editcell == null) {\n                    var q = g.getrowdata(e.checkboxrow);\n\n                    g._raiseEvent(17, {\n                      rowindex: e.checkboxrow,\n                      row: q,\n                      datafield: f.datafield,\n                      value: m,\n                      columntype: f.columntype\n                    });\n\n                    g.setcellvalue(e.checkboxrow, f.datafield, s, true);\n\n                    g._raiseEvent(18, {\n                      rowindex: e.checkboxrow,\n                      row: q,\n                      datafield: f.datafield,\n                      oldvalue: m,\n                      value: s,\n                      columntype: f.columntype\n                    });\n                  } else {\n                    g.setcellvalue(e.checkboxrow, f.datafield, s, false, false);\n                  }\n                }\n\n                if (f.cellendedit) {\n                  f.cellendedit(e.checkboxrow, f.datafield, f.columntype, s);\n                }\n              }\n            } else {\n              if (f.checkboxcolumn) {\n                if (g.editcell) {\n                  g.endcelledit(g.editcell.row, g.editcell.column, false, true);\n                }\n\n                if (!g.disabled) {\n                  if (s) {\n                    g.selectrow(e.checkboxrow);\n                  } else {\n                    g.unselectrow(e.checkboxrow);\n                  }\n\n                  if (g.autosavestate) {\n                    if (g.savestate) {\n                      g.savestate();\n                    }\n                  }\n                }\n              }\n            }\n          };\n        } else {\n          e.checkboxrow = this.getboundindex(k);\n          b(e.firstChild).jqxCheckBox(\"_setState\", h, !(this.editable && f.editable) && !f.checkboxcolumn);\n        }\n      }\n    },\n    _renderwidgetcell: function (f, d, e, i, g) {\n      var h = b(d);\n\n      if (h.find(\".jqx-grid-widget\").length == 0) {\n        var j = '<div class=\"jqx-grid-widget\" style=\"opacity: 0.99; position: absolute; width: 100%; height:100%; top: 0%; left: 0%; padding: 0px;\"></div>';\n        d.innerHTML = j;\n        e.createwidget(i, e.datafield, g, d.firstChild);\n        b(d.firstChild).attr(\"hideFocus\", \"true\");\n        b(d.firstChild).children().addClass(\"jqx-grid-widget\");\n        d.widget = b(d.firstChild);\n        d.widgetrow = f.getboundindex(i);\n        e.widget = b(d.firstChild);\n      } else {\n        e.initwidget(f.getboundindex(i), e.datafield, g, d.firstChild);\n        d.widgetrow = f.getboundindex(i);\n        b(d.firstChild).val(g);\n      }\n    },\n    _renderbuttoncell: function (h, e, g, k, i) {\n      if (h.host.jqxButton) {\n        var j = b(e);\n\n        if (i == \"\") {\n          i = false;\n        }\n\n        if (j.find(\".jqx-button\").length == 0) {\n          e.innerHTML = '<input type=\"button\" style=\"opacity: 0.99; position: absolute; top: 0%; left: 0%; padding: 0px; margin-top: 2px; margin-left: 2px;\"/>';\n          b(e.firstChild).val(i);\n          b(e.firstChild).attr(\"hideFocus\", \"true\");\n          b(e.firstChild).jqxButton({\n            disabled: h.disabled,\n            theme: h.theme,\n            height: h.rowsheight - 4,\n            width: g.width - 4\n          });\n          e.button = b(e.firstChild);\n          e.buttonrow = h.getboundindex(k);\n          var d = this.isTouchDevice();\n\n          if (d) {\n            var f = b.jqx.mobile.getTouchEventName(\"touchend\");\n            h.addHandler(b(e.firstChild), f, function (l) {\n              if (g.buttonclick) {\n                g.buttonclick(e.buttonrow, l);\n              }\n            });\n          } else {\n            h.addHandler(b(e.firstChild), \"click\", function (l) {\n              if (g.buttonclick) {\n                g.buttonclick(e.buttonrow, l);\n              }\n            });\n          }\n        } else {\n          e.buttonrow = h.getboundindex(k);\n          b(e.firstChild).val(i);\n        }\n      }\n    },\n    _clearvisualrow: function (g, f, o, i, n) {\n      var m = this.toTP(\"jqx-grid-cell\");\n\n      if (f) {\n        m = \" \" + this.toTP(\"jqx-grid-group-cell\");\n      }\n\n      m += \" \" + this.toTP(\"jqx-grid-cleared-cell\");\n      var p = this.table[0].rows;\n\n      for (var k = 0; k < i + n; k++) {\n        if (p[o]) {\n          var e = p[o].cells[k];\n\n          if (e.className != m) {\n            e.className = m;\n          }\n\n          var d = this.columns.records[k];\n\n          if (this._horizontalvalue != g && !d.pinned) {\n            if (this.oldhscroll == true) {\n              var h = -g;\n              e.style.marginLeft = -g + \"px\";\n            }\n          }\n\n          var l = d.width;\n\n          if (d.adaptivewidth) {\n            l = d.adaptivewidth;\n          }\n\n          if (l < d.minwidth) {\n            l = d.minwidth;\n          }\n\n          if (l > d.maxwidth) {\n            l = d.maxwidth;\n          }\n\n          if (parseInt(e.style.width) != l) {\n            if (l != \"auto\") {\n              b(e)[0].style.width = l + \"px\";\n            } else {\n              b(e)[0].style.width = l;\n            }\n          }\n\n          if (e.title != \"\") {\n            e.title = \"\";\n          }\n\n          if (e.innerHTML != \"\") {\n            e.innerHTML = \"\";\n          }\n        }\n      }\n\n      if (p[o]) {\n        if (parseInt(p[o].style.height) != this.rowsheight) {\n          p[o].style.height = parseInt(this.rowsheight) + \"px\";\n        }\n      }\n    },\n    _findgroupstate: function (e) {\n      var d = this._findgroup(e);\n\n      if (d == null) {\n        return false;\n      }\n\n      return d.expanded;\n    },\n    _findgroup: function (e) {\n      var d = null;\n\n      if (this.expandedgroups[e]) {\n        return this.expandedgroups[e];\n      }\n\n      return d;\n    },\n    _clearcaches: function () {\n      this._columnsbydatafield = new Array();\n      this._pagescache = new Array();\n      this._pageviews = new Array();\n      this._cellscache = new Array();\n      this.heights = new Array();\n      this.hiddens = new Array();\n      this.hiddenboundrows = new Array();\n      this.heightboundrows = new Array();\n      this.detailboundrows = new Array();\n      this.details = new Array();\n      this.expandedgroups = new Array();\n      this._rowdetailscache = new Array();\n      this._rowdetailselementscache = new Array();\n\n      if (b.jqx.dataFormat) {\n        b.jqx.dataFormat.cleardatescache();\n      }\n\n      this.tableheight = null;\n    },\n    _getColumnText: function (d) {\n      if (this._columnsbydatafield == undefined) {\n        this._columnsbydatafield = new Array();\n      }\n\n      if (this._columnsbydatafield[d]) {\n        return this._columnsbydatafield[d];\n      }\n\n      var f = d;\n      var e = null;\n      b.each(this.columns.records, function () {\n        if (this.datafield == d || this.displayfield == d) {\n          f = this.text;\n          e = this;\n          return false;\n        }\n      });\n      this._columnsbydatafield[d] = {\n        label: f,\n        column: e\n      };\n      return this._columnsbydatafield[d];\n    },\n    _getcolumnbydatafield: function (d) {\n      if (this.__columnsbydatafield == undefined) {\n        this.__columnsbydatafield = new Array();\n      }\n\n      if (this.__columnsbydatafield[d]) {\n        return this.__columnsbydatafield[d];\n      }\n\n      var f = d;\n      var e = null;\n      b.each(this.columns.records, function () {\n        if (this.datafield == d || this.displayfield == d) {\n          f = this.text;\n          e = this;\n          return false;\n        }\n      });\n      this.__columnsbydatafield[d] = e;\n      return this.__columnsbydatafield[d];\n    },\n    isscrollingvertically: function () {\n      var d = this.vScrollBar.jqxScrollBar(\"isScrolling\");\n      return d;\n    },\n    _renderrowdetails: function (q, y, d, x, n, A) {\n      if (y == undefined) {\n        return;\n      }\n\n      var E = b(y);\n      var g = 0;\n      var t = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : this.groups.length * this.groupindentwidth;\n\n      if (this.groupable && this.groups.length > 0) {\n        for (var r = 0; r <= n; r++) {\n          var e = b(y.cells[r]);\n          e[0].innerHTML = \"\";\n          e[0].className = \"jqx-grid-details-cell\";\n        }\n      }\n\n      var e = b(y.cells[g]);\n\n      if (e[0].style.display == \"none\") {\n        var o = y.cells[g];\n        var B = 2;\n        var l = g;\n\n        while (o != undefined && o.style.display == \"none\" && B < 10) {\n          o = y.cells[l + B - 1];\n          B++;\n        }\n\n        e = b(o);\n      }\n\n      if (this.rtl) {\n        for (var v = x; v < n; v++) {\n          y.cells[v].innerHTML = \"\";\n          y.cells[v].className = \"jqx-grid-details-cell\";\n        }\n      }\n\n      e.css(\"width\", \"100%\");\n      E.height(d.rowdetailsheight);\n      e[0].className = q;\n      var p = this.getboundindex(d);\n      var j = p + \"_\";\n\n      if (this._rowdetailscache[j]) {\n        var u = this._rowdetailscache[j];\n        var C = u.html;\n\n        if (this.initrowdetails) {\n          if (this._rowdetailscache[j].element) {\n            var f = this._rowdetailscache[j].element;\n            var i = e.coord();\n            var z = this.gridcontent.coord();\n            var w = parseInt(i.top) - parseInt(z.top);\n            var k = parseInt(i.left) - parseInt(z.left);\n\n            if (this.rtl) {\n              k = 0;\n            }\n\n            b(f).css(\"top\", w);\n            b(f).css(\"left\", k);\n            b(f).css(\"display\", \"block\");\n            b(f).width(this.host.width() - t);\n\n            if (this.layoutrowdetails) {\n              this.layoutrowdetails(p, f, this.element, this.getrowdata(p));\n            }\n          }\n        } else {\n          e[0].innerHTML = C;\n        }\n\n        return;\n      }\n\n      e[0].innerHTML = \"\";\n\n      if (!this.enablerowdetailsindent) {\n        t = 0;\n      }\n\n      var h = '<div class=\"jqx-enableselect\" role=\"rowgroup\" style=\"border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + t + 'px;\">' + d.rowdetails + \"</div>\";\n\n      if (this.rtl) {\n        var h = '<div class=\"jqx-enableselect\" role=\"rowgroup\" style=\"border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + 0 + \"px; margin-right: \" + t + 'px;\">' + d.rowdetails + \"</div>\";\n      }\n\n      this._rowdetailscache[j] = {\n        id: y.id,\n        html: h\n      };\n\n      if (this.initrowdetails) {\n        var f = b(h)[0];\n        b(this.gridcontent).prepend(b(f));\n        b(f).css(\"position\", \"absolute\");\n        b(f).width(this.host.width() - t);\n        b(f).height(e.height());\n        var i = e.coord();\n        b(f).css(\"z-index\", 799);\n\n        if (this.isTouchDevice()) {\n          b(f).css(\"z-index\", 999);\n        }\n\n        b(f).addClass(this.toThemeProperty(\"jqx-widget-content\"));\n        var i = e.coord();\n        var z = this.gridcontent.coord();\n        var w = parseInt(i.top) - parseInt(z.top);\n        var k = parseInt(i.left) - parseInt(z.left);\n        b(f).css(\"top\", w);\n        b(f).css(\"left\", k);\n        this.content[0].scrollTop = 0;\n        this.content[0].scrollLeft = 0;\n        var D = b(b(f).children()[0]);\n\n        if (D[0].id != \"\") {\n          D[0].id = D[0].id + p;\n        }\n\n        this.initrowdetails(p, f, this.element, this.getrowdata(p));\n        this._rowdetailscache[j].element = f;\n        this._rowdetailselementscache[p] = f;\n      } else {\n        e[0].innerHTML = h;\n      }\n    },\n    _defaultcellsrenderer: function (f, d) {\n      if (d.cellsformat != \"\") {\n        if (b.jqx.dataFormat) {\n          if (b.jqx.dataFormat.isDate(f)) {\n            f = b.jqx.dataFormat.formatdate(f, d.cellsformat, this.gridlocalization);\n          } else {\n            if (b.jqx.dataFormat.isNumber(f)) {\n              f = b.jqx.dataFormat.formatnumber(f, d.cellsformat, this.gridlocalization);\n            }\n          }\n        }\n      }\n\n      var e = \"8px\";\n\n      if (this.rowsheight != 31) {\n        e = this.rowsheight / 2 - this._cellheight / 2;\n\n        if (e < 0) {\n          e = 4;\n        }\n\n        e += \"px\";\n      }\n\n      if (this.enableellipsis) {\n        if (d.cellsalign == \"center\" || d.cellsalign == \"middle\") {\n          return '<div class=\"jqx-grid-cell-middle-align\" style=\"margin-top: ' + e + ';\">' + f + \"</div>\";\n        }\n\n        if (d.cellsalign == \"left\") {\n          return '<div class=\"jqx-grid-cell-left-align\" style=\"margin-top: ' + e + ';\">' + f + \"</div>\";\n        }\n\n        if (d.cellsalign == \"right\") {\n          return '<div class=\"jqx-grid-cell-right-align\" style=\"margin-top: ' + e + ';\">' + f + \"</div>\";\n        }\n      }\n\n      if (d.cellsalign == \"center\" || d.cellsalign == \"middle\") {\n        return '<div style=\"text-align: center; margin-top: ' + e + ';\">' + f + \"</div>\";\n      }\n\n      return '<span style=\"margin-left: 4px; margin-right: 2px; margin-top: ' + e + \"; float: \" + d.cellsalign + ';\">' + f + \"</span>\";\n    },\n    getcelltext: function (g, e) {\n      if (g == null || e == null) {\n        return null;\n      }\n\n      var d = this.getcellvalue(g, e);\n      var f = this.getcolumn(e);\n\n      if (f && f.cellsformat != \"\") {\n        if (b.jqx.dataFormat) {\n          if (b.jqx.dataFormat.isDate(d)) {\n            d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization);\n          } else {\n            if (b.jqx.dataFormat.isNumber(d)) {\n              d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization);\n            }\n          }\n        }\n      }\n\n      return d;\n    },\n    getcelltextbyid: function (g, e) {\n      if (g == null || e == null) {\n        return null;\n      }\n\n      var d = this.getcellvaluebyid(g, e);\n      var f = this.getcolumn(e);\n\n      if (f && f.cellsformat != \"\") {\n        if (b.jqx.dataFormat) {\n          if (b.jqx.dataFormat.isDate(d)) {\n            d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization);\n          } else {\n            if (b.jqx.dataFormat.isNumber(d)) {\n              d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization);\n            }\n          }\n        }\n      }\n\n      return d;\n    },\n    _getcellvalue: function (d, f) {\n      var e = null;\n      e = f.bounddata[d.datafield];\n\n      if (d.displayfield != null) {\n        e = f.bounddata[d.displayfield];\n      }\n\n      if (e == null) {\n        e = \"\";\n      }\n\n      return e;\n    },\n    getcell: function (h, d) {\n      if (h == null || d == null) {\n        return null;\n      }\n\n      var e = parseInt(h);\n      var g = h;\n      var f = \"\";\n\n      if (!isNaN(e)) {\n        g = this.getrowdata(e);\n      }\n\n      if (g != null) {\n        f = g[d];\n      }\n\n      return this._getcellresult(f, h, d);\n    },\n    getrenderedcell: function (h, d) {\n      if (h == null || d == null) {\n        return null;\n      }\n\n      var e = parseInt(h);\n      var g = h;\n      var f = \"\";\n\n      if (!isNaN(e)) {\n        g = this.getrenderedrowdata(e);\n      }\n\n      if (g != null) {\n        f = g[d];\n      }\n\n      return this._getcellresult(f, h, d);\n    },\n    _getcellresult: function (k, n, e) {\n      var f = this.getcolumn(e);\n\n      if (f == null || f == undefined) {\n        return null;\n      }\n\n      var i = f.getcolumnproperties();\n      var g = i.hidden;\n      var d = i.width;\n      var m = i.pinned;\n      var h = i.cellsalign;\n      var j = i.cellsformat;\n      var l = this.getrowheight(n);\n\n      if (l == false) {\n        return null;\n      }\n\n      return {\n        value: k,\n        row: n,\n        column: e,\n        datafield: e,\n        width: d,\n        height: l,\n        hidden: g,\n        pinned: m,\n        align: h,\n        format: j\n      };\n    },\n    setcellvaluebyid: function (i, d, h, f, g) {\n      var e = this.getrowboundindexbyid(i);\n      return this.setcellvalue(e, d, h, f, g);\n    },\n    getcellvaluebyid: function (f, d) {\n      var e = this.getrowboundindexbyid(f);\n      return this.getcellvalue(e, d);\n    },\n    setcellvalue: function (o, F, H, Q, j) {\n      if (o == null || F == null) {\n        return false;\n      }\n\n      var h = parseInt(o);\n      var t = h;\n      var C = o;\n\n      if (!isNaN(h)) {\n        C = this.getrowdata(h);\n      }\n\n      var N = false;\n\n      if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {\n        N = true;\n      }\n\n      if (this.virtualmode) {\n        this._pagescache = new Array();\n      }\n\n      if (this.sortcache) {\n        this.sortcache = {};\n      }\n\n      var q = \"\";\n      var d = \"\";\n\n      if (C != null && C[F] !== H) {\n        if (C[F] === null && H === \"\") {\n          return;\n        }\n\n        var I = this._getcolumnbydatafield(F);\n\n        var R = \"string\";\n        var v = this.source.datafields || (this.source._source ? this.source._source.datafields : null);\n\n        if (v) {\n          var D = \"\";\n          b.each(v, function () {\n            if (this.name == I.displayfield) {\n              if (this.type) {\n                D = this.type;\n              }\n\n              return false;\n            }\n          });\n\n          if (D) {\n            R = D;\n          }\n\n          d = C[I.displayfield];\n        }\n\n        q = C[F];\n\n        if (!I.nullable || H != null && H !== \"\" && I.nullable && H.label === undefined) {\n          if (b.jqx.dataFormat.isNumber(q) || R == \"number\" || R == \"float\" || R == \"int\" || R == \"decimal\" && R != \"date\") {\n            if (this.gridlocalization && this.gridlocalization.decimalseparator == \",\") {\n              if (H && H.indexOf && H.indexOf(\",\") >= 0) {\n                H = H.replace(\",\", \".\");\n              }\n            }\n\n            H = new Number(H);\n            H = parseFloat(H);\n\n            if (isNaN(H)) {\n              H = 0;\n            }\n          } else {\n            if (b.jqx.dataFormat.isDate(q) || R == \"date\") {\n              if (H != \"\") {\n                var L = H;\n                L = new Date(L);\n\n                if (L != \"Invalid Date\" && L != null) {\n                  H = L;\n                } else {\n                  if (L == \"Invalid Date\") {\n                    L = new Date();\n                    H = L;\n                  }\n                }\n              }\n            }\n          }\n\n          if (C[F] === H) {\n            if (!this._updating && Q != false) {\n              this._renderrows(this.virtualsizeinfo);\n            }\n\n            return;\n          }\n        }\n\n        var A = this.source && this.source._source.localdata && this.source._source.localdata.name === \"observableArray\";\n        C[F] = H;\n\n        if (A) {\n          var P = this.source._source.localdata;\n\n          if (!P._updating) {\n            P._updating = true;\n            P[o][F] = H;\n            P._updating = false;\n          }\n        }\n\n        var l = this.getrenderedrowdata(h, true);\n\n        if (!l) {\n          return;\n        }\n\n        l[F] = H;\n\n        if (H != null && H.label != null) {\n          var I = this._getcolumnbydatafield(F);\n\n          C[I.displayfield] = H.label;\n          l[I.displayfield] = H.label;\n          C[F] = H.value;\n          l[F] = H.value;\n\n          if (A && !P._updating) {\n            P._updating = true;\n            P[o][F] = H.value;\n            P[o][I.displayfield] = H.label;\n            P._updating = false;\n          }\n        }\n\n        if (N) {\n          if (C.dataindex != undefined) {\n            t = C.dataindex;\n            this.dataview.cachedrecords[C.dataindex][F] = H;\n\n            if (H != null && H.label != undefined) {\n              this.dataview.cachedrecords[C.dataindex][F] = H.value;\n              this.dataview.cachedrecords[C.dataindex][I.displayfield] = H.label;\n            }\n          }\n        }\n      } else {\n        if (!this._updating && Q != false) {\n          this._renderrows(this.virtualsizeinfo);\n        }\n\n        return false;\n      }\n\n      if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) {\n        if (this.source._source._localdata) {\n          var E = h;\n\n          if (N) {\n            if (C.dataindex != undefined) {\n              E = C.dataindex;\n            }\n          }\n\n          var g = this.source._source._localdata()[E];\n\n          this.source.suspendKO = true;\n          var G = g;\n\n          if (G[F] && G[F].subscribe) {\n            if (H != null && H.label != null) {\n              G[I.displayfield](H.label);\n              G[F](H.value);\n            } else {\n              G[F](H);\n            }\n          } else {\n            var v = this.source._source.datafields;\n            var B = null;\n            var x = null;\n\n            if (v) {\n              b.each(v, function () {\n                if (this.name == F) {\n                  x = this.map;\n                  return false;\n                }\n              });\n            }\n\n            if (x == null) {\n              if (H != null && H.label != null) {\n                G[F] = H.value;\n                G[I.displayfield] = H.label;\n              } else {\n                G[F] = H;\n              }\n            } else {\n              var f = x.split(this.source.mapChar);\n\n              if (f.length > 0) {\n                var n = G;\n\n                for (var M = 0; M < f.length - 1; M++) {\n                  n = n[f[M]];\n                }\n\n                n[f[f.length - 1]] = H;\n              }\n            }\n\n            this.source._source._localdata.replace(g, b.extend({}, G));\n          }\n\n          this.source.suspendKO = false;\n        }\n      }\n\n      if (this.sortcolumn && this.dataview.sortby && !this._updating) {\n        var z = this.getsortinformation();\n\n        if (this.sortcolumn == F && this.sortmode !== \"many\") {\n          this.dataview.clearsortdata();\n          this.dataview.sortby(z.sortcolumn, z.sortdirection.ascending);\n        } else {\n          if (this.sortmode === \"many\") {\n            var m = this.getsortcolumns();\n            this.dataview.clearsortdata();\n            this.sortby(null);\n\n            for (var O = 0; O < m.length; O++) {\n              this.sortby(m[O].dataField, m[O].ascending);\n            }\n          }\n        }\n      } else {\n        if (!this._updating) {\n          if (this.dataview.sortby) {\n            if (this.dataview.sortcache[F]) {\n              this.dataview.sortcache[F] = null;\n            }\n          }\n        }\n      }\n\n      this._cellscache = new Array();\n      this._pagescache = new Array();\n\n      if (this.source.updaterow && (j == undefined || j == true)) {\n        var J = false;\n        var r = this.that;\n\n        var s = function (i) {\n          if (false == i) {\n            r.setcellvalue(o, F, q, true, false);\n\n            if (q != d) {\n              r.setcellvalue(o, r.getcolumn(F).displayfield, d, true, false);\n            }\n          }\n        };\n\n        try {\n          var k = this.getrowid(h);\n          J = this.source.updaterow(k, C, s);\n\n          if (J == undefined) {\n            J = true;\n          }\n        } catch (w) {\n          J = false;\n          r.setcellvalue(o, F, q, true, false);\n\n          if (q != d) {\n            r.setcellvalue(o, r.getcolumn(F).displayfield, d, true, false);\n          }\n\n          return;\n        }\n      }\n\n      var K = this.vScrollInstance.value;\n\n      if (this._updating && Q != true) {\n        Q = false;\n      }\n\n      if (Q == true || Q == undefined) {\n        var r = this.that;\n\n        var e = function () {\n          if (r.pageable && r.updatepagerdetails) {\n            r.updatepagerdetails();\n\n            if (r.autoheight || r.autorowheight) {\n              r._updatepageviews();\n            }\n          }\n        };\n\n        var u = this.groupable && this.groups.length > 0;\n\n        if (N && !u) {\n          if (this.autoheight || this.autorowheight) {\n            this.prerenderrequired = true;\n          }\n\n          this.dataview.refresh();\n          this.rendergridcontent(true, false);\n          e();\n\n          this._renderrows(this.virtualsizeinfo);\n        } else {\n          if (this.sortcolumn && !u) {\n            if (this.autoheight || this.autorowheight) {\n              this.prerenderrequired = true;\n            }\n\n            this.dataview.reloaddata();\n            this.rendergridcontent(true, false);\n            e();\n\n            this._renderrows(this.virtualsizeinfo);\n          } else {\n            if (this.groupable && this.groups.length > 0) {\n              if (this.autoheight || this.autorowheight) {\n                this.prerenderrequired = true;\n              }\n\n              if (this.pageable) {\n                if (this.groups.indexOf(F) != -1) {\n                  this._pagescache = new Array();\n                  this._cellscache = new Array();\n                  this.dataview.refresh();\n\n                  this._render(true, true, false, false);\n                } else {\n                  this._pagescache = new Array();\n                  this._cellscache = new Array();\n                  this.dataview.updateview();\n\n                  this._renderrows(this.virtualsizeinfo);\n                }\n              } else {\n                this._pagescache = new Array();\n                this._cellscache = new Array();\n                this.dataview.updateview();\n\n                this._renderrows(this.virtualsizeinfo);\n              }\n            } else {\n              this.dataview.updateview();\n\n              this._renderrows(this.virtualsizeinfo);\n            }\n          }\n        }\n      }\n\n      this.vScrollInstance.setPosition(K);\n\n      if (this.showaggregates && this._updatecolumnsaggregates) {\n        this._updatecolumnsaggregates();\n      }\n\n      if (this.showfilterrow && this.filterable && this.filterrow) {\n        var y = this.getcolumn(F).filtertype;\n\n        if (y == \"list\" || y == \"checkedlist\") {\n          this._updatelistfilters(true);\n        }\n      }\n\n      this._raiseEvent(19, {\n        rowindex: o,\n        datafield: F,\n        newvalue: H,\n        value: H,\n        oldvalue: q\n      });\n\n      return true;\n    },\n    getcellvalue: function (h, d) {\n      if (h == null || d == null) {\n        return null;\n      }\n\n      var e = parseInt(h);\n      var g = h;\n\n      if (!isNaN(e)) {\n        g = this.getrowdata(e);\n      }\n\n      if (g != null) {\n        var f = g[d];\n        return f;\n      }\n\n      return null;\n    },\n    getrows: function () {\n      var h = this.dataview.records.length;\n\n      if (this.virtualmode) {\n        var j = new Array();\n\n        for (var e = 0; e < this.dataview.records.length; e++) {\n          var d = this.dataview.records[e];\n\n          if (d) {\n            j.push(d);\n          }\n        }\n\n        if (this.dataview.records.length === undefined) {\n          b.each(this.dataview.records, function () {\n            var i = this;\n\n            if (i) {\n              j.push(i);\n            }\n          });\n        }\n\n        var g = 0;\n\n        if (this.pageable) {\n          g = this.dataview.pagenum * this.dataview.pagesize;\n        }\n\n        if (j.length > this.source._source.totalrecords - g) {\n          return j.slice(0, this.source._source.totalrecords - g);\n        }\n\n        return j;\n      }\n\n      if (this.dataview.sortdata) {\n        var j = new Array();\n\n        for (var e = 0; e < h; e++) {\n          var f = {};\n          f = b.extend({}, this.dataview.sortdata[e].value);\n          j[e] = f;\n        }\n\n        return j;\n      } else {\n        return this.dataview.records;\n      }\n    },\n    getrowboundindexbyid: function (g) {\n      var f = this.dataview.recordsbyid[\"id\" + g];\n\n      if (f) {\n        if (f.boundindex) {\n          return this.getboundindex(f);\n        }\n      }\n\n      var e = this.getboundrows();\n\n      for (var d = 0; d < e.length; d++) {\n        if (e[d]) {\n          if (e[d].uid == g) {\n            return d;\n          }\n        }\n      }\n\n      return -1;\n    },\n    getrowdatabyid: function (f) {\n      var e = this.dataview.recordsbyid[\"id\" + f];\n\n      if (e) {\n        return e;\n      } else {\n        var d = this.getrowboundindexbyid(f);\n        return this.getboundrows()[d];\n      }\n\n      return null;\n    },\n    getrowdata: function (d) {\n      if (d == undefined) {\n        d = 0;\n      }\n\n      if (this.virtualmode) {\n        var e = this.dataview.records[d];\n        return e;\n      } else {\n        var e = this.getboundrows()[d];\n        return e;\n      }\n\n      return null;\n    },\n    getrenderedrowdata: function (d, f) {\n      if (d == undefined) {\n        d = 0;\n      }\n\n      if (this.virtualmode) {\n        var g = this.getrowvisibleindex(d);\n        var e = this.dataview.loadedrecords[g];\n        return e;\n      }\n\n      var g = this.getrowvisibleindex(d);\n\n      if (g >= 0) {\n        if (this.groupable && this.groups.length > 0) {\n          var e = this.dataview.loadedrecords[g];\n        } else {\n          var e = this.dataview.loadedrecords[g];\n\n          if (this.pageable && (f == undefined || f == false)) {\n            var e = this.dataview.loadedrecords[this.dataview.pagesize * this.dataview.pagenum + d];\n          }\n        }\n\n        return e;\n      }\n\n      return null;\n    },\n    getboundrows: function () {\n      return this.dataview.cachedrecords;\n    },\n    getrowdisplayindex: function (d) {\n      var f = this.getdisplayrows();\n\n      for (var e = 0; e < f.length; e++) {\n        if (!f[e]) {\n          continue;\n        }\n\n        if (f[e].dataindex !== undefined) {\n          if (f[e].dataindex == d) {\n            return f[e].visibleindex;\n          }\n        } else {\n          if (f[e].boundindex == d) {\n            return f[e].visibleindex;\n          }\n        }\n      }\n\n      return -1;\n    },\n    getboundindex: function (e) {\n      var d = e.boundindex;\n\n      if (this.groupable && this.groups.length > 0 && this.pageable) {\n        if (e.bounddata) {\n          d = this.getrowboundindexbyid(e.bounddata.uid);\n        }\n      }\n\n      if (this.dataview.filters.length > 0) {\n        if (e.bounddata) {\n          if (e.bounddata.dataindex !== undefined) {\n            d = e.bounddata.dataindex;\n          }\n        } else {\n          if (e.dataindex !== undefined) {\n            d = e.dataindex;\n          }\n        }\n      }\n\n      return d;\n    },\n    getrowboundindex: function (d) {\n      var e = this.getdisplayrows()[d];\n\n      if (e) {\n        if (e.dataindex !== undefined) {\n          return e.dataindex;\n        }\n\n        return e.boundindex;\n      }\n\n      return -1;\n    },\n    getdisplayrows: function () {\n      return this.dataview.loadedrecords;\n    },\n    getloadedrows: function () {\n      return this.getdisplayrows();\n    },\n    getvisiblerowdata: function (e) {\n      var d = this.getvisiblerows();\n\n      if (d) {\n        return d[e];\n      }\n\n      return null;\n    },\n    getloadedrowdata: function (e) {\n      var d = this.getloadedrows();\n\n      if (d) {\n        return d[e];\n      }\n\n      return null;\n    },\n    getvisiblerows: function () {\n      if (this.virtualmode) {\n        return this.dataview.loadedrecords;\n      }\n\n      if (this.pageable) {\n        var f = [];\n\n        for (var e = 0; e < this.dataview.pagesize; e++) {\n          var d = this.dataview.loadedrecords[e + this.dataview.pagesize * this.dataview.pagenum];\n\n          if (d == undefined) {\n            break;\n          }\n\n          f.push(d);\n        }\n\n        return f;\n      } else {\n        if (this._startboundindex != undefined && this._endboundindex != undefined) {\n          var f = [];\n\n          for (var e = this._startvisibleindex; e <= this._endvisibleindex; e++) {\n            var d = this.dataview.loadedrecords[e];\n\n            if (d == undefined) {\n              break;\n            }\n\n            f.push(d);\n          }\n\n          return f;\n        }\n      }\n\n      return this.dataview.loadedrecords;\n    },\n    getrowid: function (d) {\n      if (d == undefined) {\n        d = 0;\n      }\n\n      if (this.virtualmode) {\n        var g = this.getrowvisibleindex(d);\n        var f = this.dataview.loadedrecords[g];\n\n        if (f) {\n          return f.uid;\n        }\n      } else {\n        var f = null;\n        var e = this.dataview.filters.length > 0;\n\n        if (d >= 0 && d < this.dataview.bounditems.length && !e) {\n          if (this.groupable && this.groups.length > 0) {\n            var g = this.getrowvisibleindex(d);\n            var f = this.dataview.loadedrecords[g];\n          } else {\n            var g = this.getrowvisibleindex(d);\n            var f = this.dataview.loadedrecords[g];\n          }\n\n          if (f) {\n            return f.uid;\n          }\n        }\n\n        if (this.dataview.filters.length > 0) {\n          var f = this.getboundrows()[d];\n\n          if (f) {\n            if (f.uid != null) {\n              return f.uid;\n            }\n          }\n\n          return null;\n        }\n      }\n\n      return null;\n    },\n    _updateGridData: function (e) {\n      var d = false;\n\n      if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {\n        d = true;\n      }\n\n      if (d) {\n        this.dataview.refresh();\n\n        if (e == \"updaterow\") {\n          this._render(true, true, false, false, false);\n\n          this.invalidate();\n        } else {\n          this.render();\n        }\n      } else {\n        if (this.sortcolumn || this.groupable && this.groups.length > 0) {\n          this.dataview.reloaddata();\n          this.render();\n        } else {\n          if (e === \"updaterow\") {\n            this.dataview.refresh();\n\n            if (!this.virtualmode) {\n              this._render(true, true, false, false, false);\n            }\n          }\n\n          this._cellscache = new Array();\n          this._pagescache = new Array();\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n      }\n\n      if (this.showfilterrow && this.filterable && this.filterrow) {\n        this._updatelistfilters(true);\n      }\n    },\n    updaterow: function (i, k, g) {\n      if (i != undefined && k != undefined) {\n        var h = this.that;\n        var j = false;\n        h._datachanged = true;\n\n        var e = function (q, l, u) {\n          if (q._loading) {\n            throw new Error(\"jqxGrid: \" + q.loadingerrormessage);\n            return false;\n          }\n\n          var s = false;\n\n          if (!b.isArray(l)) {\n            s = q.dataview.updaterow(l, u);\n          } else {\n            b.each(l, function (v, w) {\n              s = q.dataview.updaterow(this, u[v], false);\n            });\n            q._cellscache = new Array();\n            q._pagescache = new Array();\n            q.dataview.refresh();\n          }\n\n          var m = q.vScrollInstance.value;\n\n          if (g == undefined || g == true) {\n            if (q._updating == undefined || q._updating == false) {\n              q._updateGridData(\"updaterow\");\n            }\n          }\n\n          if (q.showaggregates && q._updatecolumnsaggregates) {\n            q._updatecolumnsaggregates();\n          }\n\n          if (q.source && q.source._knockoutdatasource && !q._updateFromAdapter && q.autokoupdates) {\n            if (q.source._source._localdata) {\n              var n = q.dataview.recordsbyid[\"id\" + l];\n              var o = q.dataview.records.indexOf(n);\n\n              var p = q.source._source._localdata()[o];\n\n              q.source.suspendKO = true;\n\n              q.source._source._localdata.replace(p, b.extend({}, n));\n\n              q.source.suspendKO = false;\n            }\n          }\n\n          var r = q.source && q.source._source.localdata && q.source._source.localdata.name === \"observableArray\";\n\n          if (r) {\n            if (!q.source._source.localdata._updating) {\n              q.source._source.localdata._updating = true;\n              var t = q.getrowboundindexbyid(l);\n\n              q.source._source.localdata.set(t, u);\n\n              q.source._source.localdata._updating = false;\n            }\n          }\n\n          q.vScrollInstance.setPosition(m);\n          return s;\n        };\n\n        if (this.source.updaterow) {\n          var d = function (l) {\n            if (l == true || l == undefined) {\n              e(h, i, k);\n            } else {\n              j = false;\n            }\n          };\n\n          try {\n            j = this.source.updaterow(i, k, d);\n\n            if (j == undefined) {\n              j = true;\n            }\n          } catch (f) {\n            j = false;\n          }\n        } else {\n          j = e(h, i, k);\n        }\n\n        return j;\n      }\n\n      return false;\n    },\n    deleterow: function (d, k) {\n      if (d != undefined) {\n        this._datachanged = true;\n        var o = false;\n        var m = this.that;\n        var p = this.getrowboundindexbyid(d);\n        var e = new Array();\n        var j = new Array();\n\n        if (p != undefined) {\n          if (this.selectedrowindexes.indexOf(p) >= 0) {\n            this.selectedrowindexes.splice(this.selectedrowindexes.indexOf(p), 1);\n          }\n\n          if (this.selectedrowindex == p) {\n            this.selectedrowindex = -1;\n          }\n\n          if (!this.virtualmode) {\n            if (m.selectionmode.indexOf(\"row\") >= 0) {\n              b.each(this.selectedrowindexes, function () {\n                var q = m.getrowid(this);\n                e.push(q);\n              });\n              this.selectedrowindexes = new Array();\n              this.selectedrowindex = -1;\n            } else {\n              if (m.selectionmode.indexOf(\"cell\") >= 0) {\n                for (var i in m.selectedcells) {\n                  var n = m.selectedcells[i];\n                  var h = m.getrowid(n.rowindex);\n                  n.rowid = h;\n                }\n              }\n            }\n\n            this._rendervisualrows();\n          }\n        }\n\n        var f = function (w, r) {\n          if (w._loading) {\n            throw new Error(\"jqxGrid: \" + w.loadingerrormessage);\n            return false;\n          }\n\n          var z = false;\n          var t = w.vScrollInstance.value;\n\n          if (!b.isArray(r)) {\n            var z = w.dataview.deleterow(r);\n          } else {\n            b.each(r, function () {\n              z = w.dataview.deleterow(this, false);\n            });\n            w._cellscache = new Array();\n            w._pagescache = new Array();\n            w.dataview.refresh();\n          }\n\n          if (!w.virtualmode) {\n            if (w.selectionmode.indexOf(\"row\") >= 0) {\n              b.each(e, function () {\n                var B = w.getrowboundindexbyid(this);\n\n                if (B != -1) {\n                  w.selectrow(B, false);\n                }\n              });\n            } else {\n              var A = new Array();\n\n              for (var v in w.selectedcells) {\n                var y = w.selectedcells[v];\n                var u = y.rowid;\n                var s = w.getrowboundindexbyid(u);\n\n                if (s != -1) {\n                  y.rowindex = s;\n                  A[s + \"_\" + y.datafield] = y;\n                }\n              }\n\n              w.selectedcells = A;\n            }\n          }\n\n          if (w._updating == undefined || w._updating == false) {\n            if (k == undefined || k == true) {\n              setTimeout(function () {\n                w._render(true, true, false, false);\n\n                if (w.vScrollBar.css(\"visibility\") != \"visible\") {\n                  w._arrange();\n\n                  w._updatecolumnwidths();\n\n                  w._updatecellwidths();\n\n                  w._renderrows(w.virtualsizeinfo);\n                }\n              });\n            }\n          }\n\n          if (w.source && w.source._knockoutdatasource && !w._updateFromAdapter && w.autokoupdates) {\n            if (w.source._source._localdata) {\n              w.source.suspendKO = true;\n\n              w.source._source._localdata.pop();\n\n              w.source.suspendKO = false;\n            }\n          }\n\n          var x = w.source && w.source._source.localdata && w.source._source.localdata.name === \"observableArray\";\n\n          if (x) {\n            if (!w.source._source.localdata._updating) {\n              w.source._source.localdata._updating = true;\n\n              w.source._source.localdata.splice(p, 1);\n\n              w.source._source.localdata._updating = false;\n            }\n          }\n\n          if (w.dataview.sortby && w.sortmode !== \"many\") {\n            var q = w.getsortinformation();\n\n            if (q.sortcolumn) {\n              w.dataview.clearsortdata();\n              w.dataview.sortby(q.sortcolumn, q.sortdirection ? q.sortdirection.ascending : null);\n            }\n          }\n\n          w.vScrollInstance.setPosition(t);\n          return z;\n        };\n\n        if (this.source.deleterow) {\n          var g = function (q) {\n            if (q == true || q == undefined) {\n              f(m, d);\n            }\n          };\n\n          try {\n            this.source.deleterow(d, g);\n\n            if (o == undefined) {\n              o = true;\n            }\n          } catch (l) {\n            o = false;\n          }\n        } else {\n          o = f(m, d);\n        }\n\n        return o;\n      }\n\n      return false;\n    },\n    addrow: function (f, o, j) {\n      if (o != undefined) {\n        this._datachanged = true;\n\n        if (j == undefined) {\n          j = \"last\";\n        }\n\n        var n = false;\n        var m = this.that;\n\n        if (f == null) {\n          var g = this.dataview.filters && this.dataview.filters.length > 0;\n          var l = !g ? this.dataview.totalrecords : this.dataview.cachedrecords.length;\n\n          if (!b.isArray(o)) {\n            f = this.dataview.getid(this.dataview.source.id, o, l);\n\n            while (null != this.dataview.recordsbyid[\"id\" + f]) {\n              f++;\n            }\n          } else {\n            var d = new Array();\n            b.each(o, function (e, p) {\n              var q = m.dataview.getid(m.dataview.source.id, o[e], l + e);\n              d.push(q);\n            });\n            f = d;\n          }\n        }\n\n        var h = function (s, r, v, e) {\n          if (s._loading) {\n            throw new Error(\"jqxGrid: \" + s.loadingerrormessage);\n            return false;\n          }\n\n          var u = s.vScrollInstance.value;\n          var t = false;\n\n          if (!b.isArray(v)) {\n            if (v != undefined && v.dataindex != undefined) {\n              delete v.dataindex;\n            }\n\n            t = s.dataview.addrow(r, v, e);\n          } else {\n            b.each(v, function (w, x) {\n              if (this.dataindex != undefined) {\n                delete this.dataindex;\n              }\n\n              var y = null;\n\n              if (r != null && r[w] != null) {\n                y = r[w];\n              }\n\n              t = s.dataview.addrow(y, this, e, false);\n            });\n            s._cellscache = new Array();\n            s._pagescache = new Array();\n            s.dataview.refresh();\n          }\n\n          if (s._updating == undefined || s._updating == false) {\n            s._render(true, true, false, false);\n\n            s.invalidate();\n          }\n\n          if (s.source && s.source._knockoutdatasource && !s._updateFromAdapter && s.autokoupdates) {\n            if (s.source._source._localdata) {\n              s.source.suspendKO = true;\n\n              s.source._source._localdata.push(v);\n\n              s.source.suspendKO = false;\n            }\n          }\n\n          var p = s.source && s.source._source.localdata && s.source._source.localdata.name === \"observableArray\";\n\n          if (p) {\n            if (!s.source._source.localdata._updating) {\n              s.source._source.localdata._updating = true;\n              var q = s.getrowboundindexbyid(r);\n\n              s.source._source.localdata.set(q, v);\n\n              s.source._source.localdata._updating = false;\n            }\n          }\n\n          if (s.scrollmode != \"deferred\") {\n            s.vScrollInstance.setPosition(u);\n          } else {\n            s.vScrollInstance.setPosition(0);\n          }\n\n          return t;\n        };\n\n        if (this.source.addrow) {\n          var i = function (e, p) {\n            if (e == true || e == undefined) {\n              if (p != undefined) {\n                f = p;\n              }\n\n              h(m, f, o, j);\n            }\n          };\n\n          try {\n            n = this.source.addrow(f, o, j, i);\n\n            if (n == undefined) {\n              n = true;\n            }\n          } catch (k) {\n            n = false;\n          }\n\n          if (n == false) {\n            return false;\n          }\n        } else {\n          h(this, f, o, j);\n        }\n\n        return n;\n      }\n\n      return false;\n    },\n    _findvisiblerow: function (h, i) {\n      if (h == undefined) {\n        h = parseInt(this.vScrollInstance.value);\n      }\n\n      var f = 0;\n\n      if (i == undefined || i == null) {\n        i = this.rows.records;\n      }\n\n      var d = i.length;\n\n      while (f <= d) {\n        var e = parseInt((f + d) / 2);\n        var g = i[e];\n\n        if (g == undefined) {\n          break;\n        }\n\n        if (g.top > h && g.top + g.height > h) {\n          d = e - 1;\n        } else {\n          if (g.top < h && g.top + g.height < h) {\n            f = e + 1;\n          } else {\n            return e;\n            break;\n          }\n        }\n      }\n\n      return -1;\n    },\n    _updatecellwidths: function () {\n      var f = this.virtualsizeinfo;\n\n      if (!f) {\n        return;\n      }\n\n      var p = this.that;\n\n      if (p.gridcontent == undefined) {\n        return;\n      }\n\n      if (p.table == undefined) {\n        p.table = p.gridcontent.find(\"#contenttable\" + p.element.id);\n      }\n\n      var k = p.groupable && p.groups.length > 0;\n      var q = 0;\n      var l = f.visiblerecords;\n\n      if (p.pageable && (p.autoheight || p.autorowheight)) {\n        l = p.dataview.pagesize;\n\n        if (p.groupable) {\n          p.dataview.updateview();\n          l = p.dataview.rows.length;\n        }\n      }\n\n      if (!p.groupable && !p.pageable && (p.autoheight || p.autorowheight)) {\n        l = p.dataview.totalrecords;\n      }\n\n      if (p.rowdetails) {\n        l += p.dataview.pagesize;\n      }\n\n      if (!p.columns.records) {\n        return;\n      }\n\n      var r = p.columns.records.length;\n      var t = p.table[0].rows;\n\n      for (var n = 0; n < l; n++) {\n        var d = t[n];\n\n        if (!d) {\n          break;\n        }\n\n        var s = d.cells;\n        var h = 0;\n\n        for (var m = 0; m < r; m++) {\n          var g = p.columns.records[m];\n          var e = g.width;\n\n          if (g.adaptivewidth) {\n            e = g.adaptivewidth;\n          }\n\n          var o = s[m];\n\n          if (parseInt(o.style.left) != h) {\n            o.style.left = h + \"px\";\n          }\n\n          if (parseInt(o.style.width) != e) {\n            o.style.width = e + \"px\";\n          }\n\n          if (!(g.hidden && g.hideable) && !g.adaptivehidden) {\n            h += parseFloat(e);\n          } else {\n            o.style.display = \"none\";\n          }\n        }\n\n        if (q == 0) {\n          p.table.width(parseFloat(h) + 2);\n          q = h;\n        }\n      }\n\n      if (p.showaggregates && p._updateaggregates) {\n        p._updateaggregates();\n      }\n\n      if (p.showfilterrow && p.filterable && p._updatefilterrowui) {\n        p._updatefilterrowui();\n      }\n\n      if (p.showeverpresentrow) {\n        p._updateaddnewrowui();\n      }\n\n      p._updatescrollbarsafterrowsprerender();\n\n      if (k) {\n        p._renderrows(p.virtualsizeinfo);\n      }\n    },\n    _updatescrollbarsafterrowsprerender: function () {\n      var g = this.that;\n      var f = g.hScrollBar[0].style.visibility;\n      var i = 0;\n      var d = g.vScrollBar[0].style.visibility;\n\n      if (d == \"visible\") {\n        i = g.scrollbarsize + 3;\n      }\n\n      if (g.scrollbarsize == 0) {\n        i = 0;\n      }\n\n      if (g.scrollbarautoshow) {\n        i = 0;\n      }\n\n      var e = g.element.style.width;\n\n      if (e.toString().indexOf(\"%\") >= 0) {\n        e = g.host.width();\n      } else {\n        e = parseInt(e);\n      }\n\n      if (parseInt(g.table[0].style.width) - 2 > e - i) {\n        if (f != \"visible\") {\n          if (!g.autowidth) {\n            g.hScrollBar[0].style.visibility = \"visible\";\n          }\n\n          g._arrange();\n        }\n\n        if (d == \"visible\") {\n          if (g.scrollmode != \"deferred\" && !g.virtualmode) {\n            if (g.virtualsizeinfo) {\n              var h = g.virtualsizeinfo.virtualheight - g._gettableheight();\n\n              if (!isNaN(h) && h > 0) {\n                if (f != \"hidden\") {\n                  g.vScrollBar.jqxScrollBar(\"max\", h + g.scrollbarsize + 4);\n                } else {\n                  g.vScrollBar.jqxScrollBar(\"max\", h);\n                }\n              }\n            }\n          } else {\n            g._updatevscrollbarmax();\n          }\n        } else {\n          i = -2;\n        }\n\n        g.hScrollBar.jqxScrollBar(\"max\", i + g.table.width() - g.host.width());\n      } else {\n        if (f != \"hidden\") {\n          g.hScrollBar.css(\"visibility\", \"hidden\");\n\n          g._arrange();\n        }\n      }\n\n      g._renderhorizontalscroll();\n    },\n    _hascolumnstyle: function () {\n      if (undefined !== this._hascolumnstyles) {\n        return this._hascolumnstyles;\n      }\n\n      this._hascolumnstyles = false;\n\n      for (var d = 0; d < this.columns.records.length; d++) {\n        var e = this.columns.records[d];\n\n        if (e.style.headerBackgroundColor || e.style.headerColor || e.style.headerBackgroundHoveredColor || e.style.headerHoveredColor || e.style.headerBackgroundSelectedColor || e.style.headerSelectedColor || e.style.backgroundColor || e.style.color || e.style.backgroundHoveredColor || e.style.hoveredColor || e.style.backgroundSelectedColor || e.style.selectedColor) {\n          this._hascolumnstyles = true;\n          return true;\n        }\n      }\n\n      return false;\n    },\n    _prerenderrows: function (o) {\n      var C = this.that;\n\n      if (C.prerenderrequired == true) {\n        C.prerenderrequired = false;\n\n        if (C.editable && C._destroyeditors) {\n          C._destroyeditors();\n        }\n\n        if (C.gridcontent == undefined) {\n          return;\n        }\n\n        C.gridcontent.find(\"#contenttable\" + C.element.id).remove();\n\n        if (C.table != null) {\n          C.table.remove();\n          C.table = null;\n        }\n\n        C.table = b('<div id=\"contenttable' + C.element.id + '\" style=\"overflow: hidden; position: relative;\"></div>');\n        C.gridcontent.addClass(C.toTP(\"jqx-grid-content\"));\n        C.gridcontent.addClass(C.toTP(\"jqx-widget-content\"));\n        C.gridcontent.append(C.table);\n        var B = C.groupable && C.groups.length > 0;\n        var p = 0;\n        C.table[0].rows = new Array();\n        var l = C.toTP(\"jqx-grid-cell\");\n\n        if (B) {\n          l = \" \" + C.toTP(\"jqx-grid-group-cell\");\n        }\n\n        var u = o.visiblerecords;\n\n        if (C.pageable && (C.autoheight || C.autorowheight)) {\n          u = C.dataview.pagesize;\n\n          if (C.groupable) {\n            C.dataview.updateview();\n            u = C.dataview.rows.length;\n\n            if (u < C.dataview.pagesize) {\n              u = C.dataview.pagesize;\n            }\n          }\n        }\n\n        if (!C.pageable && (C.autoheight || C.autorowheight)) {\n          u = C.dataview.totalrecords;\n        }\n\n        if (C.groupable && C.groups.length > 0 && (C.autoheight || C.autorowheight) && !C.pageable) {\n          u = C.dataview.rows.length;\n        }\n\n        if (C.rowdetails) {\n          if (C.autoheight || C.autorowheight) {\n            u += C.dataview.pagesize;\n          } else {\n            u += u;\n          }\n        }\n\n        if (!C.columns.records) {\n          return;\n        }\n\n        var A = C.columns.records.length;\n\n        if (b.jqx.browser.msie && b.jqx.browser.version > 8) {\n          C.table.css(\"opacity\", \"0.99\");\n        }\n\n        if (b.jqx.browser.mozilla) {}\n\n        if (navigator.userAgent.indexOf(\"Safari\") != -1) {\n          C.table.css(\"opacity\", \"0.99\");\n        }\n\n        var r = b.jqx.browser.msie && b.jqx.browser.version < 8;\n\n        if (r) {\n          C.host.attr(\"hideFocus\", \"true\");\n        }\n\n        var k = C.tableZIndex;\n\n        if (u * A > k) {\n          k = u * A;\n        }\n\n        var g = C.dataview.records.length == 0;\n        var n = C.isTouchDevice();\n        var v = \"\";\n        C._hiddencolumns = false;\n        var D = 5 + C.columns.records.length;\n\n        for (var z = 0; z < u; z++) {\n          var s = '<div role=\"row\" style=\"position: relative; height:' + C.rowsheight + 'px;\" id=\"row' + z + C.element.id + '\">';\n\n          if (r) {\n            var s = '<div role=\"row\" style=\"position: relative; z-index: ' + k + \"; height:\" + C.rowsheight + 'px;\" id=\"row' + z + C.element.id + '\">';\n            k--;\n          }\n\n          var f = 0;\n\n          for (var x = 0; x < A; x++) {\n            var w = C.columns.records[x];\n            var t = w.width;\n\n            if (t < w.minwidth) {\n              t = w.minwidth;\n            }\n\n            if (t > w.maxwidth) {\n              t = w.maxwidth;\n            }\n\n            if (C.rtl) {\n              var q = k - A + 2 * x;\n              var d = '<div columnindex=\"' + x + '\" role=\"gridcell\" style=\"left: ' + f + \"px; z-index: \" + q + \"; width:\" + t + \"px;\";\n              k--;\n            } else {\n              var d = '<div columnindex=\"' + x + '\" role=\"gridcell\" style=\"left: ' + f + \"px; z-index: \" + k-- + \"; width:\" + t + \"px;\";\n            }\n\n            if (!(w.hidden && w.hideable) && !w.adaptivehidden) {\n              f += t;\n            } else {\n              d += \"display: none;\";\n              C._hiddencolumns = true;\n              k++;\n            }\n\n            if (z === 0 && x === 0) {\n              d += '\" tabindex=\"' + D + '\"';\n            }\n\n            d += '\" class=\"' + l + '\">';\n\n            var y = this._defaultcellsrenderer(\"\", w);\n\n            d += y;\n            d += \"</div>\";\n            s += d;\n          }\n\n          if (p == 0) {\n            C.table.width(parseInt(f) + 2);\n            p = f;\n          }\n\n          s += \"</div>\";\n          v += s;\n        }\n\n        if (C.WinJS) {\n          MSApp.execUnsafeLocalFunction(function () {\n            C.table.html(v);\n          });\n        } else {\n          C.table[0].innerHTML = v;\n        }\n\n        C.table[0].rows = new Array();\n        var m = C.table.children();\n\n        for (var z = 0; z < u; z++) {\n          var h = m[z];\n          C.table[0].rows.push(h);\n          h.cells = new Array();\n          var e = b(h).children();\n\n          for (var x = 0; x < A; x++) {\n            h.cells.push(e[x]);\n          }\n        }\n\n        if (u == 0) {\n          var f = 0;\n\n          if (C.showemptyrow) {\n            var s = b('<div style=\"position: relative;\" id=\"row0' + C.element.id + '\"></div>');\n            C.table.append(s);\n            s.height(C.rowsheight);\n            C.table[0].rows[0] = s[0];\n            C.table[0].rows[0].cells = new Array();\n          }\n\n          for (var x = 0; x < A; x++) {\n            var w = C.columns.records[x];\n            var t = w.width;\n\n            if (C.showemptyrow) {\n              var d = b('<div style=\"position: absolute; height: 100%; left: ' + f + \"px; z-index: \" + k-- + \"; width:\" + t + 'px;\" class=\"' + l + '\"></div>');\n              d.height(C.rowsheight);\n              s.append(d);\n              C.table[0].rows[0].cells[x] = d[0];\n            }\n\n            if (t < w.minwidth) {\n              t = w.minwidth;\n            }\n\n            if (t > w.maxwidth) {\n              t = w.maxwidth;\n            }\n\n            if (!(w.hidden && w.hideable) && !w.adaptivehidden) {\n              f += t;\n            }\n          }\n\n          C.table.width(parseInt(f) + 2);\n          p = f;\n        }\n\n        C._updatescrollbarsafterrowsprerender();\n\n        if (C.rendered) {\n          C.rendered(\"rows\");\n        }\n\n        C.toCompile = new Array();\n\n        C._addoverlayelement();\n      }\n    },\n    _groupsheader: function () {\n      return this.groupable && this.showgroupsheader;\n    },\n    _arrange: function () {\n      var A = null;\n      var x = null;\n      this.tableheight = null;\n      var F = this.that;\n      var n = false;\n      var m = false;\n\n      if (F.width != null && F.width.toString().indexOf(\"px\") != -1) {\n        A = F.width;\n      } else {\n        if (F.width != undefined && !isNaN(F.width)) {\n          A = F.width;\n        }\n      }\n\n      if (F.width != null && F.width.toString().indexOf(\"%\") != -1) {\n        A = F.width;\n        n = true;\n      }\n\n      if (F.scrollbarautoshow) {\n        F.vScrollBar[0].style.display = \"none\";\n        F.hScrollBar[0].style.display = \"none\";\n        F.vScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex;\n        F.hScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex;\n      }\n\n      if (F.autowidth) {\n        var p = 0;\n\n        for (var B = 0; B < F.columns.records.length; B++) {\n          var e = F.columns.records[B].width;\n\n          if (e == \"auto\") {\n            e = F._measureElementWidth(F.columns.records[B].text);\n            p += e;\n          } else {\n            p += e;\n          }\n        }\n\n        if (F.vScrollBar.css(\"visibility\") != \"hidden\") {\n          p += F.scrollbarsize + 4;\n        }\n\n        A = p;\n        F.width = A;\n      }\n\n      if (F.height != null && F.height.toString().indexOf(\"px\") != -1) {\n        x = F.height;\n      } else {\n        if (F.height != undefined && !isNaN(F.height)) {\n          x = F.height;\n        }\n      }\n\n      if (F.height != null && F.height.toString().indexOf(\"%\") != -1) {\n        x = F.height;\n        m = true;\n      }\n\n      var k = function () {\n        var i = 0;\n        var w = F.showheader ? F.columnsheader != null ? F.columnsheader.height() + 2 : 0 : 0;\n        i += w;\n\n        if (F.pageable) {\n          i += F.pagerheight;\n        }\n\n        if (F._groupsheader()) {\n          i += F.groupsheaderheight;\n        }\n\n        if (F.showtoolbar) {\n          i += F.toolbarheight;\n        }\n\n        if (F.showstatusbar) {\n          i += F.statusbarheight;\n        }\n\n        if (F.showeverpresentrow && F.everpresentrowposition === \"bottom\") {\n          i += F.everpresentrowheight;\n        }\n\n        if (F.hScrollBar[0].style.visibility == \"visible\") {\n          i += 15;\n        }\n\n        return i;\n      };\n\n      if (F.autoheight && F.virtualsizeinfo) {\n        if (F.pageable && F.gotopage) {\n          var C = 0;\n          x = C + (F._pageviews[0] ? F._pageviews[0].height : 0);\n          x += k();\n\n          if (F.showemptyrow && F.dataview.totalrecords == 0) {\n            x += F.rowsheight;\n          }\n        } else {\n          var C = F.host.height() - F._gettableheight();\n\n          if (F._pageviews.length > 0) {\n            x = C + F._pageviews[F._pageviews.length - 1].height + F._pageviews[F._pageviews.length - 1].top;\n            F.vScrollBar[0].style.visibility = \"hidden\";\n          } else {\n            x = k();\n\n            if (F.showemptyrow) {\n              x += F.rowsheight;\n            }\n          }\n        }\n      } else {\n        if (F.autoheight) {\n          x = F.dataview.totalrecords * F.rowsheight;\n\n          if (F.pageable && F.gotopage) {\n            x = F.pagesize * F.rowsheight;\n          }\n\n          if (F._loading) {\n            x = 250;\n            F.dataloadelement.height(x);\n          }\n\n          x += k();\n\n          if (x > 10000) {\n            x = 10000;\n          }\n        }\n      }\n\n      if (A != null) {\n        A = parseInt(A);\n\n        if (!n) {\n          if (F.element.style.width != parseInt(F.width) + \"px\") {\n            F.element.style.width = parseInt(F.width) + \"px\";\n          }\n        } else {\n          F.element.style.width = F.width;\n        }\n\n        if (n) {\n          A = F.host.width();\n\n          if (A <= 2) {\n            A = 600;\n            F.host.width(A);\n          }\n\n          if (!F._oldWidth) {\n            F._oldWidth = A;\n          }\n        }\n      } else {\n        F.host.width(250);\n      }\n\n      if (x != null) {\n        if (this.autoheight) {\n          x += 2;\n        }\n\n        if (!m) {\n          x = parseInt(x);\n        }\n\n        if (!m) {\n          if (F.element.style.height != parseInt(x) + \"px\") {\n            F.element.style.height = parseInt(x) + \"px\";\n          }\n        } else {\n          F.element.style.height = F.height;\n        }\n\n        if (m && !F.autoheight) {\n          x = F.host.height();\n\n          if (x == 0) {\n            x = 400;\n            F.host.height(x);\n          }\n\n          if (!F._oldHeight) {\n            F._oldHeight = x;\n          }\n        }\n      } else {\n        F.host.height(250);\n      }\n\n      if (F.autoheight) {\n        F.tableheight = null;\n\n        F._gettableheight();\n      }\n\n      var v = 0;\n\n      if (F.showtoolbar) {\n        F.toolbar.width(A);\n        F.toolbar.height(F.toolbarheight - 1);\n        F.toolbar.css(\"top\", 0);\n        v += F.toolbarheight;\n        x -= parseInt(F.toolbarheight);\n      } else {\n        F.toolbar[0].style.height = \"0px\";\n      }\n\n      if (F.showstatusbar) {\n        if (F.showaggregates) {\n          F.statusbar.width(!F.table ? A : Math.max(A, F.table.width()));\n        } else {\n          F.statusbar.width(A);\n        }\n\n        F.statusbar.height(F.statusbarheight);\n      } else {\n        F.statusbar[0].style.height = \"0px\";\n      }\n\n      if (F.showeverpresentrow && F.everpresentrowposition === \"bottom\") {\n        F.addnewrow.width(A);\n        F.addnewrow.height(F.everpresentrowheight);\n      } else {\n        F.addnewrow[0].style.height = \"0px\";\n      }\n\n      if (F._groupsheader()) {\n        F.groupsheader.width(A);\n        F.groupsheader.height(F.groupsheaderheight);\n        F.groupsheader.css(\"top\", v);\n        var y = F.groupsheader.height() + 1;\n        v += y;\n\n        if (x > y) {\n          x -= parseInt(y);\n        }\n      } else {\n        if (F.groupsheader[0].style.width != A + \"px\") {\n          F.groupsheader[0].style.width = parseInt(A) + \"px\";\n        }\n\n        F.groupsheader[0].style.height = \"0px\";\n\n        if (F.groupsheader[0].style.top != v + \"px\") {\n          F.groupsheader.css(\"top\", v);\n        }\n\n        var y = F.showgroupsheader && F.groupable ? F.groupsheaderheight : 0;\n        var f = v + y + \"px\";\n\n        if (F.content[0].style.top != f) {\n          F.content.css(\"top\", v + F.groupsheaderheight);\n        }\n      }\n\n      var d = F.scrollbarsize;\n\n      if (isNaN(d)) {\n        d = parseInt(d);\n\n        if (isNaN(d)) {\n          d = \"17px\";\n        } else {\n          d = d + \"px\";\n        }\n      }\n\n      d = parseInt(d);\n      var s = 4;\n      var h = 2;\n      var j = 0;\n\n      if (F.vScrollBar[0].style.visibility == \"visible\") {\n        j = d + s;\n      }\n\n      if (F.hScrollBar[0].style.visibility == \"visible\") {\n        h = d + s + 2;\n      }\n\n      if (d == 0) {\n        j = 0;\n        h = 0;\n      }\n\n      var r = 0;\n\n      if (F.pageable) {\n        r = F.pagerheight;\n        h += F.pagerheight;\n      }\n\n      if (F.showstatusbar) {\n        h += F.statusbarheight;\n        r += F.statusbarheight;\n      }\n\n      if (F.showeverpresentrow && F.everpresentrowposition === \"bottom\") {\n        h += F.everpresentrowheight;\n        r += F.everpresentrowheight;\n      }\n\n      if (F.hScrollBar[0].style.height != d + \"px\") {\n        F.hScrollBar[0].style.height = parseInt(d) + \"px\";\n      }\n\n      if (F.hScrollBar[0].style.top != v + x - s - d - r + \"px\" || F.hScrollBar[0].style.left != \"0px\") {\n        F.hScrollBar.css({\n          top: v + x - s - d - r + \"px\",\n          left: \"0px\"\n        });\n      }\n\n      var q = F.hScrollBar[0].style.width;\n      var l = false;\n      var D = false;\n\n      if (j == 0) {\n        if (q != A - 2 + \"px\") {\n          F.hScrollBar.width(A - 2);\n          l = true;\n        }\n      } else {\n        if (q != A - d - s + \"px\") {\n          F.hScrollBar.width(A - d - s + \"px\");\n          l = true;\n        }\n      }\n\n      if (!F.autoheight) {\n        if (F.vScrollBar[0].style.width != d + \"px\") {\n          F.vScrollBar.width(d);\n          D = true;\n        }\n\n        if (F.vScrollBar[0].style.height != parseInt(x) - h + \"px\") {\n          F.vScrollBar.height(parseInt(x) - h + \"px\");\n          D = true;\n        }\n\n        if (F.vScrollBar[0].style.left != parseInt(A) - parseInt(d) - s + \"px\" || F.vScrollBar[0].style.top != v + \"px\") {\n          F.vScrollBar.css({\n            left: parseInt(A) - parseInt(d) - s + \"px\",\n            top: v\n          });\n        }\n      }\n\n      if (F.rtl) {\n        F.vScrollBar.css({\n          left: \"0px\",\n          top: v\n        });\n\n        if (F.vScrollBar.css(\"visibility\") != \"hidden\") {\n          F.hScrollBar.css({\n            left: d + 2\n          });\n        }\n      }\n\n      var o = F.vScrollInstance;\n      o.disabled = F.disabled;\n\n      if (!F.autoheight) {\n        if (D) {\n          o.refresh();\n        }\n      }\n\n      var z = F.hScrollInstance;\n      z.disabled = F.disabled;\n\n      if (l) {\n        z.refresh();\n      }\n\n      if (F.autowidth) {\n        F.hScrollBar[0].style.visibility = \"hidden\";\n      }\n\n      F.statusbarheight = parseInt(F.statusbarheight);\n      F.toolbarheight = parseInt(F.toolbarheight);\n\n      var t = function (w) {\n        if (w.vScrollBar[0].style.visibility == \"visible\" && w.hScrollBar[0].style.visibility == \"visible\") {\n          w.bottomRight[0].style.visibility = \"visible\";\n          w.bottomRight.css({\n            left: 1 + parseInt(w.vScrollBar.css(\"left\")),\n            top: parseInt(w.hScrollBar.css(\"top\"))\n          });\n\n          if (w.rtl) {\n            w.bottomRight.css(\"left\", \"0px\");\n          }\n\n          w.bottomRight.width(parseInt(d) + 3);\n          w.bottomRight.height(parseInt(d) + 4);\n          var G = w.showeverpresentrow && w.everpresentrowposition == \"bottom\";\n          var i = G ? w.everpresentrowheight : 0;\n\n          if (i > 0 && !w.showaggregates) {\n            w.bottomRight.css(\"z-index\", 99);\n            w.bottomRight.height(parseInt(d) + 4 + i);\n            w.bottomRight.css({\n              top: parseInt(w.hScrollBar.css(\"top\")) - i\n            });\n          }\n\n          if (w.showaggregates) {\n            w.bottomRight.css(\"z-index\", 99);\n            w.bottomRight.height(parseInt(d) + 4 + w.statusbarheight + i);\n            w.bottomRight.css({\n              top: parseInt(w.hScrollBar.css(\"top\")) - w.statusbarheight - i\n            });\n          }\n        } else {\n          w.bottomRight[0].style.visibility = \"hidden\";\n        }\n      };\n\n      t(this);\n\n      if (F.content[0].style.width != A - j + \"px\") {\n        F.content.width(A - j);\n      }\n\n      if (F.content[0].style.height != x - h + 3 + \"px\") {\n        F.content.height(x - h + 3);\n      }\n\n      if (F.scrollbarautoshow) {\n        if (F.content[0].style.width != A + \"px\") {\n          F.content.width(A);\n        }\n\n        if (F.content[0].style.height != x + \"px\") {\n          F.content.height(x);\n        }\n      }\n\n      if (F.content[0].style.top != v + \"px\") {\n        F.content.css(\"top\", v);\n      }\n\n      if (F.rtl) {\n        F.content.css(\"left\", j);\n\n        if (F.scrollbarautoshow) {\n          F.content.css(\"left\", \"0px\");\n        }\n\n        if (F.table) {\n          var u = F.table.width();\n\n          if (u < A - j) {\n            F.content.css(\"left\", A - u);\n          }\n        }\n      }\n\n      if (F.showstatusbar) {\n        F.statusbar.css(\"top\", v + x - F.statusbarheight - (F.pageable ? F.pagerheight : 0));\n\n        if (F.showaggregates) {\n          if (F.hScrollBar.css(\"visibility\") == \"visible\") {\n            F.hScrollBar.css({\n              top: v + x - s - d - r + F.statusbarheight + \"px\"\n            });\n            F.statusbar.css(\"top\", 1 + v + x - d - 5 - F.statusbarheight - (F.pageable ? F.pagerheight : 0));\n          }\n\n          t(this);\n        }\n\n        if (F.rtl) {\n          if (F.hScrollBar.css(\"visibility\") != \"visible\") {\n            F.statusbar.css(\"left\", F.content.css(\"left\"));\n          } else {\n            F.statusbar.css(\"left\", \"0px\");\n          }\n        }\n      }\n\n      if (F.showeverpresentrow && F.everpresentrowposition === \"bottom\") {\n        F.addnewrow.css(\"top\", v + x - (F.showstatusbar ? F.statusbarheight : 0) - (F.pageable ? F.pagerheight : 0) - F.everpresentrowheight);\n\n        if (F.rtl) {\n          if (F.hScrollBar.css(\"visibility\") != \"visible\") {\n            F.addnewrow.css(\"left\", F.content.css(\"left\"));\n          } else {\n            F.addnewrow.css(\"left\", \"0px\");\n          }\n        }\n      }\n\n      if (F.pageable) {\n        F.pager.width(A);\n        F.pager.height(F.pagerheight);\n        F.pager.css(\"top\", v + x - F.pagerheight - 1);\n      } else {\n        F.pager[0].style.height = \"0px\";\n      }\n\n      if (F.table != null) {\n        var g = -2;\n\n        if (F.vScrollBar[0].style.visibility == \"visible\") {\n          g = F.scrollbarsize + 3;\n        }\n\n        if (F.hScrollBar[0].style.visibility == \"visible\") {\n          var E = g + F.table.width() - F.host.width();\n\n          if (E >= 0) {\n            F.hScrollBar.jqxScrollBar(\"max\", E);\n          }\n\n          if (F.hScrollBar[0].style.visibility == \"visible\" && E == 0) {\n            F.hScrollBar[0].style.visibility = \"hidden\";\n\n            F._arrange();\n          }\n        }\n      }\n\n      if (A != parseInt(F.dataloadelement[0].style.width)) {\n        F.dataloadelement[0].style.width = F.element.style.width;\n      }\n\n      if (x != parseInt(F.dataloadelement[0].style.height)) {\n        F.dataloadelement[0].style.height = F.element.style.height;\n      }\n\n      if (this.pagergotoinput) {\n        if (this.pagergotoinput.offset().top !== this.pagergoto.offset().top) {\n          this.pagergotoinput.css(\"visibility\", \"hidden\");\n          this.pagergoto.css(\"visibility\", \"hidden\");\n        } else {\n          this.pagergotoinput.css(\"visibility\", \"inherit\");\n          this.pagergoto.css(\"visibility\", \"inherit\");\n        }\n      }\n\n      F._hostwidth = A;\n    },\n    destroy: function () {\n      delete b.jqx.dataFormat.datescache;\n      delete this.gridlocalization;\n      b.jqx.utilities.resize(this.host, null, true);\n\n      if (document.referrer != \"\" || window.frameElement) {\n        if (window.top != null && window.top != window.self) {\n          this.removeHandler(b(window.top.document), \"mouseup.grid\" + this.element.id);\n        }\n      }\n\n      if (this.table && this.table[0]) {\n        var m = this.table[0].rows.length;\n\n        for (var k = 0; k < m; k++) {\n          var q = this.table[0].rows[k];\n          var p = q.cells;\n          var f = p.length;\n\n          for (var h = 0; h < f; h++) {\n            b(q.cells[h]).remove();\n            q.cells[h] = null;\n            delete q.cells[h];\n          }\n\n          q.cells = null;\n\n          if (q.cells) {\n            delete q.cells;\n          }\n\n          b(this.table[0].rows[k]).remove();\n          this.table[0].rows[k] = null;\n        }\n\n        try {\n          delete this.table[0].rows;\n        } catch (n) {}\n\n        this.table.remove();\n        delete this.table;\n      }\n\n      if (this.columns && this.columns.records) {\n        for (var k = 0; k < this.columns.records.length; k++) {\n          var e = this.columns.records[k];\n\n          if (e.addnewrowwidget) {\n            if (e.destroyeverpresentrowwidget) {\n              e.destroyeverpresentrowwidget(e.addnewrowwidget);\n            }\n          }\n\n          if (e.destroywidget) {\n            if (e.destroywidget) {\n              e.destroywidget(e.widget);\n            }\n          }\n\n          this._removecolumnhandlers(this.columns.records[k]);\n\n          if (e.element) {\n            b(e.element).remove();\n            b(e.sortasc).remove();\n            b(e.sortdesc).remove();\n            b(e.filtericon).remove();\n            b(e.menu).remove();\n            e.element = null;\n            e.uielement = null;\n            e.sortasc = null;\n            e.sortdesc = null;\n            e.filtericon = null;\n            e.menu = null;\n            delete e.element;\n            delete e.uielement;\n            delete e.sortasc;\n            delete e.sortdesc;\n            delete e.filtericon;\n            delete e.menu;\n            delete this.columnsrow[0].cells[k];\n          }\n        }\n\n        try {\n          delete this.columnsrow[0].cells;\n        } catch (n) {}\n\n        delete this.columnsrow;\n      }\n\n      b.removeData(document.body, \"contextmenu\" + this.element.id);\n\n      if (this.host.jqxDropDownList) {\n        if (this._destroyfilterpanel) {\n          this._destroyfilterpanel();\n        }\n      }\n\n      if (this.editable && this._destroyeditors) {\n        this._destroyeditors();\n      }\n\n      if (this.filterable && this._destroyedfilters && this.showfilterrow) {\n        this._destroyedfilters();\n      }\n\n      if (this.host.jqxMenu) {\n        if (this.gridmenu) {\n          this.removeHandler(b(document), \"click.menu\" + this.element.id);\n          this.removeHandler(this.gridmenu, \"keydown\");\n          this.removeHandler(this.gridmenu, \"closed\");\n          this.removeHandler(this.gridmenu, \"itemclick\");\n          this.gridmenu.jqxMenu(\"destroy\");\n          this.gridmenu = null;\n        }\n      }\n\n      if (this.pagershowrowscombo) {\n        this.pagershowrowscombo.jqxDropDownList(\"destroy\");\n        this.pagershowrowscombo = null;\n      }\n\n      if (this.pagerrightbutton) {\n        this.removeHandler(this.pagerrightbutton, \"mousedown\");\n        this.removeHandler(this.pagerrightbutton, \"mouseup\");\n        this.removeHandler(this.pagerrightbutton, \"click\");\n        this.pagerrightbutton.jqxButton(\"destroy\");\n        this.pagerrightbutton = null;\n      }\n\n      if (this.pagerleftbutton) {\n        this.removeHandler(this.pagerleftbutton, \"mousedown\");\n        this.removeHandler(this.pagerleftbutton, \"mouseup\");\n        this.removeHandler(this.pagerleftbutton, \"click\");\n        this.pagerleftbutton.jqxButton(\"destroy\");\n        this.removeHandler(b(document), \"mouseup.pagerbuttons\" + this.element.id);\n        this.pagerleftbutton = null;\n      }\n\n      this.removeHandler(b(document), \"selectstart.\" + this.element.id);\n      this.removeHandler(b(document), \"mousedown.resize\" + this.element.id);\n      this.removeHandler(b(document), \"mouseup.resize\" + this.element.id);\n      this.removeHandler(b(document), \"mousemove.resize\" + this.element.id);\n\n      if (this.isTouchDevice()) {\n        var l = b.jqx.mobile.getTouchEventName(\"touchmove\") + \".resize\" + this.element.id;\n        var d = b.jqx.mobile.getTouchEventName(\"touchstart\") + \".resize\" + this.element.id;\n        var g = b.jqx.mobile.getTouchEventName(\"touchend\") + \".resize\" + this.element.id;\n        this.removeHandler(b(document), l);\n        this.removeHandler(b(document), d);\n        this.removeHandler(b(document), g);\n      }\n\n      this.removeHandler(b(document), \"mousedown.reorder\" + this.element.id);\n      this.removeHandler(b(document), \"mouseup.reorder\" + this.element.id);\n      this.removeHandler(b(document), \"mousemove.reorder\" + this.element.id);\n\n      if (this.isTouchDevice()) {\n        var l = b.jqx.mobile.getTouchEventName(\"touchmove\") + \".reorder\" + this.element.id;\n        var d = b.jqx.mobile.getTouchEventName(\"touchstart\") + \".reorder\" + this.element.id;\n        var g = b.jqx.mobile.getTouchEventName(\"touchend\") + \".reorder\" + this.element.id;\n        this.removeHandler(b(document), l);\n        this.removeHandler(b(document), d);\n        this.removeHandler(b(document), g);\n      }\n\n      this.removeHandler(b(window), \"resize.\" + this.element.id);\n\n      if (this.resizeline) {\n        this.resizeline.remove();\n      }\n\n      if (this.resizestartline) {\n        this.resizestartline.remove();\n      }\n\n      if (this.groupable) {\n        var l = \"mousemove.grouping\" + this.element.id;\n        var d = \"mousedown.grouping\" + this.element.id;\n        var g = \"mouseup.grouping\" + this.element.id;\n        this.removeHandler(b(document), l);\n        this.removeHandler(b(document), d);\n        this.removeHandler(b(document), g);\n      }\n\n      if (this.columnsreorder) {\n        var l = \"mousemove.reorder\" + this.element.id;\n        var d = \"mousedown.reorder\" + this.element.id;\n        var g = \"mouseup.reorder\" + this.element.id;\n        this.removeHandler(b(document), l);\n        this.removeHandler(b(document), d);\n        this.removeHandler(b(document), g);\n        delete this.columnsbounds;\n      }\n\n      if (this.content) {\n        this.removeHandler(this.content, \"mousedown\");\n        this.removeHandler(this.content, \"scroll\");\n      }\n\n      this._removeHandlers();\n\n      this.hScrollInstance.destroy();\n      this.vScrollInstance.destroy();\n      this.hScrollBar.remove();\n      this.vScrollBar.remove();\n\n      this._clearcaches();\n\n      delete this.hScrollInstance;\n      delete this.vScrollInstance;\n      delete this.visiblerows;\n      delete this.hittestinfo;\n      delete this.rows;\n      delete this.columns;\n      delete this.columnsbydatafield;\n      delete this.pagescache;\n      delete this.pageviews;\n      delete this.cellscache;\n      delete this.heights;\n      delete this.hiddens;\n      delete this.hiddenboundrows;\n      delete this.heightboundrows;\n      delete this.detailboundrows;\n      delete this.details;\n      delete this.expandedgroups;\n      delete this._rowdetailscache;\n      delete this._rowdetailselementscache;\n      delete this.columnsmenu;\n\n      if (this.columnsheader) {\n        this.columnsheader.remove();\n        delete this.columnsheader;\n      }\n\n      if (this.selectionarea) {\n        this.selectionarea.remove();\n        delete this.selectionarea;\n      }\n\n      if (this.menuitemsarray && this.menuitemsarray.length) {\n        var o = this.menuitemsarray.length;\n\n        for (var k = 0; k < o; k++) {\n          b(this.menuitemsarray[k]).remove();\n        }\n      }\n\n      delete this.menuitemsarray;\n\n      this.dataview._clearcaches();\n\n      this.content.removeClass();\n      this.content.remove();\n      this.content = null;\n      delete this.content;\n      this.vScrollBar = null;\n      this.hScrollBar = null;\n      delete this.hScrollBar;\n      delete this.hScrollBar;\n\n      if (this.gridcontent) {\n        this.gridcontent.remove();\n        delete this.gridcontent;\n      }\n\n      if (this.gridmenu) {\n        this.gridmenu = null;\n        delete this.gridmenu;\n      }\n\n      delete this._mousemovefunc;\n      delete this._mousewheelfunc;\n      this.dataview.destroy();\n      delete this.dataview;\n      this.bottomRight.remove();\n      delete this.bottomRight;\n      this.wrapper.remove();\n      delete this.wrapper;\n\n      if (this.pagerdiv) {\n        this.pagerdiv.remove();\n        delete this.pagerdiv;\n      }\n\n      if (this.pagerpageinput) {\n        this.pagerpageinput.remove();\n        delete this.pagerpageinput;\n      }\n\n      if (this.pagergoto) {\n        this.pagergoto.remove();\n        delete this.pagergoto;\n      }\n\n      if (this.pagershowrows) {\n        this.pagershowrows.remove();\n        delete this.pagershowrows;\n      }\n\n      if (this.pagerfirstbutton) {\n        this.pagerfirstbutton.remove();\n        delete this.pagerfirstbutton;\n      }\n\n      if (this.pagerlastbutton) {\n        this.pagerlastbutton.remove();\n        delete this.pagerlastbutton;\n      }\n\n      if (this.pagerbuttons) {\n        this.pagerbuttons.remove();\n        delete this.pagerbuttons;\n      }\n\n      if (this.pagerdetails) {\n        this.pagerdetails.remove();\n        delete this.pagerdetails;\n      }\n\n      if (this.pagergotoinput) {\n        this.pagergotoinput.remove();\n        delete this.pagergotoinput;\n      }\n\n      this.pager.remove();\n      delete this.pager;\n      this.groupsheader.remove();\n      delete this.groupsheader;\n      this.dataloadelement.remove();\n      delete this.dataloadelement;\n      this.toolbar.remove();\n      delete this.toolbar;\n      this.statusbar.remove();\n      delete this.statusbar;\n      this.host.removeData();\n      this.host.removeClass();\n      this.host.remove();\n      this.host = null;\n      delete this.host;\n      delete this.element;\n      delete this.set;\n      delete this.get;\n      delete this.that;\n      delete this.call;\n    },\n    _initializeColumns: function () {\n      var f = this.source ? this.source.datafields : null;\n\n      if (f == null && this.source && this.source._source) {\n        f = this.source._source.datafields;\n      }\n\n      var k = f ? f.length > 0 : false;\n\n      if (this.autogeneratecolumns) {\n        var m = new Array();\n\n        if (f) {\n          b.each(f, function () {\n            var i = {\n              datafield: this.name,\n              text: this.text || this.name,\n              cellsformat: this.format || \"\"\n            };\n            m.push(i);\n          });\n        } else {\n          if (this.source.records.length > 0) {\n            var o = this.source.records[0];\n\n            for (var h in o) {\n              if (h != \"uid\") {\n                var g = {\n                  width: 100,\n                  datafield: h,\n                  text: h\n                };\n                m.push(g);\n              }\n            }\n          }\n        }\n\n        this.columns = m;\n      }\n\n      if (this.columns && this.columns.records) {\n        for (var j = 0; j < this.columns.records.length; j++) {\n          this._removecolumnhandlers(this.columns.records[j]);\n        }\n      }\n\n      var l = this.that;\n      var e = new b.jqx.collection(this.element);\n      var d = 0;\n      this._haspinned = false;\n\n      if (!this._columns) {\n        this._columns = this.columns;\n      } else {\n        this.columns = this._columns;\n      }\n\n      if (this.groupable) {\n        b.each(this.groups, function (i) {\n          var p = new c(l, this);\n          p.visibleindex = d++;\n          p.width = l.groupindentwidth;\n          e.add(p);\n          p.grouped = true;\n          p.filterable = false;\n          p.sortable = false;\n          p.editable = false;\n          p.resizable = false;\n          p.draggable = false;\n        });\n      }\n\n      if (this.rowdetails && this.showrowdetailscolumn) {\n        var g = new c(l, this);\n        g.visibleindex = d++;\n        g.width = l.groupindentwidth;\n        g.pinned = true;\n        g.editable = false;\n        g.filterable = false;\n        g.draggable = false;\n        g.groupable = false;\n        g.resizable = false;\n        e.add(g);\n        l._haspinned = true;\n      }\n\n      if (this.selectionmode == \"checkbox\") {\n        var g = new c(l, null);\n        g.visibleindex = d++;\n        g.width = l.groupindentwidth;\n        g.checkboxcolumn = true;\n        g.editable = false;\n        g.columntype = \"checkbox\";\n        g.groupable = false;\n        g.draggable = false;\n        g.filterable = false;\n        g.resizable = false;\n        g.datafield = \"_checkboxcolumn\";\n        e.add(g);\n      }\n\n      var n = new Array();\n      b.each(this.columns, function (i) {\n        if (l.columns[i] != undefined) {\n          var p = new c(l, this);\n          p.visibleindex = d++;\n\n          if (this.dataField != undefined) {\n            this.datafield = this.dataField;\n          }\n\n          if (this.pinned) {\n            l._haspinned = true;\n          }\n\n          if (l.showeverpresentrow) {\n            if (this.datafield === \"addButtonColumn\" || this.datafield === \"resetButtonColumn\" || this.datafield === \"updateButtonColumn\" || this.datafield === \"deleteButtonColumn\") {\n              p.editable = false;\n              p.groupable = false;\n              p.draggable = false;\n              p.filterable = false;\n              p.resizable = false;\n              p.menu = false;\n            }\n          }\n\n          if (this.datafield == null) {\n            if (l.source && l.source._source && l.source._source.datatype == \"array\") {\n              if (!k) {\n                if (!l.source._source.datafields) {\n                  l.source._source.datafields = new Array();\n\n                  l.source._source.datafields.push({\n                    name: i.toString()\n                  });\n                } else {\n                  l.source._source.datafields.push({\n                    name: i.toString()\n                  });\n                }\n              }\n\n              this.datafield = i.toString();\n              this.displayfield = i.toString();\n              p.datafield = this.datafield;\n              p.displayfield = this.displayfield;\n            }\n          } else {\n            if (n[this.datafield]) {\n              throw new Error(\"jqxGrid: Invalid column 'datafield' setting. jqxGrid's columns should be initialized with unique data fields.\");\n              l.host.remove();\n              return false;\n            } else {\n              n[this.datafield] = true;\n            }\n          }\n\n          e.add(p);\n        }\n      });\n\n      if (this.adaptive) {\n        var g = new c(l, null);\n        g.visibleindex = d++;\n        g.width = l.groupindentwidth;\n        g.editable = false;\n        g.columntype = \"adaptive\";\n        g.cellsalign = \"center\";\n        g.groupable = false;\n        g.draggable = false;\n        g.menu = false;\n        g.sortable = false;\n        g.filterable = false;\n        g.resizable = false;\n        g.datafield = \"_adaptivecolumn\";\n        e.add(g);\n      }\n\n      if (this.rtl) {\n        e.records.reverse();\n      }\n\n      this.columns = e;\n    },\n    _initializeRows: function () {\n      var d = new b.jqx.collection(this.element);\n\n      if (this.rows) {\n        this.rows.clear();\n      }\n\n      this.rows = d;\n    },\n    _raiseEvent: function (j, e) {\n      if (e == undefined) {\n        e = {\n          owner: null\n        };\n      }\n\n      if (this._trigger === false) {\n        return;\n      }\n\n      var f = this.events[j];\n\n      if (!this._camelCase) {\n        f = f.toLowerCase();\n      }\n\n      if (j == 2 || j == 15) {\n        if (this.showeverpresentrow && (this.everpresentrowactions.indexOf(\"delete\") >= 0 || this.everpresentrowactions.indexOf(\"update\") >= 0)) {\n          if (this.updateeverpresentrow) {\n            var i = this;\n          }\n\n          setTimeout(function () {\n            i.updateeverpresentrow();\n          }, 50);\n        }\n      }\n\n      var g = e;\n      g.owner = this;\n      var h = new b.Event(f);\n      h.owner = this;\n      h.args = g;\n      var d = this.host.trigger(h);\n      e = h.args;\n      return d;\n    },\n    wheel: function (f, e) {\n      if (e.autoheight && e.hScrollBar.css(\"visibility\") != \"visible\") {\n        f.returnValue = true;\n        return true;\n      }\n\n      var g = 0;\n\n      if (!f) {\n        f = window.event;\n      }\n\n      if (f.originalEvent && f.originalEvent.wheelDelta) {\n        f.wheelDelta = f.originalEvent.wheelDelta;\n      }\n\n      if (f.wheelDelta) {\n        g = f.wheelDelta / 120;\n      } else {\n        if (f.detail) {\n          g = -f.detail / 3;\n        }\n      }\n\n      if (g) {\n        var d = e._handleDelta(g);\n\n        if (d) {\n          if (f.preventDefault) {\n            f.preventDefault();\n          }\n\n          if (f.originalEvent != null) {\n            f.originalEvent.mouseHandled = true;\n          }\n\n          if (f.stopPropagation != undefined) {\n            f.stopPropagation();\n          }\n        }\n\n        if (d) {\n          d = false;\n          f.returnValue = d;\n          return d;\n        } else {\n          return false;\n        }\n      }\n\n      if (f.preventDefault) {\n        f.preventDefault();\n      }\n\n      f.returnValue = false;\n    },\n    _handleDelta: function (f) {\n      if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n        var e = this.vScrollInstance.value;\n\n        if (f < 0) {\n          this.scrollDown();\n        } else {\n          this.scrollUp();\n        }\n\n        var d = this.vScrollInstance.value;\n\n        if (e != d) {\n          return true;\n        }\n      } else {\n        if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n          var e = this.hScrollInstance.value;\n\n          if (f > 0) {\n            if (this.hScrollInstance.value > 2 * this.horizontalscrollbarstep) {\n              this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * this.horizontalscrollbarstep);\n            } else {\n              this.hScrollInstance.setPosition(0);\n            }\n          } else {\n            if (this.hScrollInstance.value < this.hScrollInstance.max) {\n              this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * this.horizontalscrollbarstep);\n            } else {\n              this.hScrollInstance.setPosition(this.hScrollInstance.max);\n            }\n          }\n\n          var d = this.hScrollInstance.value;\n\n          if (e != d) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    scrollDown: function () {\n      if (this.vScrollBar.css(\"visibility\") == \"hidden\") {\n        return;\n      }\n\n      var d = this.vScrollInstance;\n\n      if (d.value + this.rowsheight <= d.max) {\n        d.setPosition(parseInt(d.value) + this.rowsheight);\n      } else {\n        d.setPosition(d.max);\n      }\n    },\n    scrollUp: function () {\n      if (this.vScrollBar.css(\"visibility\") == \"hidden\") {\n        return;\n      }\n\n      var d = this.vScrollInstance;\n\n      if (d.value - this.rowsheight >= d.min) {\n        d.setPosition(parseInt(d.value) - this.rowsheight);\n      } else {\n        d.setPosition(d.min);\n      }\n    },\n    _removeHandlers: function () {\n      var d = this.that;\n      d.removeHandler(b(window), \"orientationchange.jqxgrid\" + d.element.id);\n      d.removeHandler(b(window), \"orientationchanged.jqxgrid\" + d.element.id);\n      d.removeHandler(d.vScrollBar, \"valueChanged\");\n      d.removeHandler(d.hScrollBar, \"valueChanged\");\n      d.vScrollInstance.valueChanged = null;\n      d.hScrollInstance.valueChanged = null;\n      var e = \"mousedown.jqxgrid\";\n\n      if (d.isTouchDevice()) {\n        e = b.jqx.mobile.getTouchEventName(\"touchend\");\n      }\n\n      d.removeHandler(d.host, \"dblclick.jqxgrid\");\n      d.removeHandler(d.host, e);\n      d.removeHandler(d.content, \"mousemove\", d._mousemovefunc);\n      d.removeHandler(d.host, \"mouseleave.jqxgrid\");\n      d.removeHandler(d.content, \"mouseenter\");\n      d.removeHandler(d.content, \"mouseleave\");\n      d.removeHandler(d.content, \"mousedown\");\n      d.removeHandler(d.content, \"scroll\");\n      d.removeHandler(d.content, \"selectstart.\" + d.element.id);\n      d.removeHandler(d.host, \"dragstart.\" + d.element.id);\n      d.removeHandler(d.host, \"keydown.edit\" + d.element.id);\n      d.removeHandler(b(document), \"keydown.edit\" + d.element.id);\n      d.removeHandler(b(document), \"keyup.edit\" + d.element.id);\n\n      if (d._mousemovedocumentfunc) {\n        d.removeHandler(b(document), \"mousemove.selection\" + d.element.id, d._mousemovedocumentfunc);\n      }\n\n      d.removeHandler(b(document), \"mouseup.selection\" + d.element.id);\n\n      if (d._mousewheelfunc) {\n        d.removeHandler(d.host, \"mousewheel\", d._mousewheelfunc);\n      }\n\n      if (d.editable) {\n        d.removeHandler(b(document), \"mousedown.gridedit\" + d.element.id);\n      }\n\n      if (d.host.off) {\n        d.content.off(\"mousemove\");\n        d.host.off(\"mousewheel\");\n      }\n    },\n    _addHandlers: function () {\n      var e = this.that;\n      var d = e.isTouchDevice();\n\n      if (!d) {\n        e.addHandler(e.host, \"dragstart.\" + e.element.id, function (j) {\n          return false;\n        });\n      }\n\n      if (e.scrollbarautoshow) {\n        e.addHandler(e.host, \"mouseenter.gridscroll\" + e.element.id, function (j) {\n          e.vScrollBar.fadeIn(\"fast\");\n          e.hScrollBar.fadeIn(\"fast\");\n        });\n        e.addHandler(e.host, \"mouseleave.gridscroll\" + e.element.id, function (j) {\n          if (!e.vScrollInstance.isScrolling() && !e.hScrollInstance.isScrolling()) {\n            e.vScrollBar.fadeOut(\"fast\");\n            e.hScrollBar.fadeOut(\"fast\");\n          }\n        });\n      }\n\n      if (e.editable) {\n        e.addHandler(b(document), \"mousedown.gridedit\" + e.element.id, function (m) {\n          if (e.editable && e.begincelledit) {\n            if (e.editcell) {\n              if (!e.vScrollInstance.isScrolling() && !e.vScrollInstance.isScrolling()) {\n                var r = e.host.coord();\n                var q = e.host.width();\n                var n = e.host.height();\n                var v = false;\n                var k = false;\n                var t = false;\n\n                if (m.pageY < r.top || m.pageY > r.top + n) {\n                  v = true;\n                  k = true;\n                }\n\n                if (m.pageX < r.left || m.pageX > r.left + q) {\n                  v = true;\n                  t = true;\n                }\n\n                if (v) {\n                  var u = false;\n\n                  if (e.editcell && e.editcell.editor) {\n                    switch (e.editcell.columntype) {\n                      case \"datetimeinput\":\n                        if (e.editcell.editor.jqxDateTimeInput && e.editcell.editor.jqxDateTimeInput(\"container\") && e.editcell.editor.jqxDateTimeInput(\"container\")[0].style.display == \"block\") {\n                          var s = e.editcell.editor.jqxDateTimeInput(\"container\").coord().top;\n                          var j = e.editcell.editor.jqxDateTimeInput(\"container\").coord().top + e.editcell.editor.jqxDateTimeInput(\"container\").height();\n\n                          if (k && (m.pageY < s || m.pageY > j)) {\n                            v = true;\n                            e.editcell.editor.jqxDateTimeInput(\"close\");\n                          } else {\n                            return;\n                          }\n                        }\n\n                        break;\n\n                      case \"combobox\":\n                        if (e.editcell.editor.jqxComboBox && e.editcell.editor.jqxComboBox(\"container\") && e.editcell.editor.jqxComboBox(\"container\")[0].style.display == \"block\") {\n                          var s = e.editcell.editor.jqxComboBox(\"container\").coord().top;\n                          var j = e.editcell.editor.jqxComboBox(\"container\").coord().top + e.editcell.editor.jqxComboBox(\"container\").height();\n\n                          if (k && (m.pageY < s || m.pageY > j)) {\n                            v = true;\n                            e.editcell.editor.jqxComboBox(\"close\");\n                          } else {\n                            return;\n                          }\n                        }\n\n                        break;\n\n                      case \"dropdownlist\":\n                        if (e.editcell.editor.jqxDropDownList && e.editcell.editor.jqxDropDownList(\"container\") && e.editcell.editor.jqxDropDownList(\"container\")[0].style.display == \"block\") {\n                          var s = e.editcell.editor.jqxDropDownList(\"container\").coord().top;\n                          var j = e.editcell.editor.jqxDropDownList(\"container\").coord().top + e.editcell.editor.jqxDropDownList(\"container\").height();\n\n                          if (k && (m.pageY < s || m.pageY > j)) {\n                            v = true;\n                            e.editcell.editor.jqxDropDownList(\"close\");\n                          } else {\n                            return;\n                          }\n                        }\n\n                        break;\n\n                      case \"template\":\n                      case \"custom\":\n                        var l = [\"jqxDropDownList\", \"jqxComboBox\", \"jqxDropDownButton\", \"jqxDateTimeInput\"];\n\n                        var p = function (A) {\n                          var z = e.editcell.editor.data();\n\n                          if (z[A] && z[A].instance.container && z[A].instance.container[0].style.display == \"block\") {\n                            var x = z[A].instance;\n                            var B = x.container.coord().top;\n                            var y = x.container.coord().top + x.container.height();\n\n                            if (k && (m.pageY < B || m.pageY > y)) {\n                              v = true;\n                              x.close();\n                              return true;\n                            } else {\n                              return false;\n                            }\n                          }\n                        };\n\n                        for (var o = 0; o < l.length; o++) {\n                          var w = p(l[o]);\n\n                          if (w == false) {\n                            return;\n                          }\n                        }\n\n                        break;\n                    }\n                  }\n\n                  e.endcelledit(e.editcell.row, e.editcell.column, false, true);\n                  e._oldselectedcell = null;\n                }\n              }\n            }\n          }\n        });\n      }\n\n      e.vScrollInstance.valueChanged = function (j) {\n        if (e.virtualsizeinfo) {\n          e._closemenu();\n\n          if (e.scrollmode != \"physical\") {\n            e._renderrows(e.virtualsizeinfo);\n\n            e.currentScrollValue = j.currentValue;\n          } else {\n            if (e.currentScrollValue != undefined && Math.abs(e.currentScrollValue - j.currentValue) >= 5) {\n              e._renderrows(e.virtualsizeinfo);\n\n              e.currentScrollValue = j.currentValue;\n            } else {\n              e._renderrows(e.virtualsizeinfo);\n\n              e.currentScrollValue = j.currentValue;\n            }\n          }\n\n          if (!e.pageable && !e.groupable && e.dataview.virtualmode) {\n            if (e.loadondemandupdate) {\n              clearTimeout(e.loadondemandupdate);\n            }\n\n            e.loadondemandupdate = setTimeout(function () {\n              e.loadondemand = true;\n\n              e._renderrows(e.virtualsizeinfo);\n            }, 100);\n          }\n\n          if (d) {\n            e._lastScroll = new Date();\n          }\n        }\n      };\n\n      e.hScrollInstance.valueChanged = function (l) {\n        if (e.virtualsizeinfo) {\n          e._closemenu();\n\n          var k = function () {\n            e._renderhorizontalscroll();\n\n            e._renderrows(e.virtualsizeinfo);\n\n            if (e.editcell && !e.editrow) {\n              if (e._showcelleditor && e.editcell.editing) {\n                if (!e.hScrollInstance.isScrolling()) {\n                  e._showcelleditor(e.editcell.row, e.getcolumn(e.editcell.column), e.editcell.element, e.editcell.init);\n                }\n              }\n            }\n          };\n\n          if (d) {\n            k();\n          } else {\n            var j = e._browser == undefined ? e._isIE10() : e._browser;\n\n            if (navigator && navigator.userAgent.indexOf(\"Safari\") != -1 && navigator.userAgent.indexOf(\"Chrome\") == -1) {\n              if (e._hScrollTimer) {\n                clearTimeout(e._hScrollTimer);\n              }\n\n              e._hScrollTimer = setTimeout(function () {\n                k();\n              }, 1);\n            } else {\n              if (b.jqx.browser.msie) {\n                if (e._hScrollTimer) {\n                  clearTimeout(e._hScrollTimer);\n                }\n\n                e._hScrollTimer = setTimeout(function () {\n                  k();\n                }, 0.01);\n              } else {\n                k();\n              }\n            }\n          }\n\n          if (d) {\n            e._lastScroll = new Date();\n          }\n        }\n      };\n\n      e._mousewheelfunc = e._mousewheelfunc || function (j) {\n        if (!e.editcell && e.enablemousewheel) {\n          e.wheel(j, e);\n          return false;\n        }\n      };\n\n      e.removeHandler(e.host, \"mousewheel\", e._mousewheelfunc);\n      e.addHandler(e.host, \"mousewheel\", e._mousewheelfunc);\n      var h = \"mousedown.jqxgrid\";\n\n      if (d) {\n        h = b.jqx.mobile.getTouchEventName(\"touchend\");\n      }\n\n      e.addHandler(e.host, h, function (k) {\n        if (e.isTouchDevice()) {\n          e._newScroll = new Date();\n\n          if (e._newScroll - e._lastScroll < 500) {\n            return false;\n          }\n\n          if (b(k.target).ischildof(e.vScrollBar)) {\n            return false;\n          }\n\n          if (b(k.target).ischildof(e.hScrollBar)) {\n            return false;\n          }\n        }\n\n        e._mousedown = new Date();\n\n        var j = e._handlemousedown(k, e);\n\n        if (e.isNestedGrid) {\n          if (!e.resizablecolumn && !e.columnsreorder) {\n            k.stopPropagation();\n          }\n        }\n\n        e._lastmousedown = new Date();\n        return j;\n      });\n\n      if (!d) {\n        e.addHandler(e.host, \"dblclick.jqxgrid\", function (k) {\n          if (e.editable && e.begincelledit && e.editmode == \"dblclick\") {\n            e._handledblclick(k, e);\n          } else {\n            if (b.jqx.browser.msie && b.jqx.browser.version < 9) {\n              var j = e._handlemousedown(k, e);\n            }\n          }\n\n          e.mousecaptured = false;\n          e._lastmousedown = new Date();\n          return true;\n        });\n\n        e._mousemovefunc = function (j) {\n          if (e._handlemousemove) {\n            return e._handlemousemove(j, e);\n          }\n        };\n\n        e.addHandler(e.content, \"mousemove\", e._mousemovefunc);\n\n        if (e._handlemousemoveselection) {\n          e._mousemovedocumentfunc = function (j) {\n            if (e._handlemousemoveselection) {\n              return e._handlemousemoveselection(j, e);\n            }\n          };\n\n          e.addHandler(b(document), \"mousemove.selection\" + e.element.id, e._mousemovedocumentfunc);\n        }\n\n        e.addHandler(b(document), \"mouseup.selection\" + e.element.id, function (j) {\n          if (e._handlemouseupselection) {\n            e._handlemouseupselection(j, e);\n          }\n        });\n      }\n\n      try {\n        if (document.referrer != \"\" || window.frameElement) {\n          if (window.top != null && window.top != window.self) {\n            var i = null;\n\n            if (window.parent && document.referrer) {\n              i = document.referrer;\n            }\n\n            if (i && i.indexOf(document.location.host) != -1) {\n              var g = function (k) {\n                if (e._handlemouseupselection) {\n                  try {\n                    e._handlemouseupselection(k, e);\n                  } catch (j) {}\n                }\n              };\n\n              e.addHandler(b(window.top.document), \"mouseup.grid\" + e.element.id, g);\n            }\n          }\n        }\n      } catch (f) {}\n\n      e.focused = false;\n\n      if (!d) {\n        e.addHandler(e.content, \"mouseenter\", function (j) {\n          e.focused = true;\n\n          if (e.wrapper) {\n            e.wrapper.attr(\"tabindex\", 1);\n            e.content.attr(\"tabindex\", 2);\n          }\n\n          if (e._overlayElement) {\n            if (e.vScrollInstance.isScrolling() || e.hScrollInstance.isScrolling()) {\n              e._overlayElement[0].style.visibility = \"visible\";\n            } else {\n              e._overlayElement[0].style.visibility = \"hidden\";\n            }\n          }\n        });\n        e.addHandler(e.content, \"mouseleave\", function (j) {\n          if (e._handlemousemove) {\n            if (e.enablehover) {\n              e._clearhoverstyle();\n            }\n          }\n\n          if (e._overlayElement) {\n            e._overlayElement[0].style.visibility = \"hidden\";\n          }\n\n          e.focused = false;\n        });\n\n        if (e.groupable || e.columnsreorder) {\n          e.addHandler(b(document), \"selectstart.\" + e.element.id, function (j) {\n            if (e.__drag === true) {\n              return false;\n            }\n          });\n        }\n\n        e.addHandler(e.content, \"selectstart.\" + e.element.id, function (j) {\n          if (e.enablebrowserselection) {\n            return true;\n          }\n\n          if (e.showfilterrow) {\n            if (b(j.target).ischildof(e.filterrow)) {\n              return true;\n            }\n          }\n\n          if (e.showeverpresentrow) {\n            if (b(j.target).ischildof(e.addnewrow)) {\n              return true;\n            }\n\n            if (e.addnewrowtop) {\n              if (b(j.target).ischildof(e.addnewrowtop)) {\n                return true;\n              }\n            }\n          }\n\n          if (j.target.className && j.target.className.indexOf(\"jqx-grid-widget\") >= 0) {\n            return true;\n          }\n\n          if (!e.editcell) {\n            return false;\n          }\n\n          if (j.stopPropagation) {\n            j.stopPropagation();\n          }\n        });\n        e.addHandler(b(document), \"keyup.edit\" + e.element.id, function (j) {\n          e._keydown = false;\n        });\n        e.addHandler(b(document), \"keydown.edit\" + e.element.id, function (l) {\n          if (e.adaptiveview) {\n            return true;\n          }\n\n          e._keydown = true && !e.editcell;\n          var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0;\n\n          if (k === 20) {\n            if (!e._capsLock) {\n              e._capsLock = true;\n            } else {\n              e._capsLock = false;\n            }\n          }\n\n          if (e.handlekeyboardnavigation) {\n            if (e.focused || l.target === e.element || b(l.target).ischildof(e.host)) {\n              var m = e.handlekeyboardnavigation(l);\n\n              if (m == true) {\n                return false;\n              }\n            }\n          }\n\n          if (e.editable && e.editcell) {\n            if (k == 13 || k == 27 || k == 9 || k == 32) {\n              if (e._handleeditkeydown) {\n                j = e._handleeditkeydown(l, e);\n              }\n            }\n          }\n\n          if (k == 27) {\n            e.mousecaptured = false;\n\n            if (e.selectionarea.css(\"visibility\") == \"visible\") {\n              e.selectionarea.css(\"visibility\", \"hidden\");\n            }\n          }\n\n          if (b.jqx.browser.msie && b.jqx.browser.version < 12 && e.focused && !e.isNestedGrid) {\n            if (k == 13 && j == false) {\n              return j;\n            }\n\n            var j = true;\n            var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0;\n\n            if (!e.editcell && e.editable && e.editmode != \"programmatic\") {\n              if (e._handleeditkeydown) {\n                j = e._handleeditkeydown(l, e);\n              }\n            }\n\n            if (j && e.keyboardnavigation && e._handlekeydown) {\n              j = e._handlekeydown(l, e);\n\n              if (!j) {\n                if (l.preventDefault) {\n                  l.preventDefault();\n                }\n\n                if (l.stopPropagation != undefined) {\n                  l.stopPropagation();\n                }\n              }\n\n              return j;\n            }\n          }\n\n          return true;\n        });\n        e.addHandler(e.host, \"keyup.edit\" + e.element.id, function (k) {\n          if (e.adaptiveview) {\n            return true;\n          }\n\n          if (k.keyCode === 9) {\n            if (!b(document.activeElement).ischildof(e.filterrow)) {\n              if (!b(document.activeElement).ischildof(e.pager)) {\n                switch (e.selectionmode) {\n                  case \"singlecell\":\n                  case \"multiplecells\":\n                  case \"multiplecellsextended\":\n                  case \"multiplecellsadvanced\":\n                    var j = e.getselectedcell();\n\n                    if (j === null) {\n                      e.selectcell(0, e.columns.records[0].displayfield);\n                    }\n\n                    break;\n\n                  default:\n                    var l = e.getselectedrowindex();\n\n                    if (l === -1) {\n                      e.selectrow(0);\n                    }\n\n                    break;\n                }\n              }\n            }\n          }\n        });\n        e.addHandler(e.host, \"keydown.edit\" + e.element.id, function (l) {\n          var j = true;\n\n          if (e.adaptiveview) {\n            return true;\n          }\n\n          if (e.handlekeyboardnavigation) {\n            var m = e.handlekeyboardnavigation(l);\n\n            if (m == true) {\n              return false;\n            }\n          }\n\n          if (e.editable && e.editmode != \"programmatic\") {\n            if (e._handleeditkeydown) {\n              j = e._handleeditkeydown(l, e);\n\n              if (e.isNestedGrid) {\n                l.stopPropagation();\n              }\n            }\n          }\n\n          if (!e.editcell && l.altKey) {\n            if (!b(document.activeElement).ischildof(e.filterrow)) {\n              if (!b(document.activeElement).ischildof(e.pager)) {\n                if (l.keyCode === 40) {\n                  var k = e.getselectedcell();\n\n                  if (k) {\n                    e.openmenu(k.column);\n                  }\n                } else {\n                  if (l.keyCode === 38) {\n                    e._closemenu();\n                  }\n                }\n              }\n            }\n          }\n\n          if (!(b.jqx.browser.msie && b.jqx.browser.version < 8)) {\n            if (j && e.keyboardnavigation && e._handlekeydown) {\n              j = e._handlekeydown(l, e);\n\n              if (e.isNestedGrid) {\n                l.stopPropagation();\n              }\n            }\n          } else {\n            if (e.isNestedGrid) {\n              if (j && e.keyboardnavigation && e._handlekeydown) {\n                j = e._handlekeydown(l, e);\n                l.stopPropagation();\n              }\n            }\n          }\n\n          if (!j) {\n            if (l.preventDefault) {\n              l.preventDefault();\n            }\n\n            if (l.stopPropagation != undefined) {\n              l.stopPropagation();\n            }\n          }\n\n          if (j && e.selectedcells && e.selectedcells.length > 0) {\n            if (l.keyCode === 9 && l.shiftKey && e.table && e.table[0].rows && e.table[0].rows.length > 0) {\n              if (!b(document.activeElement).ischildof(e.filterrow)) {\n                if (!b(document.activeElement).ischildof(e.pager)) {\n                  e.table[0].rows[0].cells[0].focus();\n                }\n              }\n            }\n          }\n\n          return j;\n        });\n      }\n    },\n    _hittestrow: function (s, q) {\n      if (this.vScrollInstance == null || this.hScrollInstance == null) {\n        return;\n      }\n\n      if (s == undefined) {\n        s = 0;\n      }\n\n      if (q == undefined) {\n        q == 0;\n      }\n\n      var l = this.vScrollInstance;\n      var k = this.hScrollInstance;\n      var f = l.value;\n\n      if (this.vScrollBar.css(\"visibility\") != \"visible\") {\n        f = 0;\n      }\n\n      var m = k.value;\n\n      if (this.hScrollBar.css(\"visibility\") != \"visible\") {\n        m = 0;\n      }\n\n      if (this.scrollmode == \"deferred\" && this._newmax != null) {\n        if (f > this._newmax) {\n          f = this._newmax;\n        }\n      }\n\n      var r = parseInt(f) + q;\n      var j = parseInt(m) + s;\n\n      if (this.visiblerows == null) {\n        return;\n      }\n\n      if (this.visiblerows.length == 0) {\n        return;\n      }\n\n      var e = false;\n\n      var i = this._findvisiblerow(r, this.visiblerows);\n\n      if (i >= 0) {\n        var o = this.visiblerows[i];\n        var d = this.rowdetails && o.rowdetails;\n        var n = !o.rowdetailshidden;\n\n        if (d) {\n          var g = this.visiblerows[i - 1];\n\n          if (g == o) {\n            o = g;\n            i--;\n          }\n\n          if (n) {\n            var h = b(this.hittestinfo[i].visualrow).position().top + parseInt(this.table.css(\"top\"));\n            var p = b(this.hittestinfo[i].visualrow).height();\n\n            if (!(q >= h && q <= h + p)) {\n              i++;\n              o = this.visiblerows[i];\n              e = true;\n            }\n          }\n        }\n      }\n\n      return {\n        index: i,\n        row: o,\n        details: e\n      };\n    },\n    getcellatposition: function (j, q) {\n      var r = this.that;\n      var z = this.showheader ? this.columnsheader.height() + 2 : 0;\n      var s = this._groupsheader() ? this.groupsheader.height() : 0;\n      var B = this.showtoolbar ? this.toolbarheight : 0;\n      s += B;\n      var g = this.host.coord();\n\n      if (this.hasTransform) {\n        g = b.jqx.utilities.getOffset(this.host);\n      }\n\n      var p = j - g.left;\n      var n = q - z - g.top - s;\n\n      var d = this._hittestrow(p, n);\n\n      var k = d.row;\n      var l = d.index;\n      var t = this.table[0].rows[l];\n\n      if (this.dataview && this.dataview.records.length == 0) {\n        var o = this.table[0].rows;\n        var C = 0;\n\n        for (var w = 0; w < o.length; w++) {\n          if (n >= C && n < C + this.rowsheight) {\n            t = o[w];\n            break;\n          }\n\n          C += this.rowsheight;\n        }\n\n        k = {\n          boundindex: w\n        };\n      }\n\n      if (t == null) {\n        return true;\n      }\n\n      var u = this.hScrollInstance;\n      var v = u.value;\n      var f = 0;\n      var m = this.groupable ? this.groups.length : 0;\n\n      for (var w = 0; w < t.cells.length; w++) {\n        var h = parseInt(b(this.columnsrow[0].cells[w]).css(\"left\"));\n        var j = h - v;\n\n        if (r.columns.records[w].pinned) {\n          j = h;\n        }\n\n        if (r.columns.records[w].hidden || r.columns.records[w].adaptivehidden) {\n          continue;\n        }\n\n        var A = j + b(this.columnsrow[0].cells[w]).width();\n\n        if (A >= p && p >= j) {\n          f = w;\n          break;\n        }\n      }\n\n      if (k != null) {\n        var e = this._getcolumnat(f);\n\n        return {\n          row: this.getboundindex(k),\n          column: e.datafield,\n          value: this.getcellvalue(this.getboundindex(k), e.datafield)\n        };\n      }\n\n      return null;\n    },\n    _handlemousedown: function (Y, n) {\n      if (Y.target == null) {\n        return true;\n      }\n\n      if (n.disabled) {\n        return true;\n      }\n\n      if (b(Y.target).ischildof(this.columnsheader) || b(Y.target).ischildof(this.hScrollBar) || b(Y.target).ischildof(this.vScrollBar)) {\n        return true;\n      }\n\n      if (Y.target === n.bottomRight[0]) {\n        return true;\n      }\n\n      var o;\n\n      if (Y.which) {\n        o = Y.which == 3;\n      } else {\n        if (Y.button) {\n          o = Y.button == 2;\n        }\n      }\n\n      var R;\n\n      if (Y.which) {\n        R = Y.which == 2;\n      } else {\n        if (Y.button) {\n          R = Y.button == 1;\n        }\n      }\n\n      if (R) {\n        return true;\n      }\n\n      if (this.adaptiveview) {\n        if (b(Y.target).ischildof(b(this.adaptiveview))) {\n          return true;\n        }\n\n        if (Y.target == this.adaptiveview) {\n          return true;\n        }\n      }\n\n      if (this.showstatusbar) {\n        if (b(Y.target).ischildof(this.statusbar)) {\n          return true;\n        }\n\n        if (Y.target == this.statusbar[0]) {\n          return true;\n        }\n      }\n\n      if (this.showtoolbar) {\n        if (b(Y.target).ischildof(this.toolbar)) {\n          return true;\n        }\n\n        if (Y.target == this.toolbar[0]) {\n          return true;\n        }\n      }\n\n      if (this.pageable) {\n        if (b(Y.target).ischildof(this.pager)) {\n          return true;\n        }\n\n        if (Y.target == this.pager[0]) {\n          return true;\n        }\n      }\n\n      if (!this.columnsheader) {\n        return true;\n      }\n\n      if (!this.editcell) {\n        if (this.pageable) {\n          if (b(Y.target).ischildof(this.pager)) {\n            return true;\n          }\n        }\n      }\n\n      var W = this.showheader ? this.columnsheader.height() + 2 : 0;\n      var C = this._groupsheader() ? this.groupsheader.height() : 0;\n      var F = this.showtoolbar ? this.toolbarheight : 0;\n      C += F;\n      var U = this.host.coord();\n\n      if (this.hasTransform) {\n        U = b.jqx.utilities.getOffset(this.host);\n\n        var ab = this._getBodyOffset();\n\n        U.left -= ab.left;\n        U.top -= ab.top;\n      }\n\n      var k = parseInt(Y.pageX);\n      var l = parseInt(Y.pageY);\n\n      if (this.isTouchDevice()) {\n        var Z = n.getTouches(Y);\n        var Q = Z[0];\n        k = parseInt(Q.pageX);\n        l = parseInt(Q.pageY);\n\n        if (n.touchmode == true) {\n          if (Q._pageX != undefined) {\n            k = parseInt(Q._pageX);\n            l = parseInt(Q._pageY);\n          }\n        }\n      }\n\n      var J = k - U.left;\n      var I = l - W - U.top - C;\n\n      if (this.pageable && !this.autoheight && this.gotopage) {\n        var d = this.pager.coord().top - U.top - C - W;\n\n        if (I > d) {\n          return;\n        }\n      }\n\n      var V = this._hittestrow(J, I);\n\n      if (!V) {\n        return;\n      }\n\n      if (V.details) {\n        return;\n      }\n\n      var r = V.row;\n      var E = V.index;\n      var s = Y.target.className;\n      var j = this.table[0].rows[E];\n\n      if (j == null) {\n        if (n.editable && n.begincelledit) {\n          if (n.editcell) {\n            n.endcelledit(n.editcell.row, n.editcell.column, false, true);\n          }\n        }\n\n        return true;\n      }\n\n      n.mousecaptured = true;\n      n.mousecaptureposition = {\n        left: Y.pageX,\n        top: Y.pageY - C,\n        clickedrow: j\n      };\n      var m = this.hScrollInstance;\n      var u = m.value;\n\n      if (this.rtl) {\n        if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n          u = m.max - m.value;\n        }\n      }\n\n      var G = -1;\n      var D = this.groupable ? this.groups.length : 0;\n\n      if (this.rtl) {\n        if (this.vScrollBar[0].style.visibility != \"hidden\") {\n          u -= this.scrollbarsize + 4;\n        }\n\n        if (this.hScrollBar[0].style.visibility == \"hidden\") {\n          u = -parseInt(this.content.css(\"left\"));\n        }\n      }\n\n      for (var S = 0; S < j.cells.length; S++) {\n        var T = parseInt(b(this.columnsrow[0].cells[S]).css(\"left\"));\n        var k = T - u;\n\n        if (n.columns.records[S].pinned && !n.rtl) {\n          k = T;\n        }\n\n        var L = this._getcolumnat(S);\n\n        if (L != null && L.hidden) {\n          continue;\n        }\n\n        if (L != null && L.adaptivehidden) {\n          continue;\n        }\n\n        var N = k + b(this.columnsrow[0].cells[S]).width();\n\n        if (N >= J && J >= k) {\n          G = S;\n          n.mousecaptureposition.clickedcell = S;\n          break;\n        }\n      }\n\n      if (this.rtl && this._haspinned) {\n        for (var S = j.cells.length - 1; S >= 0; S--) {\n          if (!n.columns.records[S].pinned) {\n            break;\n          }\n\n          var T = b(this.columnsrow[0].cells[S]).coord().left - this.host.coord().left;\n          var k = T;\n\n          var L = this._getcolumnat(S);\n\n          if (L != null && L.hidden) {\n            continue;\n          }\n\n          if (L != null && L.adaptivehidden) {\n            continue;\n          }\n\n          var N = k + b(this.columnsrow[0].cells[S]).width();\n\n          if (N >= J && J >= k) {\n            G = S;\n            n.mousecaptureposition.clickedcell = S;\n            break;\n          }\n        }\n      }\n\n      if (r != null && G >= 0) {\n        this._raiseEvent(1, {\n          rowindex: this.getboundindex(r),\n          visibleindex: r.visibleindex,\n          row: r,\n          group: r.group,\n          rightclick: o,\n          originalEvent: Y\n        });\n\n        var L = this._getcolumnat(G);\n\n        var O = this.getcellvalue(this.getboundindex(r), L.datafield);\n\n        if (this.editable && this.editcell) {\n          this._currentEditableColumn = G;\n\n          if (L.datafield == this.editcell.column) {\n            if (this.getboundindex(r) == this.editcell.row) {\n              this.mousecaptured = false;\n            }\n          }\n        }\n\n        if (L.columntype === \"adaptive\") {\n          var K = document.createElement(\"div\");\n          var aa = document.createElement(\"div\");\n          var A = document.createElement(\"a\");\n          var w = document.createElement(\"a\");\n          var f = document.createElement(\"div\");\n          var M = this.getrowdata(this.getboundindex(r));\n          A.href = \"#\";\n          w.href = \"#\";\n          K.style.zIndex = 99999;\n          K.style.position = \"absolute\";\n          K.style.left = \"0px\";\n          K.style.top = \"0px\";\n          K.style.width = \"100%\";\n          K.style.height = \"100%\";\n          K.className = \"jqx-adaptive-view jqx-widget-content\";\n          f.style.position = \"relative\";\n          f.style.top = \"100%\";\n          f.style.textAlign = \"center\";\n          f.style.marginTop = \"-40px\";\n          aa.style.position = \"absolute\";\n          aa.style.left = \"0px\";\n          aa.style.top = \"0px\";\n          aa.style.width = \"100%\";\n          aa.style.height = \"100%\";\n\n          if (this.theme) {\n            K.className = \"jqx-widget-content jqx-widget-content-\" + this.theme;\n          }\n\n          var e = document.createElement(\"span\");\n          e.className = \"jqx-icon-close\";\n\n          if (this.theme) {\n            e.className = \"jqx-icon-close jqx-widget-close-\" + this.theme;\n          }\n\n          e.style.zIndex = 99;\n          e.style.position = \"absolute\";\n          e.style.right = \"10px\";\n          e.style.top = \"10px\";\n          e.style.width = \"16px\";\n          e.style.height = \"16px\";\n          K.appendChild(aa);\n          K.appendChild(e);\n          A.innerHTML = this.gridlocalization.okstring;\n          w.innerHTML = this.gridlocalization.cancelstring;\n          A.addEventListener(\"mousedown\", function (ad) {\n            var af = {};\n            var x = n.adaptiveview.querySelectorAll(\"input\");\n\n            for (var y = 0; y < x.length; y++) {\n              var ae = x[y].value;\n              var ac = x[y].getAttribute(\"data-column\");\n              af[ac] = ae;\n            }\n\n            n.updaterow(M.uid, af);\n            K.parentNode.removeChild(K);\n            n.adaptiveview = null;\n            ad.stopPropagation();\n            return false;\n          });\n          w.addEventListener(\"mousedown\", function () {\n            K.parentNode.removeChild(K);\n            n.adaptiveview = null;\n            Y.stopPropagation();\n            return false;\n          });\n\n          if (this.editable) {\n            f.appendChild(A);\n            f.appendChild(w);\n            K.appendChild(f);\n          }\n\n          var v = \"<table class='jqx-adaptive-table'><tr>\";\n          var E = 0;\n\n          for (var S = 0; S < this.columns.records.length; S++) {\n            var L = this.columns.records[S];\n\n            if (L.columntype === \"adaptive\") {\n              continue;\n            }\n\n            if (S > 0 && E % 2 === 0) {\n              v += \"</tr><tr>\";\n            }\n\n            var B = M[L.displayfield];\n\n            if (L.cellsformat != \"\") {\n              if (b.jqx.dataFormat) {\n                if (b.jqx.dataFormat.isDate(B)) {\n                  B = b.jqx.dataFormat.formatdate(B, L.cellsformat, this.gridlocalization);\n                } else {\n                  if (b.jqx.dataFormat.isNumber(B)) {\n                    B = b.jqx.dataFormat.formatnumber(B, L.cellsformat, this.gridlocalization);\n                  }\n                }\n              }\n            }\n\n            var H = this.filterable ? '<div datafield=\"' + L.datafield + '\" class=\"' + n.toTP(\"jqx-grid-column-filterbutton\") + '\" style=\"position: relative; top: 4px; display: inline-block; width: 16px; height:16px;\"></div>' : \"\";\n\n            if (this.editable) {\n              if (L.editable) {\n                v += \"<td>\" + H + L.text + \": <input data-column='\" + L.displayfield + \"' value='\" + B + \"'/></td>\";\n              } else {\n                v += \"<td>\" + H + L.text + \": <input data-column='\" + L.displayfield + \"' readonly value='\" + B + \"'/></td>\";\n              }\n            } else {\n              v += \"<td>\" + H + L.text + \": \" + B + \"</td>\";\n            }\n\n            E++;\n          }\n\n          v += \"</tr></table>\";\n          aa.innerHTML = v;\n          e.addEventListener(\"mousedown\", function (i) {\n            K.parentNode.removeChild(K);\n            n.adaptiveview = null;\n          });\n          this.wrapper[0].appendChild(K);\n          this.adaptiveview = K;\n          b(this.adaptiveview).find(\".jqx-grid-column-filterbutton\").on(\"click\", function () {\n            var i = this.getAttribute(\"datafield\");\n            var x = this.offsetTop;\n            n.openmenu(i);\n            setTimeout(function () {\n              n.gridmenu.css(\"top\", 30 + x);\n              n.gridmenu.css(\"left\", 25);\n              n.gridmenu.css(\"z-index\", 99999);\n              n.gridmenu.parent().css(\"z-index\", 99999);\n            }, 300);\n          });\n          return;\n        }\n\n        this._raiseEvent(8, {\n          rowindex: this.getboundindex(r),\n          column: L ? L.getcolumnproperties() : null,\n          row: r,\n          visibleindex: r.visibleindex,\n          datafield: L ? L.datafield : null,\n          columnindex: G,\n          value: O,\n          rightclick: o,\n          originalEvent: Y\n        });\n\n        if (L.createwidget) {\n          return true;\n        }\n\n        if (this.isTouchDevice()) {\n          if (L.columntype == \"checkbox\" && this.editable && this._overlayElement) {\n            if (!this.editcell) {\n              this._overlayElement.css(\"visibility\", \"hidden\");\n\n              this.editcell = this.getcell(E, L.datafield);\n              return true;\n            }\n          } else {\n            if (L.columntype == \"button\" && this._overlayElement) {\n              if (L.buttonclick) {\n                L.buttonclick(j.cells[G].buttonrow, Y);\n              }\n\n              return true;\n            }\n          }\n        }\n\n        var h = false;\n\n        if (this._lastmousedown != null) {\n          if (this._mousedown - this._lastmousedown < 300) {\n            if (this._clickedrowindex == this.getboundindex(r)) {\n              this._raiseEvent(22, {\n                rowindex: this.getboundindex(r),\n                row: r,\n                visibleindex: r.visibleindex,\n                group: r.group,\n                rightclick: o,\n                originalEvent: Y\n              });\n\n              if (this._clickedcolumn == L.datafield) {\n                this._raiseEvent(23, {\n                  rowindex: this.getboundindex(r),\n                  row: r,\n                  visibleindex: r.visibleindex,\n                  column: L ? L.getcolumnproperties() : null,\n                  datafield: L ? L.datafield : null,\n                  columnindex: G,\n                  value: O,\n                  rightclick: o,\n                  originalEvent: Y\n                });\n              }\n\n              h = true;\n              this._clickedrowindex = -1;\n              this._clickedcolumn = null;\n\n              if (Y.isPropagationStopped && Y.isPropagationStopped()) {\n                return false;\n              }\n            }\n          }\n        }\n\n        if (o) {\n          return true;\n        }\n\n        if (!h) {\n          this._clickedrowindex = this.getboundindex(r);\n          this._clickedcolumn = L.datafield;\n        }\n\n        var g = b.jqx.utilities.getBrowser();\n\n        if (g.browser == \"msie\" && parseInt(g.version) <= 7) {\n          if (G == 0 && this.rowdetails) {\n            s = \"jqx-grid-group-collapse\";\n          }\n\n          if (D > 0) {\n            if (G <= D) {\n              s = \"jqx-grid-group-collapse\";\n            }\n          }\n        }\n\n        if (s.indexOf(\"jqx-grid-group-expand\") != -1 || s.indexOf(\"jqx-grid-group-collapse\") != -1) {\n          if (!this.rtl) {\n            if (D > 0 && G < D && this._togglegroupstate) {\n              this._togglegroupstate(r.bounddata, true);\n            } else {\n              if (G == D && this.rowdetails && this.showrowdetailscolumn) {\n                this._togglerowdetails(r.bounddata, true);\n\n                this.gridcontent[0].scrollTop = 0;\n                this.gridcontent[0].scrollLeft = 0;\n              }\n            }\n          } else {\n            if (D > 0 && G > j.cells.length - D - 1 && this._togglegroupstate) {\n              this._togglegroupstate(r.bounddata, true);\n            } else {\n              if (G == j.cells.length - 1 - D && this.rowdetails && this.showrowdetailscolumn) {\n                this._togglerowdetails(r.bounddata, true);\n\n                this.gridcontent[0].scrollTop = 0;\n                this.gridcontent[0].scrollLeft = 0;\n              }\n            }\n          }\n        } else {\n          if (r.boundindex != -1) {\n            var p = this.selectedrowindexes.slice(0);\n            var X = false;\n\n            if (n.selectionmode != \"none\" && n.selectionmode != \"checkbox\" && this._selectrowwithmouse) {\n              if (n.selectionmode == \"multiplecellsadvanced\" || n.selectionmode == \"multiplecellsextended\" || n.selectionmode == \"multiplerowsextended\" || n.selectionmode == \"multiplerowsadvanced\") {\n                if (!Y.ctrlKey && !Y.shiftKey && !Y.metaKey) {\n                  n.selectedrowindexes = new Array();\n                  n.selectedcells = new Array();\n                }\n              }\n\n              var z = false;\n              var q = this.getboundindex(r);\n\n              if (n._oldselectedrow === q || n.selectionmode === \"none\") {\n                z = true;\n              }\n\n              if (n.selectionmode.indexOf(\"cell\") == -1) {\n                if (n.selectionmode != \"singlerow\" || n.selectedrowindex != q && n.selectionmode == \"singlerow\") {\n                  this._applyrowselection(q, true, false, null, L.datafield);\n\n                  this._selectrowwithmouse(n, V, p, L.datafield, Y.ctrlKey || Y.metaKey, Y.shiftKey);\n                }\n              } else {\n                if (L.datafield != null) {\n                  this._selectrowwithmouse(n, V, p, L.datafield, Y.ctrlKey || Y.metaKey, Y.shiftKey);\n\n                  if (!Y.shiftKey) {\n                    this._applycellselection(q, L.datafield, true, false);\n                  }\n                }\n              }\n\n              if (n._oldselectedcell) {\n                if (n._oldselectedcell.datafield == n.selectedcell.datafield && n._oldselectedcell.rowindex == n.selectedcell.rowindex) {\n                  X = true;\n                }\n              }\n\n              n._oldselectedcell = n.selectedcell;\n              n._oldselectedrow = q;\n            }\n\n            if (n.autosavestate) {\n              if (n.savestate) {\n                n.savestate();\n              }\n            }\n\n            if (n.editable && n.begincelledit && n.editmode != \"programmatic\") {\n              if (Y.isPropagationStopped && Y.isPropagationStopped()) {\n                return false;\n              }\n\n              if (n.editmode == \"selectedrow\") {\n                if (z && !n.editcell) {\n                  if (L.columntype !== \"checkbox\") {\n                    this._currentEditableColumn = G;\n                    var t = n.beginrowedit(this.getboundindex(r));\n                  }\n                } else {\n                  if (n.editcell && !z && n.selectionmode != \"none\") {\n                    var t = n.endrowedit(n.editcell.row);\n                  }\n                }\n              } else {\n                var q = this.getboundindex(r);\n                var P = n.editmode == \"click\" || X && n.editmode == \"selectedcell\";\n\n                if (n.selectionmode.indexOf(\"cell\") == -1) {\n                  if (n.editmode != \"dblclick\") {\n                    P = true;\n                  }\n                }\n\n                if (P) {\n                  if (r.boundindex != undefined && L.editable) {\n                    var t = n.begincelledit(this.getboundindex(r), L.datafield, L.defaulteditorvalue);\n\n                    if (n.selectionmode.indexOf(\"cell\") != -1) {\n                      n._applycellselection(q, L.datafield, false, false);\n                    }\n                  }\n                }\n\n                if (n.selectionmode.indexOf(\"cell\") != -1) {\n                  if (n.editmode == \"selectedcell\" && !X && n.editcell) {\n                    n.endcelledit(n.editcell.row, n.editcell.column, false, true);\n                  }\n                }\n\n                if (n.editmode == \"dblclick\" && !X && n.editcell && !(n.editcell.row == q && L.datafield == n.editcell.column)) {\n                  n.endcelledit(n.editcell.row, n.editcell.column, false, true);\n                }\n              }\n\n              return true;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    _columnPropertyChanged: function (e, d, g, f) {},\n    _rowPropertyChanged: function (g, d, f, e) {},\n    _serializeObject: function (d) {\n      if (d == null) {\n        return \"\";\n      }\n\n      var e = \"\";\n      b.each(d, function (g) {\n        var i = this;\n\n        if (g > 0) {\n          e += \", \";\n        }\n\n        e += \"[\";\n        var f = 0;\n\n        for (var h in i) {\n          if (f > 0) {\n            e += \", \";\n          }\n\n          e += \"{\" + h + \":\" + i[h] + \"}\";\n          f++;\n        }\n\n        e += \"]\";\n      });\n      return e;\n    },\n    isbindingcompleted: function () {\n      return !this._loading;\n    },\n    propertiesChangedHandler: function (d, e, f) {\n      if (f.width && f.height && Object.keys(f).length == 2) {\n        d._updatesize(true, true);\n\n        d._resizeWindow();\n\n        if (d.virtualmode && !d._loading) {\n          d.vScrollInstance.setPosition(0);\n        } else {\n          setTimeout(function () {\n            d._renderrows(d.virtualsizeinfo);\n          }, 100);\n        }\n      }\n    },\n    propertyChangedHandler: function (e, f, i, h) {\n      if (this.isInitialized == undefined || this.isInitialized == false) {\n        return;\n      }\n\n      if (e.batchUpdate && e.batchUpdate.width && e.batchUpdate.height && Object.keys(e.batchUpdate).length == 2) {\n        return;\n      }\n\n      f = f.toLowerCase();\n\n      switch (f) {\n        case \"editable\":\n        case \"showcolumnheaderlines\":\n        case \"showcolumnlines\":\n        case \"showrowlines\":\n          e.refresh();\n          break;\n\n        case \"everpresentrowactionsmode\":\n          if (i != h) {\n            e._removeaddnewrow();\n\n            e.render();\n          }\n\n          break;\n\n        case \"everpresentrowactions\":\n          e._updateaddnewrowui();\n\n          break;\n\n        case \"showeverpresentrow\":\n        case \"everpresentrowposition\":\n        case \"everpresentrowheight\":\n          if (i != h) {\n            e._removeaddnewrow();\n\n            e.render();\n          }\n\n          break;\n\n        case \"rtl\":\n          e.content.css(\"left\", \"\");\n          e.columns = e._columns;\n          e._filterrowcache = [];\n          e.vScrollBar.jqxScrollBar({\n            rtl: h\n          });\n          e.hScrollBar.jqxScrollBar({\n            rtl: h\n          });\n\n          if (e._initpager) {\n            e._initpager();\n          }\n\n          if (e._initgroupsheader) {\n            e._initgroupsheader();\n          }\n\n          e.render();\n          break;\n\n        case \"enablebrowserselection\":\n          if (!e.showfilterrow) {\n            if (!e.showstatusbar && !e.showtoolbar) {\n              e.host.addClass(\"jqx-disableselect\");\n            }\n\n            e.content.addClass(\"jqx-disableselect\");\n          }\n\n          if (e.enablebrowserselection) {\n            e.content.removeClass(\"jqx-disableselect\");\n            e.host.removeClass(\"jqx-disableselect\");\n          }\n\n          break;\n\n        case \"columnsheight\":\n          if (e.columnsheight != 32 || e.columngroups) {\n            e._measureElement(\"column\");\n          }\n\n          e._render(true, true, true, false, false);\n\n          break;\n\n        case \"rowsheight\":\n          if (h != i) {\n            if (e.rowsheight != 31) {\n              e._measureElement(\"cell\");\n            }\n\n            e.virtualsizeinfo = null;\n            e.rendergridcontent(true, false);\n            e.refresh();\n          }\n\n          break;\n\n        case \"scrollMode\":\n          e.vScrollInstance.thumbStep = e.rowsheight;\n          break;\n\n        case \"showdefaultloadelement\":\n          e._builddataloadelement();\n\n          break;\n\n        case \"showfiltermenuitems\":\n        case \"showsortmenuitems\":\n        case \"showgroupmenuitems\":\n        case \"filtermode\":\n          e._initmenu();\n\n          break;\n\n        case \"touchmode\":\n          if (i != h) {\n            e._removeHandlers();\n\n            e.touchDevice = null;\n            e.vScrollBar.jqxScrollBar({\n              touchMode: h\n            });\n            e.hScrollBar.jqxScrollBar({\n              touchMode: h\n            });\n\n            e._updateTouchScrolling();\n\n            e._arrange();\n\n            e._updatecolumnwidths();\n\n            e._updatecellwidths();\n\n            e._addHandlers();\n          }\n\n          break;\n\n        case \"autoshowcolumnsmenubutton\":\n          if (i != h) {\n            e._rendercolumnheaders();\n          }\n\n          break;\n\n        case \"rendergridrows\":\n          if (i != h) {\n            e.updatebounddata();\n          }\n\n          break;\n\n        case \"editmode\":\n          if (i != h) {\n            e._removeHandlers();\n\n            e._addHandlers();\n          }\n\n          break;\n\n        case \"source\":\n          e.updatebounddata();\n\n          if (e.virtualmode && !e._loading) {\n            e.loadondemand = true;\n\n            e._renderrows(e.virtualsizeinfo);\n          }\n\n          break;\n\n        case \"horizontalscrollbarstep\":\n        case \"verticalscrollbarstep\":\n        case \"horizontalscrollbarlargestep\":\n        case \"verticalscrollbarlargestep\":\n          this.vScrollBar.jqxScrollBar({\n            step: this.verticalscrollbarstep,\n            largestep: this.verticalscrollbarlargestep\n          });\n          this.hScrollBar.jqxScrollBar({\n            step: this.horizontalscrollbarstep,\n            largestep: this.horizontalscrollbarlargestep\n          });\n          break;\n\n        case \"closeablegroups\":\n          if (e._initgroupsheader) {\n            e._initgroupsheader();\n          }\n\n          break;\n\n        case \"showgroupsheader\":\n          if (i != h) {\n            e._arrange();\n\n            if (e._initgroupsheader) {\n              e._initgroupsheader();\n            }\n\n            e._renderrows(e.virtualsizeinfo);\n          }\n\n          break;\n\n        case \"theme\":\n          if (h != i) {\n            b.jqx.utilities.setTheme(i, h, e.host);\n\n            if (e.gridmenu) {\n              e.gridmenu.jqxMenu({\n                theme: h\n              });\n            }\n\n            if (e.pageable) {\n              e._updatepagertheme();\n            }\n\n            if (e.filterable) {\n              e._updatefilterrowui(true);\n            }\n\n            if (e.showeverpresentrow) {\n              e._updateaddnewrowui(true);\n            }\n          }\n\n          break;\n\n        case \"showtoolbar\":\n        case \"toolbarheight\":\n          if (i != h) {\n            e._arrange();\n\n            e.refresh();\n          }\n\n          break;\n\n        case \"showstatusbar\":\n          if (i != h) {\n            if (e.statusbar) {\n              if (h) {\n                e.statusbar.show();\n              } else {\n                e.statusbar.hide();\n              }\n            }\n\n            e._arrange();\n\n            e.refresh();\n          }\n\n          break;\n\n        case \"statusbarheight\":\n          if (i != h) {\n            e._arrange();\n\n            e.refresh();\n          }\n\n          break;\n\n        case \"filterable\":\n        case \"showfilterrow\":\n          if (i != h) {\n            e.render();\n          }\n\n          break;\n\n        case \"autoshowfiltericon\":\n        case \"showfiltercolumnbackground\":\n        case \"showpinnedcolumnbackground\":\n        case \"showsortcolumnbackground\":\n          if (i != h) {\n            e.rendergridcontent();\n          }\n\n          break;\n\n        case \"showrowdetailscolumn\":\n          if (i != h) {\n            e.render();\n          }\n\n          break;\n\n        case \"scrollbarsize\":\n          if (i != h) {\n            b.jqx.utilities.scrollBarSize = h;\n\n            e._arrange();\n          }\n\n          break;\n\n        case \"width\":\n        case \"height\":\n          if (i != h) {\n            e._updatesize(true, true);\n\n            e._resizeWindow();\n\n            if (e.virtualmode && !e._loading) {\n              e.vScrollInstance.setPosition(0);\n            } else {\n              setTimeout(function () {\n                e._renderrows(e.virtualsizeinfo);\n              }, 100);\n            }\n          }\n\n          break;\n\n        case \"altrows\":\n        case \"altstart\":\n        case \"altstep\":\n          if (i != h) {\n            e._renderrows(e.virtualsizeinfo);\n          }\n\n          break;\n\n        case \"groupsheaderheight\":\n          if (i != h) {\n            e._arrange();\n\n            if (e._initgroupsheader) {\n              e._initgroupsheader();\n            }\n          }\n\n          break;\n\n        case \"pagerheight\":\n          if (i != h) {\n            e._initpager();\n          }\n\n          break;\n\n        case \"selectedrowindex\":\n          e.selectrow(h);\n          break;\n\n        case \"selectionmode\":\n          if (i != h) {\n            if (h == \"none\") {\n              e.selectedrowindexes = new Array();\n              e.selectedcells = new Array();\n              e.selectedrowindex = -1;\n            }\n\n            e._renderrows(e.virtualsizeinfo);\n\n            if (h == \"checkbox\") {\n              e._render(false, false, true, false, false);\n            }\n          }\n\n          break;\n\n        case \"showheader\":\n          if (h) {\n            e.columnsheader.css(\"display\", \"block\");\n          } else {\n            e.columnsheader.css(\"display\", \"none\");\n          }\n\n          break;\n\n        case \"virtualmode\":\n          if (i != h) {\n            e.dataview.virtualmode = e.virtualmode;\n            e.dataview.refresh(false);\n\n            e._render(false, false, false);\n          }\n\n          break;\n\n        case \"columnsmenu\":\n          if (i != h) {\n            e.render();\n          }\n\n          break;\n\n        case \"columngroups\":\n          e._render(true, true, true, false, false);\n\n          break;\n\n        case \"columns\":\n          if (e.columns && e.columns.length > e.headerZIndex) {\n            e.headerZIndex = e.columns.length + 100;\n          }\n\n          if (e._serializeObject(e._cachedcolumns) !== e._serializeObject(h)) {\n            var d = false;\n\n            if (e.filterable) {\n              if (i && i.records) {\n                b.each(i.records, function () {\n                  if (this.filter) {\n                    d = true;\n                  }\n\n                  e.dataview.removefilter(this.displayfield, this.filter);\n                });\n              }\n            }\n\n            e._columns = null;\n            e._filterrowcache = [];\n            e.render();\n\n            if (d) {\n              e.applyfilters();\n            }\n\n            e._cachedcolumns = e.columns;\n\n            if (e.removesort) {\n              e.removesort();\n            }\n          } else {\n            e[f] = i;\n          }\n\n          break;\n\n        case \"autoheight\":\n          if (i != h) {\n            e._render(false, false, true);\n          }\n\n          break;\n\n        case \"pagermode\":\n        case \"pagerbuttonscount\":\n          if (i != h) {\n            if (e._initpager) {\n              if (e.pagershowrowscombo) {\n                e.pagershowrowscombo.jqxDropDownList(\"destroy\");\n                e.pagershowrowscombo = null;\n              }\n\n              if (e.pagerrightbutton) {\n                e.removeHandler(e.pagerrightbutton, \"mousedown\");\n                e.removeHandler(e.pagerrightbutton, \"mouseup\");\n                e.removeHandler(e.pagerrightbutton, \"click\");\n                e.pagerrightbutton.jqxButton(\"destroy\");\n                e.pagerrightbutton = null;\n              }\n\n              if (e.pagerleftbutton) {\n                e.removeHandler(e.pagerleftbutton, \"mousedown\");\n                e.removeHandler(e.pagerleftbutton, \"mouseup\");\n                e.removeHandler(e.pagerleftbutton, \"click\");\n                e.pagerleftbutton.jqxButton(\"destroy\");\n                e.removeHandler(b(document), \"mouseup.pagerbuttons\" + e.element.id);\n                e.pagerleftbutton = null;\n              }\n\n              e.pagerdiv.remove();\n\n              e._initpager();\n            }\n          }\n\n          break;\n\n        case \"pagesizeoptions\":\n        case \"pageable\":\n        case \"pagesize\":\n          if (i != h) {\n            if (e._loading) {\n              throw new Error(\"jqxGrid: \" + e.loadingerrormessage);\n              return;\n            }\n\n            if (!e.host.jqxDropDownList || !e.host.jqxListBox) {\n              e._testmodules();\n\n              return;\n            }\n\n            if (e._initpager) {\n              if (f != \"pageable\" && f != \"pagermode\") {\n                if (typeof h == \"string\") {\n                  var g = \"The expected value type is: Int.\";\n\n                  if (f != \"pagesize\") {\n                    var g = \"The expected value type is: Array of Int values.\";\n                  }\n\n                  throw new Error(\"Invalid Value for: \" + f + \". \" + g);\n                }\n              }\n\n              e.dataview.pageable = e.pageable;\n              e.dataview.pagenum = 0;\n              e.dataview.pagesize = e._getpagesize();\n\n              if (e.virtualmode) {\n                e.updatebounddata();\n              }\n\n              e.dataview.refresh(true);\n\n              e._initpager();\n\n              if (f == \"pagesizeoptions\") {\n                if (h != null && h.length > 0) {\n                  e.pagesize = parseInt(h[0]);\n                  e.dataview.pagesize = parseInt(h[0]);\n                  e.prerenderrequired = true;\n                  e._requiresupdate = true;\n                  e.dataview.pagenum = -1;\n                  e.gotopage(0);\n                }\n              }\n            }\n\n            e._render(false, false, false);\n          }\n\n          break;\n\n        case \"groups\":\n          if (e._serializeObject(i) !== e._serializeObject(h)) {\n            e.dataview.groups = h;\n\n            e._refreshdataview();\n\n            e._render(true, true, true, false);\n          }\n\n          break;\n\n        case \"groupable\":\n          if (i != h) {\n            e.dataview.groupable = e.groupable;\n            e.dataview.pagenum = 0;\n            e.dataview.refresh(false);\n\n            e._render(false, false, true);\n          }\n\n          break;\n\n        case \"renderstatusbar\":\n          if (h != null) {\n            e.renderstatusbar(e.statusbar);\n          }\n\n          break;\n\n        case \"rendertoolbar\":\n          if (h != null) {\n            e.rendertoolbar(e.toolbar);\n          }\n\n          break;\n\n        case \"disabled\":\n          if (h) {\n            e.host.addClass(e.toThemeProperty(\"jqx-fill-state-disabled\"));\n          } else {\n            e.host.removeClass(e.toThemeProperty(\"jqx-fill-state-disabled\"));\n          }\n\n          b.jqx.aria(e, \"aria-disabled\", e.disabled);\n\n          if (e.pageable) {\n            if (e.pagerrightbutton) {\n              e.pagerrightbutton.jqxButton({\n                disabled: h\n              });\n              e.pagerleftbutton.jqxButton({\n                disabled: h\n              });\n              e.pagershowrowscombo.jqxDropDownList({\n                disabled: h\n              });\n              e.pagergotoinput.attr(\"disabled\", h);\n            }\n\n            if (e.pagerfirstbutton) {\n              e.pagerfirstbutton.jqxButton({\n                disabled: h\n              });\n              e.pagerlastbutton.jqxButton({\n                disabled: h\n              });\n            }\n          }\n\n          e.vScrollBar.jqxScrollBar({\n            disabled: h\n          });\n          e.hScrollBar.jqxScrollBar({\n            disabled: h\n          });\n\n          if (e.filterable && e.showfilterrow) {\n            e._updatefilterrowui(true);\n          }\n\n          if (e.showeverpresentrow) {\n            e._updateaddnewrowui(true);\n          }\n\n          break;\n      }\n    }\n  });\n\n  function c(d, e) {\n    this.owner = d;\n    this.datafield = null;\n    this.displayfield = null;\n    this.text = \"\";\n    this.createfilterpanel = null;\n    this.sortable = true;\n    this.hideable = true;\n    this.editable = true;\n    this.hidden = false;\n    this.adaptivehidden = false;\n    this.groupable = true;\n    this.renderer = null;\n    this.cellsrenderer = null;\n    this.checkchange = null, this.threestatecheckbox = false;\n    this.buttonclick = null, this.columntype = null;\n    this.cellsformat = \"\";\n    this.align = \"left\";\n    this.cellsalign = \"left\";\n    this.width = \"auto\";\n    this.minwidth = 25;\n    this.maxwidth = \"auto\";\n    this.pinned = false;\n    this.visibleindex = -1;\n    this.filterable = true;\n    this.filter = null;\n    this.filteritems = [];\n    this.resizable = true;\n    this.initeditor = null;\n    this.createeditor = null;\n    this.createwidget = null;\n    this.initwidget = null;\n    this.destroywidget = null;\n    this.destroyeditor = null;\n    this.geteditorvalue = null;\n    this.validation = null;\n    this.classname = \"\";\n    this.cellclassname = \"\";\n    this.cellendedit = null;\n    this.cellbeginedit = null;\n    this.cellvaluechanging = null;\n    this.aggregates = null;\n    this.aggregatesrenderer = null;\n    this.menu = true;\n    this.createfilterwidget = null;\n    this.filtertype = \"default\";\n    this.filtercondition = null;\n    this.rendered = null;\n    this.exportable = true;\n    this.exporting = false;\n    this.draggable = true;\n    this.nullable = true;\n    this.clipboard = true;\n    this.selectable = false;\n\n    this._applyStyle = function () {\n      var f = this;\n\n      if (f.hovered) {\n        if (f.style.headerBackgroundHoveredColor) {\n          f.element.style.backgroundColor = f.style.headerBackgroundHoveredColor;\n        }\n\n        if (f.style.headerHoveredColor) {\n          f.element.style.color = f.style.headerHoveredColor;\n        }\n\n        return;\n      }\n\n      if (f.selected) {\n        if (f.style.headerBackgroundSelectedColor) {\n          f.element.style.backgroundColor = f.style.headerBackgroundSelectedColor;\n        }\n\n        if (f.style.headerSelectedColor) {\n          f.element.style.color = f.style.headerSelectedColor;\n        }\n\n        return;\n      }\n\n      if (f.style.headerBackgroundColor) {\n        f.element.style.backgroundColor = f.style.headerBackgroundColor;\n      } else {\n        f.element.style.backgroundColor = \"\";\n      }\n\n      if (f.style.headerColor) {\n        f.element.style.color = f.style.headerColor;\n      } else {\n        f.element.style.color = \"\";\n      }\n    };\n\n    this._applyCellStyle = function (f) {\n      var j = this;\n      var g = false;\n\n      if (f.length) {\n        for (var h = 0; h < f.length; h++) {\n          this._applyCellStyle(f[h]);\n        }\n\n        return;\n      }\n\n      if (j.style.backgroundColor || j.style.color || j.style.hoveredColor || j.style.hoveredColor || j.style.backgroundSelectedColor || j.style.selectedColor) {\n        g = true;\n      }\n\n      if (!g) {\n        return;\n      }\n\n      if (f.className.indexOf(\"hover\") >= 0) {\n        if (j.style.backgroundHoveredColor) {\n          f.style.backgroundColor = j.style.backgroundHoveredColor;\n        }\n\n        if (j.style.hoveredColor) {\n          f.style.color = j.style.hoveredColor;\n        }\n\n        return;\n      }\n\n      if (f.className.indexOf(\"selected\") >= 0) {\n        if (j.style.backgroundSelectedColor) {\n          f.style.backgroundColor = j.style.backgroundSelectedColor;\n        }\n\n        if (j.style.selectedColor) {\n          f.style.color = j.style.selectedColor;\n        }\n\n        return;\n      }\n\n      if (j.style.backgroundColor) {\n        f.style.backgroundColor = j.style.backgroundColor;\n      }\n\n      if (j.style.color) {\n        f.style.color = j.style.color;\n      }\n    };\n\n    this.style = {\n      headerBackgroundColor: \"\",\n      headerColor: \"\",\n      headerBackgroundHoveredColor: \"\",\n      headerHoveredColor: \"\",\n      headerBackgroundSelectedColor: \"\",\n      headerSelectedColor: \"\",\n      backgroundColor: \"\",\n      color: \"\",\n      backgroundHoveredColor: \"\",\n      hoveredColor: \"\",\n      backgroundSelectedColor: \"\",\n      selectedColor: \"\"\n    };\n    this.enabletooltips = true;\n    this.columngroup = null;\n    this.filterdelay = 800;\n    this.reseteverpresentrowwidgetvalue = null;\n    this.geteverpresentrowwidgetvalue = null;\n    this.createeverpresentrowwidget = null;\n    this.initeverpresentrowwidget = null;\n    this.validateeverpresentrowwidgetvalue = null;\n    this.destroyeverpresentrowwidget = null;\n    this.getcolumnproperties = function () {\n      return {\n        nullable: this.nullable,\n        sortable: this.sortable,\n        hideable: this.hideable,\n        hidden: this.hidden,\n        groupable: this.groupable,\n        width: this.width,\n        align: this.align,\n        editable: this.editable,\n        minwidth: this.minwidth,\n        maxwidth: this.maxwidth,\n        resizable: this.resizable,\n        datafield: this.datafield,\n        text: this.text,\n        exportable: this.exportable,\n        cellsalign: this.cellsalign,\n        pinned: this.pinned,\n        cellsformat: this.cellsformat,\n        columntype: this.columntype,\n        classname: this.classname,\n        cellclassname: this.cellclassname,\n        menu: this.menu\n      };\n    }, this.setproperty = function (f, g) {\n      if (this[f]) {\n        var h = this[f];\n        this[f] = g;\n\n        this.owner._columnPropertyChanged(this, f, g, h);\n      } else {\n        if (this[f.toLowerCase()]) {\n          var h = this[f.toLowerCase()];\n          this[f.toLowerCase()] = g;\n\n          this.owner._columnPropertyChanged(this, f.toLowerCase(), g, h);\n        }\n      }\n    };\n\n    this._initfields = function (g) {\n      if (g != null) {\n        var f = this.that;\n\n        if (b.jqx.hasProperty(g, \"dataField\")) {\n          this.datafield = b.jqx.get(g, \"dataField\");\n        }\n\n        if (b.jqx.hasProperty(g, \"selectable\")) {\n          this.selectable = b.jqx.get(g, \"selectable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"displayField\")) {\n          this.displayfield = b.jqx.get(g, \"displayField\");\n        } else {\n          this.displayfield = this.datafield;\n        }\n\n        if (b.jqx.hasProperty(g, \"enableTooltips\")) {\n          this.enabletooltips = b.jqx.get(g, \"enableTooltips\");\n        }\n\n        if (b.jqx.hasProperty(g, \"text\")) {\n          this.text = b.jqx.get(g, \"text\");\n        } else {\n          this.text = this.displayfield;\n        }\n\n        if (b.jqx.hasProperty(g, \"style\")) {\n          this.style = b.jqx.get(g, \"style\");\n        }\n\n        if (b.jqx.hasProperty(g, \"createfilterpanel\")) {\n          this.createfilterpanel = b.jqx.get(g, \"createfilterpanel\");\n        }\n\n        if (b.jqx.hasProperty(g, \"sortable\")) {\n          this.sortable = b.jqx.get(g, \"sortable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"hideable\")) {\n          this.hideable = b.jqx.get(g, \"hideable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"hidden\")) {\n          this.hidden = b.jqx.get(g, \"hidden\");\n        }\n\n        if (b.jqx.hasProperty(g, \"adaptivehidden\")) {\n          this.adaptivehidden = b.jqx.get(g, \"adaptivehidden\");\n        }\n\n        if (b.jqx.hasProperty(g, \"groupable\")) {\n          this.groupable = b.jqx.get(g, \"groupable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"renderer\")) {\n          this.renderer = b.jqx.get(g, \"renderer\");\n        }\n\n        if (b.jqx.hasProperty(g, \"align\")) {\n          this.align = b.jqx.get(g, \"align\");\n        }\n\n        if (b.jqx.hasProperty(g, \"cellsAlign\")) {\n          this.cellsalign = b.jqx.get(g, \"cellsAlign\");\n        }\n\n        if (b.jqx.hasProperty(g, \"clipboard\")) {\n          this.clipboard = b.jqx.get(g, \"clipboard\");\n        }\n\n        if (b.jqx.hasProperty(g, \"cellsFormat\")) {\n          this.cellsformat = b.jqx.get(g, \"cellsFormat\");\n        }\n\n        if (b.jqx.hasProperty(g, \"width\")) {\n          this.width = b.jqx.get(g, \"width\");\n        }\n\n        if (b.jqx.hasProperty(g, \"minWidth\")) {\n          this.minwidth = parseInt(b.jqx.get(g, \"minWidth\"));\n\n          if (isNaN(this.minwidth)) {\n            this.minwidth = 25;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"maxWidth\")) {\n          this.maxwidth = parseInt(b.jqx.get(g, \"maxWidth\"));\n\n          if (isNaN(this.maxwidth)) {\n            this.maxwidth = \"auto\";\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"cellsRenderer\")) {\n          this.cellsrenderer = b.jqx.get(g, \"cellsRenderer\");\n        } else {\n          if (g.cellsRenderer) {\n            this.cellsrenderer = g.cellsRenderer;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"columnType\")) {\n          this.columntype = b.jqx.get(g, \"columnType\");\n        }\n\n        if (b.jqx.hasProperty(g, \"checkChange\")) {\n          this.checkchange = b.jqx.get(g, \"checkChange\");\n        }\n\n        if (b.jqx.hasProperty(g, \"buttonClick\")) {\n          this.buttonclick = b.jqx.get(g, \"buttonClick\");\n        } else {\n          if (g.buttonClick) {\n            this.buttonclick = g.buttonClick;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"pinned\")) {\n          this.pinned = b.jqx.get(g, \"pinned\");\n        }\n\n        if (b.jqx.hasProperty(g, \"visibleIndex\")) {\n          this.visibleindex = b.jqx.get(g, \"visibleIndex\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filterable\")) {\n          this.filterable = b.jqx.get(g, \"filterable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filter\")) {\n          this.filter = b.jqx.get(g, \"filter\");\n        }\n\n        if (b.jqx.hasProperty(g, \"resizable\")) {\n          this.resizable = b.jqx.get(g, \"resizable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"editable\")) {\n          this.editable = b.jqx.get(g, \"editable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"initEditor\")) {\n          this.initeditor = b.jqx.get(g, \"initEditor\");\n        } else {\n          if (g.initEditor) {\n            this.initeditor = g.initEditor;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"createEditor\")) {\n          this.createeditor = b.jqx.get(g, \"createEditor\");\n        } else {\n          if (g.createEditor) {\n            this.createeditor = g.createEditor;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"initWidget\")) {\n          this.initwidget = b.jqx.get(g, \"initWidget\");\n        } else {\n          if (g.initWidget) {\n            this.initwidget = g.initWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"createWidget\")) {\n          this.createwidget = b.jqx.get(g, \"createWidget\");\n        } else {\n          if (g.createWidget) {\n            this.createwidget = g.createWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"destroyWidget\")) {\n          this.destroywidget = b.jqx.get(g, \"destroyWidget\");\n        } else {\n          if (g.destroyWidget) {\n            this.destroywidget = g.destroyWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"reseteverpresentrowwidgetvalue\") || b.jqx.hasFunction(g, \"reseteverpresentrowwidgetvalue\")) {\n          this.reseteverpresentrowwidgetvalue = b.jqx.get(g, \"reseteverpresentrowwidgetvalue\");\n        } else {\n          if (g.resetEverPresentRowWidgetValue) {\n            this.reseteverpresentrowwidgetvalue = g.resetEverPresentRowWidgetValue;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"geteverpresentrowwidgetvalue\") || b.jqx.hasFunction(g, \"geteverpresentrowwidgetvalue\")) {\n          this.geteverpresentrowwidgetvalue = b.jqx.get(g, \"geteverpresentrowwidgetvalue\");\n        } else {\n          if (g.getEverPresentRowWidgetValue) {\n            this.geteverpresentrowwidgetvalue = g.getEverPresentRowWidgetValue;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"createeverpresentrowwidget\") || b.jqx.hasFunction(g, \"createeverpresentrowwidget\")) {\n          this.createeverpresentrowwidget = b.jqx.get(g, \"createeverpresentrowwidget\");\n        } else {\n          if (g.createEverPresentRowWidget) {\n            this.createeverpresentrowwidget = g.createEverPresentRowWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"initeverpresentrowwidget\") || b.jqx.hasFunction(g, \"initeverpresentrowwidget\")) {\n          this.initeverpresentrowwidget = b.jqx.get(g, \"initeverpresentrowwidget\");\n        } else {\n          if (g.initEverPresentRowWidget) {\n            this.initeverpresentrowwidget = g.initEverPresentRowWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"validateeverpresentrowwidgetvalue\")) {\n          this.validateeverpresentrowwidgetvalue = b.jqx.get(g, \"validateeverpresentrowwidgetvalue\");\n        } else {\n          if (g.validateEverPresentRowWidgetValue) {\n            this.validateeverpresentrowwidgetvalue = g.validateEverPresentRowWidgetValue;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"destroyeverpresentrowwidget\") || b.jqx.hasFunction(g, \"destroyeverpresentrowwidget\")) {\n          this.destroyeverpresentrowwidget = b.jqx.get(g, \"destroyeverpresentrowwidget\");\n        } else {\n          if (g.destroyEverPresentRowWidget) {\n            this.destroyEverPresentRowWidget = g.destroyEverPresentRowWidget;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"destroyEditor\")) {\n          this.destroyeditor = b.jqx.get(g, \"destroyEditor\");\n        } else {\n          if (g.destroyEditor) {\n            this.destroyeditor = g.destroyEditor;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"getEditorValue\")) {\n          this.geteditorvalue = b.jqx.get(g, \"getEditorValue\");\n        } else {\n          if (g.getEditorValue) {\n            this.geteditorvalue = g.getEditorValue;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"validation\")) {\n          this.validation = b.jqx.get(g, \"validation\");\n        } else {\n          if (g.validation) {\n            this.validation = g.validation;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"cellBeginEdit\")) {\n          this.cellbeginedit = b.jqx.get(g, \"cellBeginEdit\");\n        } else {\n          if (g.cellBeginEdit) {\n            this.cellbeginedit = g.cellBeginEdit;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"cellEndEdit\")) {\n          this.cellendedit = b.jqx.get(g, \"cellEndEdit\");\n        } else {\n          if (g.cellEndEdit) {\n            this.cellendedit = g.cellEndEdit;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"className\")) {\n          this.classname = b.jqx.get(g, \"className\");\n        }\n\n        if (b.jqx.hasProperty(g, \"cellClassName\")) {\n          this.cellclassname = b.jqx.get(g, \"cellClassName\");\n        } else {\n          if (g.cellClassName) {\n            this.cellclassname = g.cellClassName;\n          }\n        }\n\n        if (b.jqx.hasProperty(g, \"menu\")) {\n          this.menu = b.jqx.get(g, \"menu\");\n        }\n\n        if (b.jqx.hasProperty(g, \"aggregates\")) {\n          this.aggregates = b.jqx.get(g, \"aggregates\");\n        }\n\n        if (b.jqx.hasProperty(g, \"aggregatesRenderer\")) {\n          this.aggregatesrenderer = b.jqx.get(g, \"aggregatesRenderer\");\n        }\n\n        if (b.jqx.hasProperty(g, \"createFilterWidget\")) {\n          this.createfilterwidget = b.jqx.get(g, \"createFilterWidget\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filterType\")) {\n          this.filtertype = b.jqx.get(g, \"filterType\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filterDelay\")) {\n          this.filterdelay = b.jqx.get(g, \"filterDelay\");\n        }\n\n        if (b.jqx.hasProperty(g, \"rendered\")) {\n          this.rendered = b.jqx.get(g, \"rendered\");\n        }\n\n        if (b.jqx.hasProperty(g, \"exportable\")) {\n          this.exportable = b.jqx.get(g, \"exportable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filterItems\")) {\n          this.filteritems = b.jqx.get(g, \"filterItems\");\n        }\n\n        if (b.jqx.hasProperty(g, \"cellValueChanging\")) {\n          this.cellvaluechanging = b.jqx.get(g, \"cellValueChanging\");\n        }\n\n        if (b.jqx.hasProperty(g, \"draggable\")) {\n          this.draggable = b.jqx.get(g, \"draggable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"filterCondition\")) {\n          this.filtercondition = b.jqx.get(g, \"filterCondition\");\n        }\n\n        if (b.jqx.hasProperty(g, \"threeStateCheckbox\")) {\n          this.threestatecheckbox = b.jqx.get(g, \"threeStateCheckbox\");\n        }\n\n        if (b.jqx.hasProperty(g, \"nullable\")) {\n          this.nullable = b.jqx.get(g, \"nullable\");\n        }\n\n        if (b.jqx.hasProperty(g, \"columnGroup\")) {\n          this.columngroup = b.jqx.get(g, \"columnGroup\");\n        }\n\n        if (!g instanceof String && !(typeof g == \"string\")) {\n          for (var h in g) {\n            if (!f.hasOwnProperty(h)) {\n              if (!f.hasOwnProperty(h.toLowerCase())) {\n                d.host.remove();\n                throw new Error(\"jqxGrid: Invalid property name - \" + h + \".\");\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this._initfields(e);\n\n    return this;\n  }\n\n  function a(d, e) {\n    this.setdata = function (f) {\n      if (f != null) {\n        this.bounddata = f;\n        this.boundindex = f.boundindex;\n        this.visibleindex = f.visibleindex;\n        this.group = f.group;\n        this.parentbounddata = f.parentItem;\n        this.uniqueid = f.uniqueid;\n        this.level = f.level;\n      }\n    };\n\n    this.setdata(e);\n    this.parentrow = null;\n    this.subrows = new Array();\n    this.owner = d;\n    this.height = 25;\n    this.hidden = false;\n    this.rowdetails = null;\n    this.rowdetailsheight = 100;\n    this.rowdetailshidden = true;\n    this.top = -1;\n\n    this.setrowinfo = function (f) {\n      this.hidden = f.hidden;\n      this.rowdetails = f.rowdetails;\n      this.rowdetailsheight = f.rowdetailsheight;\n      this.rowdetailshidden = !f.showdetails;\n      this.height = f.height;\n    };\n\n    return this;\n  }\n\n  b.jqx.collection = function (d) {\n    this.records = new Array();\n    this.owner = d;\n    this.updating = false;\n\n    this.beginupdate = function () {\n      this.updating = true;\n    };\n\n    this.resumeupdate = function () {\n      this.updating = false;\n    };\n\n    this._raiseEvent = function (e) {};\n\n    this.clear = function () {\n      this.records = new Array();\n    };\n\n    this.replace = function (f, e) {\n      this.records[f] = e;\n\n      if (!this.updating) {\n        this._raiseEvent({\n          type: \"replace\",\n          element: e\n        });\n      }\n    };\n\n    this.isempty = function (e) {\n      if (this.records[e] == undefined) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.initialize = function (e) {\n      if (e < 1) {\n        e = 1;\n      }\n\n      this.records[e - 1] = -1;\n    };\n\n    this.length = function () {\n      return this.records.length;\n    };\n\n    this.indexOf = function (e) {\n      return this.records.indexOf(e);\n    };\n\n    this.add = function (e) {\n      if (e == null) {\n        return false;\n      }\n\n      this.records[this.records.length] = e;\n\n      if (!this.updating) {\n        this._raiseEvent({\n          type: \"add\",\n          element: e\n        });\n      }\n\n      return true;\n    };\n\n    this.insertAt = function (f, e) {\n      if (f == null || f == undefined) {\n        return false;\n      }\n\n      if (e == null) {\n        return false;\n      }\n\n      if (f >= 0) {\n        if (f < this.records.length) {\n          this.records.splice(f, 0, e);\n\n          if (!this.updating) {\n            this._raiseEvent({\n              type: \"insert\",\n              index: f,\n              element: e\n            });\n          }\n\n          return true;\n        } else {\n          return this.add(e);\n        }\n      }\n\n      return false;\n    };\n\n    this.remove = function (f) {\n      if (f == null || f == undefined) {\n        return false;\n      }\n\n      var e = this.records.indexOf(f);\n\n      if (e != -1) {\n        this.records.splice(e, 1);\n\n        if (!this.updating) {\n          this._raiseEvent({\n            type: \"remove\",\n            element: f\n          });\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n\n    this.removeAt = function (f) {\n      if (f == null || f == undefined) {\n        return false;\n      }\n\n      if (f < 0) {\n        return false;\n      }\n\n      if (f < this.records.length) {\n        var e = this.records[f];\n        this.records.splice(f, 1);\n\n        if (!this.updating) {\n          this._raiseEvent({\n            type: \"removeAt\",\n            index: f,\n            element: e\n          });\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n\n    return this;\n  };\n\n  b.jqx.dataview = function () {\n    this.self = this;\n    this.aggregates = false;\n    this.grid = null;\n    this.uniqueId = \"id\";\n    this.records = [];\n    this.rows = [];\n    this.columns = [];\n    this.groups = [];\n    this.filters = new Array();\n    this.updated = null;\n    this.update = null;\n    this.suspend = false;\n    this.pagesize = 0;\n    this.pagenum = 0;\n    this.totalrows = 0;\n    this.totalrecords = 0;\n    this.groupable = true;\n    this.loadedrecords = [];\n    this.loadedrootgroups = [];\n    this.loadedgroups = [];\n    this.loadedgroupsByKey = [];\n    this.virtualmode = true;\n    this._cachegrouppages = new Array();\n    this.source = null;\n    this.changedrecords = new Array();\n    this.rowschangecallback = null;\n    this.that = this;\n    this.destroy = function () {\n      delete this.self;\n      delete this.grid;\n      delete this.uniqueId;\n      delete this.records;\n      delete this.rows;\n      delete this.columns;\n      delete this.groups;\n      delete this.filters;\n      delete this.updated;\n      delete this.update;\n      delete this.suspend;\n      delete this.pagesize;\n      delete this.pagenum;\n      delete this.totalrows;\n      delete this.totalrecords;\n      delete this.groupable;\n      delete this.loadedrecords;\n      delete this.loadedrootgroups;\n      delete this.loadedgroups;\n      delete this.loadedgroupsByKey;\n      delete this.virtualmode;\n      delete this._cachegrouppages;\n      delete this.source;\n      delete this.changedrecords;\n      delete this.rowschangecallback;\n      delete this.that;\n    }, this.suspendupdate = function () {\n      this.suspend = true;\n    }, this.isupdating = function () {\n      return this.suspend;\n    }, this.resumeupdate = function (d) {\n      this.suspend = false;\n\n      if (d == undefined) {\n        d = true;\n      }\n\n      this.refresh(d);\n    }, this.getrecords = function () {\n      return this.records;\n    }, this.clearrecords = function () {\n      this.recordids = new Array();\n    };\n\n    this.databind = function (y, p) {\n      var w = y._source ? true : false;\n      var h = null;\n\n      if (this.grid) {\n        this.aggregates = this.grid.showgroupaggregates;\n      }\n\n      if (w) {\n        h = y;\n        y = y._source;\n      } else {\n        h = new b.jqx.dataAdapter(y, {\n          autoBind: false\n        });\n      }\n\n      var f = function (m) {\n        h.recordids = [];\n        h.records = new Array();\n        h.cachedrecords = new Array();\n        h.originaldata = new Array();\n        h._options.virtualmode = m.virtualmode;\n        h._options.totalrecords = m.totalrecords;\n        h._options.originaldata = m.originaldata;\n        h._options.recordids = m.recordids;\n        h._options.cachedrecords = new Array();\n        h._options.pagenum = m.pagenum;\n        h._options.pageable = m.pageable;\n\n        if (y.type != undefined) {\n          h._options.type = y.type;\n        }\n\n        if (y.formatdata != undefined) {\n          h._options.formatData = y.formatdata;\n        }\n\n        if (y.contenttype != undefined) {\n          h._options.contentType = y.contenttype;\n        }\n\n        if (y.async != undefined) {\n          h._options.async = y.async;\n        }\n\n        if (y.updaterow != undefined) {\n          h._options.updaterow = y.updaterow;\n        }\n\n        if (y.addrow != undefined) {\n          h._options.addrow = y.addrow;\n        }\n\n        if (y.deleterow != undefined) {\n          h._options.deleterow = y.deleterow;\n        }\n\n        if (m.pagesize == 0) {\n          m.pagesize = 10;\n        }\n\n        h._options.pagesize = m.pagesize;\n      };\n\n      var B = function (I) {\n        I.totalrecords = h.totalrecords;\n\n        if (!I.virtualmode) {\n          I.originaldata = h.originaldata;\n          I.records = h.records;\n          I.recordids = h.recordids;\n          I.cachedrecords = h.cachedrecords;\n        } else {\n          var m = {\n            startindex: I.pagenum * I.pagesize,\n            endindex: I.pagenum * I.pagesize + I.pagesize\n          };\n\n          if (y.recordstartindex != undefined) {\n            m.startindex = parseInt(y.recordstartindex);\n          }\n\n          if (y.recordendindex != undefined) {\n            m.endindex = parseInt(y.recordendindex);\n          } else {\n            if (!I.grid.pageable) {\n              m.endindex = m.startindex + 100;\n\n              if (I.grid.autoheight) {\n                m.endindex = m.startindex + I.totalrecords;\n              }\n            }\n          }\n\n          if (!y.recordendindex) {\n            if (!I.grid.pageable) {\n              m.endindex = m.startindex + 100;\n\n              if (I.grid.autoheight) {\n                m.endindex = m.startindex + I.totalrecords;\n              }\n            } else {\n              m = {\n                startindex: I.pagenum * I.pagesize,\n                endindex: I.pagenum * I.pagesize + I.pagesize\n              };\n            }\n          }\n\n          m.data = h.records;\n\n          if (I.grid.rendergridrows && I.totalrecords > 0) {\n            var J = 0;\n            y.records = I.grid.rendergridrows(m);\n\n            if (y.records.length) {\n              J = y.records.length;\n            }\n\n            if (y.records && !y.records[m.startindex]) {\n              var K = new Array();\n              var H = m.startindex;\n              b.each(y.records, function () {\n                K[H] = this;\n                H++;\n                J++;\n              });\n              y.records = K;\n            }\n\n            if (J == 0) {\n              if (y.records) {\n                b.each(y.records, function () {\n                  J++;\n                });\n              }\n            }\n\n            if (J > 0 && J < m.endindex - m.startindex && !I.grid.groupable) {\n              var x = y.records[0];\n\n              for (var q = 0; q < m.endindex - m.startindex - J; q++) {\n                var L = {};\n\n                for (var o in x) {\n                  L[o] = \"\";\n                }\n\n                if (y.records.push) {\n                  y.records.push(L);\n                }\n              }\n            }\n          }\n\n          if (!y.records || I.totalrecords == 0) {\n            y.records = new Array();\n          }\n\n          I.originaldata = y.records;\n          I.records = y.records;\n          I.cachedrecords = y.records;\n        }\n      };\n\n      f(this);\n      this.source = y;\n\n      if (p !== undefined) {\n        var k = p;\n      }\n\n      var G = this.that;\n\n      switch (y.datatype) {\n        case \"local\":\n        case \"array\":\n        default:\n          if (y.localdata == null) {\n            y.localdata = [];\n          }\n\n          if (y.localdata != null) {\n            h.unbindBindingUpdate(G.grid.element.id);\n\n            if (!G.grid.autobind && G.grid.isInitialized || G.grid.autobind) {\n              h.dataBind();\n            }\n\n            var n = function (o) {\n              if (o != undefined && o != \"\") {\n                var q = h._changedrecords[0];\n\n                if (q) {\n                  var x = new Array();\n                  b.each(h._changedrecords, function (K) {\n                    var H = this.index;\n                    var I = this.record;\n                    G.grid._updateFromAdapter = true;\n\n                    switch (o) {\n                      case \"update\":\n                        var J = G.grid.getrowid(H);\n\n                        if (K == h._changedrecords.length - 1) {\n                          G.grid.updaterow(J, I);\n                        } else {\n                          G.grid.updaterow(J, I, false);\n                        }\n\n                        G.grid._updateFromAdapter = false;\n                        return;\n\n                      case \"add\":\n                        G.grid.addrow(null, I);\n                        G.grid._updateFromAdapter = false;\n                        return;\n\n                      case \"remove\":\n                        var J = G.grid.getrowid(H);\n                        x.push(J);\n                        return;\n                    }\n                  });\n\n                  if (x.length > 0) {\n                    G.grid.deleterow(x, false);\n                    G.grid._updateFromAdapter = false;\n                  }\n                }\n\n                if (o == \"update\") {\n                  return;\n                }\n              }\n\n              var m = G.totalrecords;\n              B(G, o);\n\n              if (y.localdata.notifier === null && y.localdata.name == \"observableArray\") {\n                y.localdata.notifier = function (L) {\n                  if (G._updating) {\n                    return;\n                  }\n\n                  G._updating = true;\n                  var K = G.grid.getrowid(L.index);\n\n                  switch (L.type) {\n                    case \"add\":\n                      var H = b.extend({}, L.object[L.index]);\n                      var J = h.getid(y.id, H, L.index);\n\n                      if (L.index === 0) {\n                        G.grid.addrow(J, H, \"first\");\n                      } else {\n                        G.grid.addrow(J, H);\n                      }\n\n                      break;\n\n                    case \"delete\":\n                      G.grid.deleterow(K);\n                      break;\n\n                    case \"update\":\n                      if (L.path && L.path.split(\".\").length > 1) {\n                        var I = L.path.split(\".\");\n                        G.grid.setcellvalue(L.index, I[I.length - 1], L.newValue);\n                      } else {\n                        var H = b.extend({}, L.object[L.index]);\n                        G.grid.updaterow(K, H);\n                      }\n\n                      break;\n                  }\n\n                  G._updating = false;\n                };\n              }\n\n              if (o == \"updateData\") {\n                G.refresh();\n\n                G.grid._updateGridData();\n              } else {\n                if (y.recordstartindex && G.virtualmode) {\n                  G.updateview(y.recordstartindex, y.recordstartindex + G.pagesize);\n                } else {\n                  G.refresh();\n                }\n\n                G.update(m != G.totalrecords);\n              }\n            };\n\n            n();\n            h.bindBindingUpdate(G.grid.element.id, n);\n          }\n\n          break;\n\n        case \"json\":\n        case \"jsonp\":\n        case \"xml\":\n        case \"xhtml\":\n        case \"script\":\n        case \"text\":\n        case \"csv\":\n        case \"tab\":\n          if (y.localdata != null) {\n            h.unbindBindingUpdate(G.grid.element.id);\n\n            if (!G.grid.autobind && G.grid.isInitialized || G.grid.autobind) {\n              h.dataBind();\n            }\n\n            var n = function (o) {\n              var m = G.totalrecords;\n              B(G);\n\n              if (o == \"updateData\") {\n                G.refresh();\n\n                G.grid._updateGridData();\n              } else {\n                if (y.recordstartindex && G.virtualmode) {\n                  G.updateview(y.recordstartindex, y.recordstartindex + G.pagesize);\n                } else {\n                  G.refresh();\n                }\n\n                G.update(m != G.totalrecords);\n              }\n            };\n\n            n();\n            h.bindBindingUpdate(G.grid.element.id, n);\n            return;\n          }\n\n          var D = {};\n          var C = [];\n          var v = 0;\n          var E = {};\n\n          for (var j = 0; j < G.filters.length; j++) {\n            var g = G.filters[j].datafield;\n            var l = G.filters[j].filter;\n\n            if (!l.getfilters) {\n              continue;\n            }\n\n            var i = l.getfilters();\n            E[g + \"operator\"] = l.operator;\n\n            for (var A = 0; A < i.length; A++) {\n              i[A].datafield = g;\n              var u = i[A].value;\n\n              if (i[A].type == \"datefilter\") {\n                if (i[A].value && i[A].value.toLocaleString) {\n                  var d = G.grid.getcolumn(i[A].datafield);\n\n                  if (d && d.cellsformat) {\n                    var z = G.grid.source.formatDate(i[A].value, d.cellsformat, G.grid.gridlocalization);\n\n                    if (z) {\n                      E[\"filtervalue\" + v] = z;\n                    } else {\n                      E[\"filtervalue\" + v] = i[A].value.toLocaleString();\n                    }\n                  } else {\n                    E[\"filtervalue\" + v] = u.toString();\n                  }\n                } else {\n                  E[\"filtervalue\" + v] = u.toString();\n                }\n              } else {\n                E[\"filtervalue\" + v] = u.toString();\n\n                if (i[A].data) {\n                  E[\"filterid\" + v] = i[A].data.toString();\n                }\n\n                if (i[A].id) {\n                  E[\"filterid\" + v] = i[A].id.toString();\n                }\n              }\n\n              E[\"filtercondition\" + v] = i[A].condition;\n              E[\"filteroperator\" + v] = i[A].operator;\n              E[\"filterdatafield\" + v] = g;\n              var t = {\n                label: u.toString()\n              };\n\n              if (i[A].data) {\n                t.value = i[A].data.toString();\n              }\n\n              if (i[A].id) {\n                t.value = i[A].id.toString();\n              } else {\n                t.value = u.toString();\n              }\n\n              t.condition = i[A].condition;\n              t.operator = i[A].operator == 0 ? \"and\" : \"or\";\n              t.field = g;\n              t.type = i[A].type;\n              var e = false;\n\n              if (C.length > 0) {\n                for (var s = 0; s < C.length; s++) {\n                  var r = C[s];\n\n                  if (r.field == g) {\n                    r.filters.push(t);\n                    e = true;\n                    break;\n                  }\n                }\n              }\n\n              if (!e) {\n                C.push({\n                  field: g,\n                  filters: []\n                });\n                C[C.length - 1].filters.push(t);\n              }\n\n              v++;\n            }\n          }\n\n          E.filterGroups = C;\n          E.filterscount = v;\n          E.groupscount = G.groups.length;\n\n          for (var j = 0; j < G.groups.length; j++) {\n            E[\"group\" + j] = G.groups[j];\n          }\n\n          if (y.recordstartindex == undefined) {\n            y.recordstartindex = 0;\n          }\n\n          if (y.recordendindex == undefined || y.recordendindex == 0) {\n            if (G.grid.height && G.grid.height.toString().indexOf(\"%\") == -1) {\n              y.recordendindex = parseInt(G.grid.height) / G.grid.rowsheight;\n              y.recordendindex += 2;\n              y.recordendindex = parseInt(y.recordendindex);\n            } else {\n              y.recordendindex = b(window).height() / G.grid.rowsheight;\n              y.recordendindex = parseInt(y.recordendindex);\n            }\n\n            if (G.pageable) {\n              y.recordendindex = G.pagesize;\n            }\n          }\n\n          if (G.pageable) {\n            y.recordstartindex = G.pagenum * G.pagesize;\n            y.recordendindex = (G.pagenum + 1) * G.pagesize;\n          }\n\n          b.extend(E, {\n            sortdatafield: G.sortfield,\n            sortorder: G.sortfielddirection,\n            pagenum: G.pagenum,\n            pagesize: G.grid.pagesize,\n            recordstartindex: y.recordstartindex,\n            recordendindex: y.recordendindex\n          });\n          var F = h._options.data;\n\n          if (h._options.data) {\n            b.extend(h._options.data, E);\n          } else {\n            if (y.data) {\n              b.extend(E, y.data);\n            }\n\n            h._options.data = E;\n          }\n\n          var n = function () {\n            var o = b.jqx.browser.msie && b.jqx.browser.version < 9;\n\n            var q = function () {\n              var x = G.totalrecords;\n              B(G);\n\n              if (y.recordstartindex && G.virtualmode) {\n                G.updateview(y.recordstartindex, y.recordstartindex + G.pagesize);\n              } else {\n                G.refresh();\n              }\n\n              G.update(x != G.totalrecords);\n            };\n\n            if (o) {\n              try {\n                q();\n              } catch (m) {}\n            } else {\n              q();\n            }\n          };\n\n          h.unbindDownloadComplete(G.grid.element.id);\n          h.bindDownloadComplete(G.grid.element.id, n);\n\n          if (!G.grid.autobind && G.grid.isInitialized || G.grid.autobind) {\n            h.dataBind();\n          } else {\n            if (!G.grid.isInitialized && !G.grid.autobind) {\n              n();\n            }\n          }\n\n          h._options.data = F;\n      }\n    };\n\n    this.getid = function (g, e, f) {\n      if (b(g, e).length > 0) {\n        return b(g, e).text();\n      }\n\n      if (g) {\n        if (g.toString().length > 0) {\n          var d = b(e).attr(g);\n\n          if (d != null && d.toString().length > 0) {\n            return d;\n          }\n        }\n      }\n\n      return f;\n    };\n\n    this.getvaluebytype = function (g, d) {\n      var e = g;\n\n      if (d.type == \"date\") {\n        var f = new Date(g);\n\n        if (f.toString() == \"NaN\" || f.toString() == \"Invalid Date\") {\n          if (b.jqx.dataFormat) {\n            g = b.jqx.dataFormat.tryparsedate(g);\n          } else {\n            g = f;\n          }\n        } else {\n          g = f;\n        }\n\n        if (g == null) {\n          g = e;\n        }\n      } else {\n        if (d.type == \"float\") {\n          var g = parseFloat(g);\n\n          if (isNaN(g)) {\n            g = e;\n          }\n        } else {\n          if (d.type == \"int\") {\n            var g = parseInt(g);\n\n            if (isNaN(g)) {\n              g = e;\n            }\n          } else {\n            if (d.type == \"bool\") {\n              if (g != null) {\n                if (g.toLowerCase() == \"false\") {\n                  g = false;\n                } else {\n                  if (g.toLowerCase() == \"true\") {\n                    g = true;\n                  }\n                }\n              }\n\n              if (g == 1) {\n                g = true;\n              } else {\n                if (g == 0) {\n                  g = false;\n                } else {\n                  g = \"\";\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return g;\n    };\n\n    this.setpaging = function (d) {\n      if (d.pageSize != undefined) {\n        this.pagesize = d.pageSize;\n      }\n\n      if (d.pageNum != undefined) {\n        this.pagenum = Math.min(d.pageNum, Math.ceil(this.totalrows / this.pagesize));\n      }\n\n      this.refresh();\n    };\n\n    this.getpagingdetails = function () {\n      return {\n        pageSize: this.pagesize,\n        pageNum: this.pagenum,\n        totalrows: this.totalrows\n      };\n    };\n\n    this._clearcaches = function () {\n      this.sortcache = {};\n      this.sortdata = null;\n      this.changedrecords = new Array();\n      this.records = new Array();\n      this.rows = new Array();\n      this.cacheddata = new Array();\n      this.originaldata = new Array();\n      this.bounditems = new Array();\n      this.loadedrecords = new Array();\n      this.loadedrootgroups = new Array();\n      this.loadedgroups = new Array();\n      this.loadedgroupsByKey = new Array();\n      this._cachegrouppages = new Array();\n      this.recordsbyid = new Array();\n      this.cachedrecords = new Array();\n      this.recordids = new Array();\n    };\n\n    this.addfilter = function (g, f) {\n      var e = -1;\n\n      for (var d = 0; d < this.filters.length; d++) {\n        if (this.filters[d].datafield == g) {\n          e = d;\n          break;\n        }\n      }\n\n      if (e == -1) {\n        this.filters[this.filters.length] = {\n          filter: f,\n          datafield: g\n        };\n      } else {\n        this.filters[e] = {\n          filter: f,\n          datafield: g\n        };\n      }\n    };\n\n    this.removefilter = function (e) {\n      for (var d = 0; d < this.filters.length; d++) {\n        if (this.filters[d].datafield == e) {\n          this.filters.splice(d, 1);\n          break;\n        }\n      }\n    };\n\n    this.getItemFromIndex = function (d) {\n      return this.records[d];\n    };\n\n    this.updaterow = function (d, n, l) {\n      var e = this.filters && this.filters.length > 0 && !this.virtualmode;\n\n      if (!e && n != undefined && d != undefined) {\n        n.uid = d;\n\n        if (!n[this.source.id]) {\n          n[this.source.id] = n.uid;\n        }\n\n        var j = this.recordsbyid[\"id\" + d];\n        var k = this.records.indexOf(j);\n\n        if (k == -1) {\n          return false;\n        }\n\n        this.records[k] = n;\n\n        if (this.cachedrecords) {\n          this.cachedrecords[k] = n;\n        }\n\n        if (l == true || l == undefined) {\n          this.refresh();\n        }\n\n        this.changedrecords[n.uid] = {\n          Type: \"Update\",\n          OldData: j,\n          Data: n\n        };\n        return true;\n      } else {\n        if (this.filters && this.filters.length > 0) {\n          var f = this.cachedrecords;\n          var j = null;\n          var k = -1;\n\n          for (var h = 0; h < f.length; h++) {\n            if (f[h].uid == d) {\n              j = f[h];\n              k = h;\n              break;\n            }\n          }\n\n          if (j) {\n            var m = this.that;\n\n            for (var g in n) {\n              m.cachedrecords[k][g] = n[g];\n            }\n\n            if (l == true || l == undefined) {\n              this.refresh();\n            }\n\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    this.addrow = function (h, i, d, g) {\n      if (i != undefined) {\n        if (b.isEmptyObject(i)) {\n          if (this.source && this.source.datafields) {\n            b.each(this.source.datafields, function () {\n              var j = \"\";\n\n              if (this.type == \"number\") {\n                j = null;\n              }\n\n              if (this.type == \"date\") {\n                j = null;\n              }\n\n              if (this.type == \"bool\" || this.type == \"boolean\") {\n                j = false;\n              }\n\n              i[this.name] = j;\n            });\n          }\n        }\n\n        if (!h || this.recordsbyid[\"id\" + h]) {\n          i.uid = this.getid(this.source.id, i, this.totalrecords);\n          var e = this.recordsbyid[\"id\" + i.uid];\n\n          while (e != null) {\n            var f = Math.floor(Math.random() * 10000).toString();\n            i.uid = f;\n            e = this.recordsbyid[\"id\" + f];\n          }\n        } else {\n          i.uid = h;\n        }\n\n        if (!i[this.source.id]) {\n          if (this.source.id != undefined) {\n            i[this.source.id] = i.uid;\n          }\n        }\n\n        i.boundindex = this.records.length;\n\n        if (d == \"last\") {\n          this.records.push(i);\n        } else {\n          if (typeof d === \"number\" && isFinite(d)) {\n            this.records.splice(d, 0, i);\n          } else {\n            this.records.splice(0, 0, i);\n          }\n        }\n\n        if (this.filters && this.filters.length > 0) {\n          if (d == \"last\") {\n            this.cachedrecords.push(i);\n          } else {\n            if (typeof d === \"number\" && isFinite(d)) {\n              this.cachedrecords.splice(d, 0, i);\n            } else {\n              this.cachedrecords.splice(0, 0, i);\n            }\n          }\n        }\n\n        this.totalrecords++;\n\n        if (this.virtualmode) {\n          this.source.totalrecords = this.totalrecords;\n        }\n\n        if (g == true || g == undefined) {\n          this.refresh();\n        }\n\n        this.changedrecords[i.uid] = {\n          Type: \"New\",\n          Data: i\n        };\n        return true;\n      }\n\n      return false;\n    };\n\n    this.deleterow = function (j, h) {\n      if (j != undefined) {\n        var d = this.filters && this.filters.length > 0;\n\n        if (this.recordsbyid[\"id\" + j] && !d) {\n          var e = this.recordsbyid[\"id\" + j];\n          var k = this.records.indexOf(e);\n\n          if (this.grid && this.grid.sortable && this.grid.sortmode == \"many\") {\n            for (var g = 0; g < this.records.length; g++) {\n              if (this.records[g].boundindex === e.boundindex) {\n                k = g;\n                break;\n              }\n            }\n          }\n\n          this.changedrecords[j] = {\n            Type: \"Delete\",\n            Data: this.records[k]\n          };\n          this.records.splice(k, 1);\n          this.totalrecords--;\n\n          if (this.virtualmode) {\n            this.source.totalrecords = this.totalrecords;\n          }\n\n          if (h == true || h == undefined) {\n            this.refresh();\n          }\n\n          return true;\n        } else {\n          if (this.filters && this.filters.length > 0) {\n            var f = this.cachedrecords;\n            var e = null;\n            var k = -1;\n\n            for (var g = 0; g < f.length; g++) {\n              if (f[g].uid == j) {\n                e = f[g];\n                k = g;\n                break;\n              }\n            }\n\n            if (e) {\n              this.cachedrecords.splice(k, 1);\n\n              if (h == true || h == undefined) {\n                this.totalrecords = 0;\n                this.records = this.cachedrecords;\n                this.refresh();\n              }\n\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n\n      return false;\n    };\n\n    this.reload = function (f, d, r, g, h, u, t) {\n      var m = this.that;\n      var l = new Array();\n      var o = f;\n      var i = d;\n      var j = r;\n      var p = g;\n      var k = i.length;\n      var w = 0;\n      var e = 0;\n      var s, n;\n      this.columns = [];\n      this.bounditems = new Array();\n      this.loadedrecords = new Array();\n      this.loadedrootgroups = new Array();\n      this.loadedgroups = new Array();\n      this.loadedgroupsByKey = new Array();\n      this._cachegrouppages = new Array();\n      this.recordsbyid = {};\n\n      if (this.totalrecords == 0) {\n        Object.size = function (z) {\n          var y = 0,\n              x;\n\n          for (x in z) {\n            if (z.hasOwnProperty(x)) {\n              y++;\n            }\n          }\n\n          return y;\n        };\n\n        var v = Object.size(o);\n        this.totalrecords = v;\n        b.each(this.records, function (y) {\n          var z = this;\n          var x = 0;\n          b.each(z, function (A, B) {\n            m.columns[x++] = A;\n          });\n          return false;\n        });\n      }\n\n      if (this.virtualmode) {\n        if (this.pageable) {\n          this.updateview();\n          return;\n        }\n\n        var u = 0;\n\n        if (!this.groupable) {\n          this.updateview();\n          return;\n        } else {\n          var t = this.totalrecords;\n        }\n      } else {\n        var u = 0;\n        var t = this.totalrecords;\n      }\n\n      if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {\n        var q = u;\n        q = this.loadgrouprecords(0, u, t, j, e, p, i, k, l);\n      } else {\n        w = this.loadflatrecords(u, t, j, e, p, i, k, l);\n      }\n\n      if (k > e) {\n        i.splice(e, k - e);\n      }\n\n      if (this.groups.length > 0 && this.groupable) {\n        this.totalrows = q;\n      } else {\n        this.totalrows = w;\n      }\n\n      return l;\n    };\n\n    this.loadflatrecords = function (u, r, h, d, p, g, j, l) {\n      var m = this.that;\n      var o = u;\n      var v = u;\n      r = Math.min(r, this.totalrecords);\n      var f = this.sortdata != null;\n      var s = this.source.id && (this.source.datatype == \"local\" || this.source.datatype == \"array\" || this.source.datatype == \"\");\n      var t = f ? this.sortdata : this.records;\n\n      for (var k = u; k < r; k++) {\n        var q = {};\n\n        if (!f) {\n          q = new Object(t[k]);\n          var n = q[m.uniqueId];\n          q.boundindex = o;\n          m.loadedrecords[o] = q;\n\n          if (q.uid == undefined) {\n            q.uid = m.getid(m.source.id, q, o);\n          }\n\n          m.recordsbyid[\"id\" + q.uid] = t[k];\n          q.uniqueid = m.generatekey();\n          m.bounditems[this.bounditems.length] = q;\n        } else {\n          q = b.extend({}, t[k].value);\n          var n = q[m.uniqueId];\n          q.boundindex = t[k].index;\n\n          if (q.uid == undefined) {\n            q.uid = m.getid(m.source.id, q, q.boundindex);\n          }\n\n          m.recordsbyid[\"id\" + q.uid] = t[k].value;\n          m.loadedrecords[o] = q;\n          q.uniqueid = m.generatekey();\n          m.bounditems[q.boundindex] = q;\n        }\n\n        if (d >= j || n != g[d][m.uniqueId] || p && p[n]) {\n          l[l.length] = d;\n        }\n\n        g[d] = q;\n        d++;\n        q.visibleindex = v;\n        v++;\n        o++;\n      }\n\n      if (m.grid.summaryrows) {\n        var e = o;\n        b.each(m.grid.summaryrows, function () {\n          var i = b.extend({}, this);\n          i.boundindex = r++;\n          m.loadedrecords[e] = i;\n          i.uniqueid = m.generatekey();\n          m.bounditems[m.bounditems.length] = i;\n          g[d] = i;\n          d++;\n          i.visibleindex = v;\n          v++;\n          e++;\n        });\n      }\n\n      return v;\n    }, this.updateview = function (o, p) {\n      var r = this.that;\n      var k = this.pagesize * this.pagenum;\n      var n = 0;\n      var s = new Array();\n      var e = this.filters;\n      var j = this.updated;\n      var l = s.length;\n\n      if (this.pageable) {\n        if (this.virtualmode) {\n          if (!this.groupable || this.groups.length == 0) {\n            this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []);\n            this.totalrows = s.length;\n          } else {\n            if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {\n              if (this._cachegrouppages[this.pagenum + \"_\" + this.pagesize] != undefined) {\n                this.rows = this._cachegrouppages[this.pagenum + \"_\" + this.pagesize];\n                this.totalrows = this.rows.length;\n                return;\n              }\n\n              var m = this.pagesize * (1 + this.pagenum);\n\n              if (m > this.totalrecords) {\n                m = this.totalrecords;\n              }\n\n              this.loadgrouprecords(0, this.pagesize * this.pagenum, m, e, n, j, s, l, []);\n              this._cachegrouppages[this.pagenum + \"_\" + this.pagesize] = this.rows;\n              this.totalrows = this.rows.length;\n              return;\n            }\n          }\n        }\n      } else {\n        if (this.virtualmode && (!this.groupable || this.groups.length == 0)) {\n          var g = this.pagesize;\n\n          if (g == 0) {\n            g = Math.min(100, this.totalrecords);\n          }\n\n          var d = g * this.pagenum;\n\n          if (this.loadedrecords.length == 0) {\n            d = 0;\n          }\n\n          if (o != null && p != null) {\n            this.loadflatrecords(o, p, e, n, j, s, l, []);\n          } else {\n            this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []);\n          }\n\n          this.totalrows = this.loadedrecords.length;\n          this.rows = s;\n\n          if (s.length >= g) {\n            return;\n          }\n        }\n      }\n\n      if (this.groupable && this.pageable && this.groups.length > 0 && this._updategroupsinpage) {\n        s = this._updategroupsinpage(r, e, k, n, l, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum));\n      } else {\n        for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum); h++) {\n          var q = h < this.loadedrecords.length ? this.loadedrecords[h] : null;\n\n          if (q == null) {\n            continue;\n          }\n\n          if (!this.pagesize || k >= this.pagesize * this.pagenum && k <= this.pagesize * (this.pagenum + 1)) {\n            s[n] = q;\n            n++;\n          }\n\n          k++;\n        }\n      }\n\n      if ((s.length == 0 || s.length < this.pagesize) && !this.pageable && this.virtualmode) {\n        n = s.length;\n        var f = s.length;\n\n        for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum) - f; h++) {\n          var q = {};\n          q.boundindex = h + f;\n          q.visibleindex = h + f;\n          q.uniqueid = r.generatekey();\n          q.empty = true;\n          r.bounditems[h + f] = q;\n          s[n] = q;\n          n++;\n        }\n      }\n\n      this.rows = s;\n    };\n\n    this.generatekey = function () {\n      var d = function () {\n        return (1 + Math.random()) * 16 | 0;\n      };\n\n      return \"\" + d() + d() + \"-\" + d() + \"-\" + d() + \"-\" + d() + \"-\" + d() + d() + d();\n    };\n\n    this.reloaddata = function () {\n      this.reload(this.records, this.rows, this.filter, this.updated, true);\n    };\n\n    this.refresh = function (m) {\n      if (this.suspend) {\n        return;\n      }\n\n      if (m == undefined) {\n        m = true;\n      }\n\n      var g = this.rows.length;\n      var C = this.totalrows;\n\n      if (this.filters.length > 0 && !this.virtualmode) {\n        var r = \"\";\n        var f = this.cachedrecords.length;\n        var k = new Array();\n        this.totalrecords = 0;\n        var B = this.cachedrecords;\n        this._dataIndexToBoundIndex = new Array();\n        var t = this.filters.length;\n\n        if (this.source != null && this.source.filter != undefined && this.source.localdata != undefined) {\n          var n = this.source.filter(this.filters, B, f);\n\n          if (n == undefined) {\n            n = new Array();\n          }\n\n          for (var l = 0; l < f; l++) {\n            var h = B[l];\n            var x = n.indexOf(h) >= 0;\n\n            if (x) {\n              k[k.length] = b.extend({\n                dataindex: l\n              }, h);\n              this._dataIndexToBoundIndex[l] = {\n                boundindex: k.length - 1\n              };\n            } else {\n              this._dataIndexToBoundIndex[l] = null;\n            }\n          }\n\n          this.records = k;\n        } else {\n          if (this.source.filter == null || this.source.filter == undefined) {\n            for (var l = 0; l < f; l++) {\n              var h = B[l];\n              var x = undefined;\n\n              for (var w = 0; w < t; w++) {\n                var r = this.filters[w].filter;\n                var u = h[this.filters[w].datafield];\n                var q = r.evaluate(u);\n\n                if (this.grid.filter) {\n                  var A = this.grid.filter(u, h, this.filters[w].datafield, r, q);\n\n                  if (A !== undefined) {\n                    q = A;\n                  }\n                }\n\n                if (x == undefined) {\n                  x = q;\n                } else {\n                  if (r.operator == \"or\") {\n                    x = x || q;\n                  } else {\n                    x = x && q;\n                  }\n                }\n              }\n\n              if (x) {\n                k[k.length] = b.extend({\n                  dataindex: l\n                }, h);\n                this._dataIndexToBoundIndex[l] = {\n                  boundindex: k.length - 1\n                };\n              } else {\n                this._dataIndexToBoundIndex[l] = null;\n              }\n            }\n\n            this.records = k;\n          }\n        }\n\n        if (this.sortdata) {\n          if (this.grid && this.grid.sortmode !== \"many\") {\n            var e = this.sortfield;\n\n            if (this.sortcache[e]) {\n              this.sortdata = null;\n              var z = this.sortcache[e].direction;\n              this.sortcache[e] = null;\n              this.sortby(this.sortfield, z);\n              return;\n            }\n          } else {\n            var d = this.grid.getsortcolumns();\n\n            for (var y = 0; y < d.length; y++) {\n              var p = d[y];\n              var v = p.dataField;\n              this.grid.sortby(v, p.ascending, null);\n            }\n\n            return;\n          }\n        }\n      } else {\n        if (this.filters.length == 0 && !this.virtualmode) {\n          if (this.cachedrecords) {\n            this.totalrecords = 0;\n            var B = this.cachedrecords;\n            this.records = B;\n\n            if (this.sortdata) {\n              if (this.grid && this.grid.sortmode !== \"many\") {\n                var e = this.sortfield;\n\n                if (this.sortcache[e]) {\n                  this.sortdata = null;\n                  var z = this.sortcache[e].direction;\n                  this.sortcache[e] = null;\n                  this.sortby(this.sortfield, z);\n                  return;\n                }\n              } else {\n                var d = this.grid.getsortcolumns();\n\n                for (var y = 0; y < d.length; y++) {\n                  var p = d[y];\n                  var v = p.dataField;\n                  this.grid.sortby(v, p.ascending, null);\n                }\n\n                return;\n              }\n            }\n          }\n        }\n      }\n\n      var s = this.reload(this.records, this.rows, this.filter, this.updated, m);\n      this.updated = null;\n\n      if (this.rowschangecallback != null) {\n        var o = this.rows;\n\n        if (C != this.totalrows) {\n          this.rowschangecallback({\n            type: \"PagingChanged\",\n            data: this.getpagingdetails()\n          });\n        }\n\n        if (g != o.length) {\n          this.rowschangecallback({\n            type: \"RowsCountChanged\",\n            data: {\n              previous: g,\n              current: o.length\n            }\n          });\n        }\n\n        if (s.length > 0 || g != o.length) {\n          this.rowschangecallback({\n            type: \"RowsChanged\",\n            data: {\n              previous: g,\n              current: o.length,\n              diff: s\n            }\n          });\n        }\n      }\n    };\n\n    return this;\n  };\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}