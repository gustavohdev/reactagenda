{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    getcolumnindex: function (b) {\n      var c = this.getcolumn(b);\n      var d = this.columns.records.indexOf(c);\n      return d;\n    },\n    setcolumnindex: function (d, h, i) {\n      var g = this.getcolumn(d);\n\n      if (g.pinned) {\n        return;\n      }\n\n      if (g.hidden) {\n        return;\n      }\n\n      if (g.checkboxcolumn) {\n        return;\n      }\n\n      if (g.grouped) {\n        return;\n      }\n\n      var k = this.columns.records.indexOf(g);\n      this.columns.records.splice(k, 1);\n      this.columns.records.splice(h, 0, g);\n      var e = 0;\n      var m = this.headerZIndex;\n      this.columnsrow.children().detach();\n      var j = this.toThemeProperty(\"jqx-grid-cell\");\n      j += \" \" + this.toThemeProperty(\"jqx-grid-cell-pinned\");\n\n      if (this.filterrow) {\n        a(this.filterrow.children()[0]).children().detach();\n        this.filterrow[0].cells = [];\n      }\n\n      var l = this;\n      var b = null;\n\n      if (l.filterrow != undefined) {\n        var b = a(l.filterrow.children()[0]);\n      }\n\n      this.columnsrow[0].cells = [];\n      var f = false;\n      a.each(this.columns.records, function (n, q) {\n        var o = this.uielement;\n        l.columnsrow.append(o);\n\n        if (!l.rtl) {\n          o.css(\"z-index\", m--);\n        } else {\n          o.css(\"z-index\", m++);\n        }\n\n        var p = this.width;\n        o.css(\"left\", e);\n        l.columnsrow[0].cells[l.columnsrow[0].cells.length] = o[0];\n\n        if (l.filterrow) {\n          var r = a('<div style=\"overflow: hidden; position: absolute; height: 100%;\" class=\"' + j + '\"></div>');\n          b.append(r);\n          r.css(\"left\", e);\n          r.css(\"z-index\", m + 1);\n          r.width(this.width);\n          r[0].left = e;\n          r.append(this._filterwidget);\n          l.filterrow[0].cells[l.filterrow[0].cells.length] = r[0];\n        }\n\n        if (this.hidden) {\n          f = true;\n        }\n\n        if (!(this.hidden && this.hideable)) {\n          e += p;\n        }\n      });\n\n      if (this.groupable) {\n        var c = this.groups.length;\n\n        if (c > 0) {\n          if (k - c >= 0) {\n            k -= c;\n            h -= c;\n          }\n        }\n      }\n\n      if (this.rowdetails) {\n        if (k - 1 >= 0) {\n          k--;\n          h--;\n        }\n      }\n\n      if (this.selectionmode == \"checkbox\") {\n        if (k - 1 >= 0) {\n          k--;\n          h--;\n        }\n      }\n\n      var g = this._columns[k];\n\n      this._columns.splice(k, 1);\n\n      this._columns.splice(h, 0, g);\n\n      this._raiseEvent(24, {\n        columntext: g.text,\n        datafield: g.datafield,\n        oldindex: k,\n        newindex: h\n      });\n\n      if (i == false) {\n        return;\n      }\n\n      if (f || g.columntype == \"checkbox\") {\n        this.prerenderrequired = true;\n        this.rendergridcontent(true, false);\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n      } else {\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n      }\n\n      if (this._updatefilterrowui && this.filterable && this.showfilterrow) {\n        this._updatefilterrowui();\n      }\n\n      if (this.showeverpresentrow) {\n        this._updateaddnewrowui();\n      }\n\n      this._rendercolumngroups();\n\n      this._renderrows(this.virtualsizeinfo);\n    },\n    _pinnedColumnsLength: function () {\n      var b = 0;\n      a.each(this.columns.records, function () {\n        if (this.pinned) {\n          b++;\n        }\n\n        if (this.grouped) {\n          b++;\n        }\n      });\n\n      if (this.selectionmode == \"checkbox\") {\n        b++;\n      }\n\n      return b;\n    },\n    _handlecolumnsreorder: function () {\n      var d = this;\n      var g = -1;\n      var c = false;\n\n      if (!d.columnsreorder) {\n        return;\n      }\n\n      var f = \"mousemove.reorder\" + this.element.id;\n      var e = \"mousedown.reorder\" + this.element.id;\n      var h = \"mouseup.reorder\" + this.element.id;\n      var b = false;\n\n      if (this.isTouchDevice() && this.touchmode !== true) {\n        b = true;\n        f = a.jqx.mobile.getTouchEventName(\"touchmove\") + \".reorder\" + this.element.id;\n        e = a.jqx.mobile.getTouchEventName(\"touchstart\") + \".reorder\" + this.element.id;\n        h = a.jqx.mobile.getTouchEventName(\"touchend\") + \".reorder\" + this.element.id;\n      }\n\n      this.removeHandler(a(document), f);\n      this.addHandler(a(document), f, function (j) {\n        if (d.resizing) {\n          return true;\n        }\n\n        if (d.reordercolumn != null) {\n          var k = parseInt(j.pageX);\n          var r = parseInt(j.pageY);\n\n          if (b) {\n            var o = d.getTouches(j);\n            var n = o[0];\n\n            if (n != undefined) {\n              k = parseInt(n.pageX);\n              r = parseInt(n.pageY);\n            }\n          }\n\n          var m = d.host.coord();\n          var s = parseInt(m.left);\n          var t = parseInt(m.top);\n\n          if (d.dragmousedownoffset == undefined || d.dragmousedownoffset == null) {\n            d.dragmousedownoffset = {\n              left: 0,\n              top: 0\n            };\n          }\n\n          var q = parseInt(k) - parseInt(d.dragmousedownoffset.left);\n          var i = parseInt(r) - parseInt(d.dragmousedownoffset.top);\n          d.reordercolumn.css({\n            left: q + \"px\",\n            top: i + \"px\"\n          });\n          c = false;\n\n          if (k >= s && k <= s + d.host.width()) {\n            if (r >= t && r <= t + d.host.height()) {\n              c = true;\n            }\n          }\n\n          g = -1;\n\n          if (c) {\n            d.reordercolumnicon.removeClass(d.toThemeProperty(\"jqx-grid-dragcancel-icon\"));\n            d.reordercolumnicon.addClass(d.toThemeProperty(\"jqx-grid-drag-icon\"));\n            var p = d.columnsheader.coord();\n            var l = p.top + d.columnsheader.height();\n\n            if (d.columnsdropline != null) {\n              if (r >= p.top && r <= l) {\n                g = d._handlereordercolumnsdroplines(k);\n              } else {\n                d.columnsdropline.fadeOut(\"slow\");\n              }\n            }\n          } else {\n            if (d.columnsdropline != null) {\n              d.columnsdropline.fadeOut(\"slow\");\n            }\n\n            d.reordercolumnicon.removeClass(d.toThemeProperty(\"jqx-grid-drag-icon\"));\n            d.reordercolumnicon.addClass(d.toThemeProperty(\"jqx-grid-dragcancel-icon\"));\n          }\n\n          if (b) {\n            j.preventDefault();\n            j.stopPropagation();\n            return false;\n          }\n        }\n      });\n      this.columnsbounds = new Array();\n      this.removeHandler(a(document), e);\n      this.addHandler(a(document), e, function (j) {\n        if (d.resizing) {\n          return true;\n        }\n\n        d.columnsbounds = new Array();\n        var l = d.host.coord().left;\n        var k = d.host.coord().top;\n\n        if (d.showtoolbar) {\n          k += d.toolbarheight;\n        }\n\n        if (d.groupable && d.showgroupsheader) {\n          k += d.groupsheaderheight;\n        }\n\n        var i = 0;\n        a.each(d.columns.records, function (n) {\n          var o = this;\n\n          if (o.hidden) {\n            d.columnsbounds[d.columnsbounds.length] = {\n              top: k,\n              column: o,\n              left: l,\n              width: 0,\n              height: 2 + d.rowsheight\n            };\n            return true;\n          }\n\n          if (i == 0) {\n            if (!d.rtl) {\n              l = parseInt(d.host.coord().left) - d.hScrollInstance.value;\n            } else {\n              if (d.hScrollBar.css(\"visibility\") != \"hidden\") {\n                l = parseInt(d.host.coord().left) - d.hScrollInstance.max + d.hScrollInstance.value;\n              } else {\n                if (d.vScrollBar.css(\"visibility\") == \"hidden\") {\n                  l = a(o.element).coord().left;\n                } else {\n                  l = a(o.element).coord().left - d.vScrollBar.width() - d.host.offset().left;\n                }\n              }\n            }\n          }\n\n          i++;\n          var m = 2 + d.columnsheight;\n\n          if (d.columnshierarchy) {\n            k = a(o.uielement).coord().top;\n            m = a(o.uielement).height();\n          }\n\n          d.columnsbounds[d.columnsbounds.length] = {\n            top: k,\n            column: o,\n            left: l,\n            width: o.width,\n            height: m\n          };\n          l += o.width;\n        });\n      });\n      this.removeHandler(a(document), h);\n      this.addHandler(a(document), h, function (i) {\n        if (d.resizing) {\n          return true;\n        }\n\n        d.__drag = false;\n        a(document.body).removeClass(\"jqx-disableselect\");\n        var l = parseInt(i.pageX);\n        var t = parseInt(i.pageY);\n\n        if (b) {\n          var o = d.getTouches(i);\n          var n = o[0];\n          l = parseInt(n.pageX);\n          t = parseInt(n.pageY);\n        }\n\n        var m = d.host.coord();\n        var v = parseInt(m.left);\n        var w = parseInt(m.top);\n        var j = d.groupsheader.height();\n\n        if (d.showtoolbar) {\n          w += d.toolbarheight;\n        }\n\n        d.columndragstarted = false;\n        d.dragmousedown = null;\n\n        if (d.reordercolumn != null) {\n          var k = a.data(d.reordercolumn[0], \"reorderrecord\");\n          var x = d.columns.records.indexOf(d.getcolumn(k));\n          d.reordercolumn.remove();\n          d.reordercolumn = null;\n          var p = 0;\n          p += d._pinnedColumnsLength();\n\n          if (k != null) {\n            if (c) {\n              if (g != -1) {\n                var q = g.index;\n\n                if (q >= p) {\n                  var s = d.columns.records[q];\n\n                  if (s != undefined) {\n                    var u = d.columns.records.indexOf(d.getcolumn(s.datafield));\n\n                    if (s.datafield == null) {\n                      var u = d.columns.records.indexOf(d.getcolumnbytext(s.text));\n                    }\n\n                    if (d.columngroups) {\n                      var r = s;\n\n                      if (x < u) {\n                        if (g.position == \"before\") {\n                          r = d.columns.records[u - 1];\n                        }\n                      }\n\n                      if (r.columngroup != d.getcolumn(k).columngroup) {\n                        if (d.columnsdropline != null) {\n                          d.columnsdropline.remove();\n                          d.columnsdropline = null;\n                        }\n\n                        return;\n                      }\n                    }\n\n                    if (x < u) {\n                      if (g.position == \"before\") {\n                        d.setcolumnindex(k, u - 1);\n                      } else {\n                        d.setcolumnindex(k, u);\n                      }\n                    } else {\n                      if (x > u) {\n                        d.setcolumnindex(k, u);\n                      }\n                    }\n\n                    if (d.autosavestate) {\n                      if (d.savestate) {\n                        d.savestate();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if (d.columnsdropline != null) {\n              d.columnsdropline.remove();\n              d.columnsdropline = null;\n            }\n          }\n        }\n      });\n    },\n    getcolumnbytext: function (c) {\n      var b = null;\n\n      if (this.columns.records) {\n        a.each(this.columns.records, function () {\n          if (this.text == c) {\n            b = this;\n            return false;\n          }\n        });\n      }\n\n      return b;\n    },\n    _handlereordercolumnsdroplines: function (h) {\n      var b = this;\n      var g = -1;\n\n      var d = b._pinnedColumnsLength();\n\n      var f = parseInt(b.host.coord().left);\n      var c = f + b.host.width();\n      var e = b.vScrollBar.css(\"visibility\") != \"hidden\" ? 19 : 0;\n\n      if (!b.rtl) {\n        e = 0;\n      }\n\n      a.each(b.columnsbounds, function (i) {\n        if (i >= d) {\n          if (this.width == 0) {\n            return true;\n          }\n\n          if (h <= this.left + this.width / 2) {\n            if (h > c) {\n              b.columnsdropline.fadeOut();\n              return false;\n            }\n\n            b.columnsdropline.css(\"left\", e + parseInt(this.left) + \"px\");\n            b.columnsdropline.css(\"top\", parseInt(this.top) + \"px\");\n            b.columnsdropline.height(this.height);\n            b.columnsdropline.fadeIn(\"slow\");\n            g = {\n              index: i,\n              position: \"before\"\n            };\n            return false;\n          } else {\n            if (h >= this.left + this.width / 2) {\n              if (this.left + this.width > c) {\n                b.columnsdropline.fadeOut();\n                return false;\n              }\n\n              b.columnsdropline.css(\"left\", e + 1 + this.left + this.width);\n              b.columnsdropline.css(\"top\", this.top);\n              b.columnsdropline.height(this.height);\n              b.columnsdropline.fadeIn(\"slow\");\n              g = {\n                index: i,\n                position: \"after\"\n              };\n            }\n          }\n        }\n      });\n      return g;\n    },\n    _createreordercolumn: function (c, e, h) {\n      var g = this;\n      var f = e;\n\n      if (g.reordercolumn) {\n        g.reordercolumn.remove();\n      }\n\n      if (g.columnsdropline) {\n        g.columnsdropline.remove();\n      }\n\n      g.reordercolumn = a(\"<div></div>\");\n      var j = c.clone();\n      g.reordercolumn.css(\"z-index\", 999999);\n      j.css(\"border-width\", \"1px\");\n      j.css(\"opacity\", \"0.4\");\n      var i = a(j.find(\".\" + g.toThemeProperty(\"jqx-grid-column-menubutton\")));\n\n      if (i.length > 0) {\n        i.css(\"display\", \"none\");\n      }\n\n      var b = a(j.find(\".jqx-icon-close\"));\n\n      if (b.length > 0) {\n        b.css(\"display\", \"none\");\n      }\n\n      g.reordercolumnicon = a('<div style=\"z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;\"></div>');\n      g.reordercolumnicon.addClass(g.toThemeProperty(\"jqx-grid-drag-icon\"));\n      g.reordercolumn.css(\"float\", \"left\");\n      g.reordercolumn.css(\"position\", \"absolute\");\n      var d = g.host.coord();\n      j.width(c.width() + 16);\n      g.reordercolumn.append(j);\n      g.reordercolumn.height(c.height());\n      g.reordercolumn.width(j.width());\n      g.reordercolumn.append(g.reordercolumnicon);\n      a(document.body).append(g.reordercolumn);\n      j.css(\"margin-left\", 0);\n      j.css(\"left\", 0);\n      j.css(\"top\", 0);\n      g.reordercolumn.css(\"left\", f.left + g.dragmousedown.left);\n      g.reordercolumn.css(\"top\", f.top + g.dragmousedown.top);\n\n      if (h != undefined && h) {\n        g.columnsdropline = a('<div style=\"z-index: 9999; display: none; position: absolute;\"></div>');\n        g.columnsdropline.width(2);\n        g.columnsdropline.addClass(g.toThemeProperty(\"jqx-grid-group-drag-line\"));\n        a(document.body).append(g.columnsdropline);\n      }\n    },\n    _handlecolumnsdragreorder: function (c, f) {\n      if (this.reordercolumn) {\n        this.reordercolumn.remove();\n      }\n\n      if (this.columnsdropline) {\n        this.columnsdropline.remove();\n      }\n\n      this.dragmousedown = null;\n      this.dragmousedownoffset = null;\n      this.columndragstarted = false;\n      this.reordercolumn = null;\n      var g = this;\n      var e;\n      var b = false;\n\n      if (this.isTouchDevice() && this.touchmode !== true) {\n        b = true;\n      }\n\n      var d = \"mousedown.drag\";\n      var e = \"mousemove.drag\";\n\n      if (b) {\n        d = a.jqx.mobile.getTouchEventName(\"touchstart\") + \".drag\";\n        e = a.jqx.mobile.getTouchEventName(\"touchmove\") + \".drag\";\n      } else {\n        this.addHandler(f, \"dragstart\", function (h) {\n          return false;\n        });\n      }\n\n      this.addHandler(f, d, function (j) {\n        if (false == c.draggable) {\n          return true;\n        }\n\n        if (g.resizing) {\n          return true;\n        }\n\n        g.__drag = true;\n        var i = j.pageX;\n        var h = j.pageY;\n\n        if (b) {\n          var k = g.getTouches(j);\n          var m = k[0];\n          i = m.pageX;\n          h = m.pageY;\n        }\n\n        g.dragmousedown = {\n          left: i,\n          top: h\n        };\n        var l = a(j.target).coord();\n        g.dragmousedownoffset = {\n          left: parseInt(i) - parseInt(l.left),\n          top: parseInt(h - l.top)\n        };\n        return true;\n      });\n      this.addHandler(f, e, function (j) {\n        if (!c.draggable) {\n          return true;\n        }\n\n        if (undefined == c.datafield) {\n          return true;\n        }\n\n        if (c.pinned) {\n          return true;\n        }\n\n        if (g.resizing) {\n          return true;\n        }\n\n        if (g.dragmousedown) {\n          var i = j.pageX;\n          var h = j.pageY;\n\n          if (b) {\n            var l = g.getTouches(j);\n            var n = l[0];\n\n            if (n != undefined) {\n              i = n.pageX;\n              h = n.pageY;\n            }\n          }\n\n          e = {\n            left: i,\n            top: h\n          };\n\n          if (!g.columndragstarted && g.reordercolumn == null) {\n            var k = Math.abs(e.left - g.dragmousedown.left);\n            var m = Math.abs(e.top - g.dragmousedown.top);\n\n            if (k > 3 || m > 3) {\n              g._createreordercolumn(f, e, true);\n\n              a(document.body).addClass(\"jqx-disableselect\");\n              a.data(g.reordercolumn[0], \"reorderrecord\", c.datafield);\n            }\n          }\n        }\n      });\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}