{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    selectallrows: function () {\n      this._trigger = false;\n      var d = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length;\n      this.selectedrowindexes = new Array();\n      var e = this.dataview.loadedrecords;\n\n      for (var c = 0; c < d; c++) {\n        var f = e[c];\n\n        if (!f) {\n          this.selectedrowindexes[c] = c;\n          continue;\n        }\n\n        var b = this.getboundindex(f);\n\n        if (b != undefined) {\n          this.selectedrowindexes[c] = b;\n        }\n      }\n\n      if (this.selectionmode == \"checkbox\" && !this._checkboxcolumnupdating) {\n        if (this._checkboxcolumn) {\n          this._checkboxcolumn.checkboxelement.jqxCheckBox({\n            checked: true\n          });\n        }\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      this._trigger = true;\n\n      if (this.selectionmode == \"checkbox\") {\n        this._raiseEvent(2, {\n          rowindex: this.selectedrowindexes\n        });\n      }\n    },\n    unselectallrows: function () {\n      this._trigger = false;\n      var b = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length;\n      this.selectedrowindexes = new Array();\n\n      if (this.selectionmode == \"checkbox\" && !this._checkboxcolumnupdating) {\n        if (this._checkboxcolumn) {\n          this._checkboxcolumn.checkboxelement.jqxCheckBox({\n            checked: false\n          });\n        }\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      this._trigger = true;\n\n      if (this.selectionmode == \"checkbox\") {\n        this._raiseEvent(2, {\n          rowindex: this.selectedrowindexes\n        });\n      }\n    },\n    selectrow: function (b, c) {\n      if (this.selectionmode !== \"none\") {\n        this._applyrowselection(b, true, c);\n\n        if (c !== false) {\n          this._updatecheckboxselection();\n        }\n      }\n    },\n    _updatecheckboxselection: function () {\n      if (this.selectionmode == \"checkbox\") {\n        var d = this.getrows();\n\n        if (d && this._checkboxcolumn) {\n          if (d.length === 0) {\n            this._checkboxcolumn.checkboxelement.jqxCheckBox({\n              checked: false\n            });\n\n            return;\n          }\n\n          var c = d.length;\n\n          if (this.groupable) {\n            c = this.dataview.loadedrecords.length;\n          }\n\n          if (this.virtualmode) {\n            c = this.source._source.totalrecords;\n          }\n\n          var b = this.selectedrowindexes.length;\n\n          if (b === c) {\n            this._checkboxcolumn.checkboxelement.jqxCheckBox({\n              checked: true\n            });\n          } else {\n            if (b === 0) {\n              this._checkboxcolumn.checkboxelement.jqxCheckBox({\n                checked: false\n              });\n            } else {\n              this._checkboxcolumn.checkboxelement.jqxCheckBox({\n                checked: null\n              });\n            }\n          }\n        }\n      }\n    },\n    unselectrow: function (b, c) {\n      this._applyrowselection(b, false, c);\n\n      if (c !== false) {\n        this._updatecheckboxselection();\n      }\n    },\n    selectcell: function (c, b) {\n      this._applycellselection(c, b, true);\n    },\n    unselectcell: function (c, b) {\n      this._applycellselection(c, b, false);\n    },\n    clearselection: function (c, d) {\n      this._trigger = false;\n      this.selectedrowindex = -1;\n      this._oldselectedcell = null;\n\n      if (d !== false) {\n        for (var b = 0; b < this.selectedrowindexes.length; b++) {\n          this._raiseEvent(3, {\n            rowindex: this.selectedrowindexes[b]\n          });\n        }\n      }\n\n      this.selectedrowindexes = new Array();\n      this.selectedcells = new Array();\n      this.selectedcell = null;\n\n      if (this.selectionmode == \"checkbox\" && !this._checkboxcolumnupdating) {\n        this._checkboxcolumn.checkboxelement.jqxCheckBox({\n          checked: false\n        });\n      }\n\n      for (var b = 0; b < this.columns.records.length; b++) {\n        this.columns.records[b].selected = false;\n\n        this.columns.records[b]._applyStyle();\n      }\n\n      if (false === c) {\n        this._trigger = true;\n        return;\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      this._trigger = true;\n\n      if (this.selectionmode == \"checkbox\") {\n        this._raiseEvent(3, {\n          rowindex: this.selectedrowindexes\n        });\n      }\n    },\n    getselectedrowindex: function () {\n      if (this.selectedrowindex == -1 || this.selectedrowindex == undefined) {\n        for (var b = 0; b < this.selectedrowindexes.length; b++) {\n          return this.selectedrowindexes[b];\n        }\n      }\n\n      return this.selectedrowindex;\n    },\n    getselectedrowindexes: function () {\n      return this.selectedrowindexes;\n    },\n    getselectedcell: function () {\n      if (!this.selectedcell) {\n        return null;\n      }\n\n      var b = this.selectedcell;\n      b.row = this.selectedcell.rowindex;\n      b.column = this.selectedcell.datafield;\n      b.value = this.getcellvalue(b.row, b.column);\n      return b;\n    },\n    getselectedcells: function () {\n      var b = new Array();\n\n      for (var c in this.selectedcells) {\n        b[b.length] = this.selectedcells[c];\n      }\n\n      return b;\n    },\n    _getcellsforcopypaste: function () {\n      var e = new Array();\n\n      if (this.selectionmode.indexOf(\"cell\") == -1) {\n        var h = this.selectedrowindexes;\n\n        for (var d = 0; d < h.length; d++) {\n          var c = h[d];\n\n          for (var f = 0; f < this.columns.records.length; f++) {\n            if (this.columns.records[f].datafield === \"_checkboxcolumn\") {\n              continue;\n            }\n\n            var g = c + \"_\" + this.columns.records[f].datafield;\n            var b = {\n              rowindex: c,\n              datafield: this.columns.records[f].datafield\n            };\n            e.push(b);\n          }\n        }\n      }\n\n      return e;\n    },\n    deleteselection: function () {\n      var d = this;\n      var f = d.getselectedcells();\n\n      if (this.selectionmode.indexOf(\"cell\") == -1) {\n        f = this._getcellsforcopypaste();\n      }\n\n      if (f != null && f.length > 0) {\n        for (var e = 0; e < f.length; e++) {\n          var b = f[e];\n          var g = d.getcolumn(b.datafield);\n          var h = d.getcellvalue(b.rowindex, b.datafield);\n\n          if (!g) {\n            continue;\n          }\n\n          if (h !== \"\") {\n            var c = null;\n\n            if (g.columntype == \"checkbox\") {\n              if (!g.threestatecheckbox) {\n                c = false;\n              }\n            }\n\n            d._raiseEvent(17, {\n              rowindex: b.rowindex,\n              datafield: b.datafield,\n              value: h\n            });\n\n            if (e == f.length - 1) {\n              d.setcellvalue(b.rowindex, b.datafield, c, true);\n\n              if (g.displayfield != g.datafield) {\n                d.setcellvalue(b.rowindex, g.displayfield, c, true);\n              }\n            } else {\n              d.setcellvalue(b.rowindex, b.datafield, c, false);\n\n              if (g.displayfield != g.datafield) {\n                d.setcellvalue(b.rowindex, g.displayfield, c, true);\n              }\n            }\n\n            d._raiseEvent(18, {\n              rowindex: b.rowindex,\n              datafield: b.datafield,\n              oldvalue: h,\n              value: c\n            });\n          }\n        }\n\n        this.dataview.updateview();\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n    },\n    copyselection: function () {\n      var n = \"\";\n      var s = this;\n      this.clipboardselection = {};\n      this.logicalclipboardselection = {};\n      this._clipboardselection = [];\n      var r = s.getselectedcells();\n\n      if (this.selectionmode.indexOf(\"cell\") == -1) {\n        r = this._getcellsforcopypaste();\n      }\n\n      var b = 0;\n      var e = new Array();\n\n      if (r != null && r.length > 0) {\n        var t = 999999999999999;\n        var q = -1;\n\n        for (var j = 0; j < r.length; j++) {\n          var l = r[j];\n          var d = s.getcolumn(l.datafield);\n\n          if (d != null && d.clipboard && (!d.hidden || this.copytoclipboardhiddencolumns)) {\n            if (e.indexOf(d.text) == -1) {\n              e.push(d.text);\n            }\n\n            var p = s.getcelltext(l.rowindex, d.displayfield);\n            var h = this.getrowdisplayindex(l.rowindex);\n\n            if (!this.clipboardselection[h]) {\n              this.clipboardselection[h] = {};\n            }\n\n            this.clipboardselection[h][d.displayfield] = p;\n\n            if (!this.logicalclipboardselection[h]) {\n              this.logicalclipboardselection[h] = {};\n            }\n\n            this.logicalclipboardselection[h][d.displayfield] = p;\n\n            if (d.displayfield != d.datafield) {\n              this.logicalclipboardselection[h][d.datafield] = s.getcellvalue(l.rowindex, d.datafield);\n            }\n\n            t = Math.min(t, h);\n            q = Math.max(q, h);\n          }\n        }\n\n        var g = new Array();\n\n        for (var f = t; f <= q; f++) {\n          if (!this.logicalclipboardselection[f]) {\n            continue;\n          }\n\n          var o = a.extend({}, this.logicalclipboardselection[f]);\n          g.push(o);\n        }\n\n        this.logicalclipboardselection = g;\n\n        if (this.copytoclipboardwithheaders) {\n          for (var c = 0; c < e.length; c++) {\n            if (c > 0) {\n              n += \"\\t\";\n            }\n\n            n += e[c];\n          }\n\n          n += \"\\r\\n\";\n        }\n\n        for (var f = t; f <= q; f++) {\n          var k = 0;\n          this._clipboardselection[this._clipboardselection.length] = new Array();\n\n          if (this.clipboardselection[f] != undefined) {\n            a.each(this.clipboardselection[f], function (i, m) {\n              if (k > 0) {\n                n += \"\\t\";\n              }\n\n              var u = m;\n\n              if (m == null) {\n                u = \"\";\n              }\n\n              s._clipboardselection[s._clipboardselection.length - 1][k] = u;\n              k++;\n              n += u;\n            });\n          } else {\n            continue;\n          }\n\n          if (f < q) {\n            n += \"\\r\\n\";\n          }\n        }\n      }\n\n      this.clipboardselectedtext = n;\n      return n;\n    },\n    pasteselection: function () {\n      var g = this.getselectedcells();\n      this._oldselectedcell = null;\n\n      if (this.selectionmode.indexOf(\"cell\") == -1) {\n        g = this._getcellsforcopypaste();\n      }\n\n      if (g != null && g.length > 0) {\n        var h = g[0].rowindex;\n        var w = this.getrowdisplayindex(h);\n        var q = g[0].datafield;\n\n        var u = this._getcolumnindex(q);\n\n        var o = 0;\n        this.selectedrowindexes = new Array();\n        this.selectedcells = new Array();\n        var k = g.length;\n        var B = 0;\n        var d = new Array();\n\n        if (this.copytoclipboardwithheaders) {\n          this._clipboardselection.splice(0, 1);\n        }\n\n        for (var z = 0; z < this._clipboardselection.length; z++) {\n          B += this._clipboardselection[z].length;\n          d[z] = new Array();\n\n          for (var y = 0; y < this._clipboardselection[z].length; y++) {\n            var r = this._clipboardselection[z][y];\n            d[z].push(r);\n          }\n        }\n\n        if (B < g.length) {\n          var n = new Array();\n\n          for (var z = 0; z < g.length; z++) {\n            var e = g[z];\n\n            if (!n[e.rowindex]) {\n              n[e.rowindex] = new Array();\n            }\n\n            n[e.rowindex].push(e);\n          }\n\n          var A = 0;\n          var D = 0;\n\n          for (var z = 0; z < n.length; z++) {\n            if (!n[z]) {\n              continue;\n            }\n\n            for (var y = 0; y < n[z].length; y++) {\n              var e = n[z][y];\n              var m = e.rowindex;\n              var f = this.getcolumn(e.datafield);\n\n              if (f.datafield === \"_checkboxcolumn\") {\n                continue;\n              }\n\n              if (f.hidden) {\n                continue;\n              }\n\n              var r = \"\";\n\n              if (undefined == d[A][D]) {\n                D = 0;\n              }\n\n              r = d[A][D];\n              D++;\n\n              if (f.cellsformat) {\n                if (f.cellsformat.indexOf(\"p\") != -1 || f.cellsformat.indexOf(\"c\") != -1 || f.cellsformat.indexOf(\"n\") != -1 || f.cellsformat.indexOf(\"f\") != -1) {\n                  if (r.indexOf(this.gridlocalization.currencysymbol) > -1) {\n                    r = r.replace(this.gridlocalization.currencysymbol, \"\");\n                  }\n\n                  var b = function (x, j, t) {\n                    var c = x;\n\n                    if (j == t) {\n                      return x;\n                    }\n\n                    var i = c.indexOf(j);\n\n                    while (i != -1) {\n                      c = c.replace(j, t);\n                      i = c.indexOf(j);\n                    }\n\n                    return c;\n                  };\n\n                  r = b(r, this.gridlocalization.thousandsseparator, \"\");\n                  r = r.replace(this.gridlocalization.decimalseparator, \".\");\n\n                  if (r.indexOf(this.gridlocalization.percentsymbol) > -1) {\n                    r = r.replace(this.gridlocalization.percentsymbol, \"\");\n                  }\n\n                  var E = \"\";\n\n                  for (var s = 0; s < r.length; s++) {\n                    var p = r.substring(s, s + 1);\n\n                    if (p === \"-\") {\n                      E += \"-\";\n                    }\n\n                    if (p === \".\") {\n                      E += \".\";\n                    }\n\n                    if (p.match(/^[0-9]+$/) != null) {\n                      E += p;\n                    }\n                  }\n\n                  r = E;\n                  r = r.replace(/ /g, \"\");\n                  r = new Number(r);\n\n                  if (isNaN(r)) {\n                    r = \"\";\n                  }\n                }\n              }\n\n              this._raiseEvent(17, {\n                rowindex: m,\n                datafield: e.datafield,\n                value: r\n              });\n\n              this.setcellvalue(m, f.displayfield, r, false);\n\n              if (f.displayfield != f.datafield && this.logicalclipboardselection) {\n                if (this.logicalclipboardselection[m]) {\n                  var v = this.logicalclipboardselection[m][f.datafield];\n\n                  if (v != undefined) {\n                    this.setcellvalue(m, f.datafield, v, false);\n                  }\n                }\n              }\n\n              this._raiseEvent(18, {\n                rowindex: m,\n                datafield: e.datafield,\n                oldvalue: this.getcellvalue(e.rowindex, e.datafield),\n                value: r\n              });\n\n              this._applycellselection(m, e.datafield, true, false);\n            }\n\n            A++;\n            D = 0;\n\n            if (!d[A]) {\n              A = 0;\n            }\n          }\n        } else {\n          if (!this._clipboardselection) {\n            return;\n          }\n\n          for (var l = 0; l < this._clipboardselection.length; l++) {\n            for (var C = 0; C < this._clipboardselection[l].length; C++) {\n              var f = this.getcolumnat(u + C);\n\n              if (!f) {\n                continue;\n              }\n\n              if (f.datafield === \"_checkboxcolumn\") {\n                continue;\n              }\n\n              if (f.hidden) {\n                continue;\n              }\n\n              var m = this.getrowboundindex(w + l);\n              var e = this.getcell(m, f.datafield);\n              var r = null;\n              r = this._clipboardselection[l][C];\n\n              if (r != null) {\n                if (f.cellsformat) {\n                  if (f.cellsformat.indexOf(\"p\") != -1 || f.cellsformat.indexOf(\"c\") != -1 || f.cellsformat.indexOf(\"n\") != -1 || f.cellsformat.indexOf(\"f\") != -1) {\n                    if (r.indexOf(this.gridlocalization.currencysymbol) > -1) {\n                      r = r.replace(this.gridlocalization.currencysymbol, \"\");\n                    }\n\n                    var b = function (x, j, t) {\n                      var c = x;\n\n                      if (j == t) {\n                        return x;\n                      }\n\n                      var i = c.indexOf(j);\n\n                      while (i != -1) {\n                        c = c.replace(j, t);\n                        i = c.indexOf(j);\n                      }\n\n                      return c;\n                    };\n\n                    r = b(r, this.gridlocalization.thousandsseparator, \"\");\n                    r = r.replace(this.gridlocalization.decimalseparator, \".\");\n\n                    if (r.indexOf(this.gridlocalization.percentsymbol) > -1) {\n                      r = r.replace(this.gridlocalization.percentsymbol, \"\");\n                    }\n\n                    var E = \"\";\n\n                    for (var s = 0; s < r.length; s++) {\n                      var p = r.substring(s, s + 1);\n\n                      if (p === \"-\") {\n                        E += \"-\";\n                      }\n\n                      if (p === \".\") {\n                        E += \".\";\n                      }\n\n                      if (p.match(/^[0-9]+$/) != null) {\n                        E += p;\n                      }\n                    }\n\n                    r = E;\n                    r = r.replace(/ /g, \"\");\n                    r = new Number(r);\n\n                    if (isNaN(r)) {\n                      r = \"\";\n                    }\n                  }\n                }\n\n                this._raiseEvent(17, {\n                  rowindex: m,\n                  datafield: e.datafield,\n                  value: r\n                });\n\n                this.setcellvalue(m, f.displayfield, r, false);\n\n                if (f.displayfield != f.datafield && this.logicalclipboardselection) {\n                  var v = this.logicalclipboardselection[l][f.datafield];\n\n                  if (v != undefined) {\n                    this.setcellvalue(m, f.datafield, v, false);\n                  }\n                }\n\n                this._raiseEvent(18, {\n                  rowindex: m,\n                  datafield: e.datafield,\n                  oldvalue: this.getcellvalue(e.rowindex, e.datafield),\n                  value: r\n                });\n\n                this._applycellselection(m, e.datafield, true, false);\n              }\n            }\n          }\n        }\n\n        if (this.selectionmode == \"checkbox\") {\n          this._updatecheckboxselection();\n        }\n\n        this.dataview.updateview();\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      if (this.clipboardend) {\n        this.clipboardend(\"paste\");\n      }\n    },\n    _applyrowselection: function (e, i, f, h, b) {\n      if (e == null) {\n        return false;\n      }\n\n      var j = this.selectedrowindex;\n\n      if (this.selectionmode == \"singlerow\") {\n        if (i) {\n          this._raiseEvent(2, {\n            rowindex: e,\n            row: this.getrowdata(e)\n          });\n        } else {\n          this._raiseEvent(3, {\n            rowindex: e,\n            row: this.getrowdata(e)\n          });\n        }\n\n        this._raiseEvent(3, {\n          rowindex: j\n        });\n\n        this.selectedrowindexes = new Array();\n        this.selectedcells = new Array();\n      }\n\n      if (h == true) {\n        this.selectedrowindexes = new Array();\n      }\n\n      if (this.dataview.filters.length > 0) {\n        var c = this.getrowdata(e);\n\n        if (c && c.dataindex !== undefined) {\n          e = c.dataindex;\n        } else {\n          if (c && c.dataindex === undefined) {\n            if (c.uid != undefined) {\n              e = this.getrowboundindexbyid(c.uid);\n            }\n          }\n        }\n      }\n\n      var d = this.selectedrowindexes.indexOf(e);\n\n      if (i) {\n        this.selectedrowindex = e;\n\n        if (d == -1) {\n          this.selectedrowindexes.push(e);\n\n          if (this.selectionmode != \"singlerow\") {\n            this._raiseEvent(2, {\n              rowindex: e,\n              row: this.getrowdata(e)\n            });\n          }\n        } else {\n          if (this.selectionmode == \"multiplerows\") {\n            this.selectedrowindexes.splice(d, 1);\n\n            this._raiseEvent(3, {\n              rowindex: this.selectedrowindex,\n              row: this.getrowdata(e)\n            });\n\n            this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[this.selectedrowindexes.length - 1] : -1;\n          }\n        }\n      } else {\n        if (d >= 0 || this.selectionmode == \"singlerow\" || this.selectionmode == \"multiplerowsextended\" || this.selectionmode == \"multiplerowsadvanced\") {\n          var g = this.selectedrowindexes[d];\n          this.selectedrowindexes.splice(d, 1);\n\n          this._raiseEvent(3, {\n            rowindex: g,\n            row: this.getrowdata(e)\n          });\n\n          this.selectedrowindex = -1;\n        }\n      }\n\n      if (f == undefined || f) {\n        this._rendervisualrows();\n      }\n\n      return true;\n    },\n    _applycellselection: function (e, b, h, f) {\n      if (e == null) {\n        return false;\n      }\n\n      if (b == null) {\n        return false;\n      }\n\n      var j = this.selectedrowindex;\n\n      if (this.selectionmode == \"singlecell\") {\n        var d = this.selectedcell;\n\n        if (d != null) {\n          this._raiseEvent(16, {\n            rowindex: d.rowindex,\n            datafield: d.datafield\n          });\n        }\n\n        this.selectedcells = new Array();\n      }\n\n      if (this.selectionmode == \"multiplecellsextended\" || this.selectionmode == \"multiplecellsadvanced\") {\n        var d = this.selectedcell;\n\n        if (d != null) {\n          this._raiseEvent(16, {\n            rowindex: d.rowindex,\n            datafield: d.datafield\n          });\n        }\n      }\n\n      var g = e + \"_\" + b;\n\n      if (this.dataview.filters.length > 0) {\n        var c = this.getrowdata(e);\n\n        if (c && c.dataindex !== undefined) {\n          e = c.dataindex;\n          var g = e + \"_\" + b;\n        } else {\n          if (c && c.dataindex === undefined) {\n            if (c.uid) {\n              e = this.getrowboundindexbyid(c.uid);\n              var g = e + \"_\" + b;\n            }\n          }\n        }\n      }\n\n      var i = {\n        rowindex: e,\n        datafield: b\n      };\n\n      if (h) {\n        this.selectedcell = i;\n\n        if (!this.selectedcells[g]) {\n          this.selectedcells[g] = i;\n          this.selectedcells.length++;\n\n          this._raiseEvent(15, i);\n        } else {\n          if (this.selectionmode == \"multiplecells\" || this.selectionmode == \"multiplecellsextended\" || this.selectionmode == \"multiplecellsadvanced\") {\n            delete this.selectedcells[g];\n\n            if (this.selectedcells.length > 0) {\n              this.selectedcells.length--;\n            }\n\n            this._raiseEvent(16, i);\n          }\n        }\n      } else {\n        delete this.selectedcells[g];\n\n        if (this.selectedcells.length > 0) {\n          this.selectedcells.length--;\n        }\n\n        this._raiseEvent(16, i);\n      }\n\n      if (f == undefined || f) {\n        this._rendervisualrows();\n      }\n\n      return true;\n    },\n    _getcellindex: function (b) {\n      var c = -1;\n      a.each(this.selectedcells, function () {\n        c++;\n\n        if (this[b]) {\n          return false;\n        }\n      });\n      return c;\n    },\n    _clearhoverstyle: function () {\n      if (undefined == this.hoveredrow || this.hoveredrow == -1) {\n        return;\n      }\n\n      if (this.vScrollInstance.isScrolling()) {\n        return;\n      }\n\n      if (this.hScrollInstance.isScrolling()) {\n        return;\n      }\n\n      var c = this.table.find(\".jqx-grid-cell-hover\");\n\n      if (c.length > 0) {\n        c.removeClass(this.toTP(\"jqx-grid-cell-hover\"));\n        c.removeClass(this.toTP(\"jqx-fill-state-hover\"));\n      }\n\n      for (var d = 0; d < c.length; d++) {\n        var e = c[d].getAttribute(\"columnindex\");\n\n        if (e) {\n          var b = this.columns.records[parseInt(e)];\n\n          if (b) {\n            b._applyCellStyle(c[d]);\n          }\n        }\n      }\n\n      this.hoveredrow = -1;\n    },\n    _clearselectstyle: function () {\n      var m = this.table[0].rows.length;\n      var r = this.table[0].rows;\n      var n = this.toTP(\"jqx-grid-cell-selected\");\n      var c = this.toTP(\"jqx-fill-state-pressed\");\n      var o = this.toTP(\"jqx-grid-cell-hover\");\n      var l = this.toTP(\"jqx-fill-state-hover\");\n\n      for (var k = 0; k < m; k++) {\n        var b = r[k];\n        var h = b.cells.length;\n        var q = b.cells;\n\n        for (var g = 0; g < h; g++) {\n          var e = q[g];\n          var p = a(e);\n\n          if (e.className.indexOf(\"jqx-grid-cell-selected\") != -1) {\n            p.removeClass(n);\n            p.removeClass(c);\n          }\n\n          if (e.className.indexOf(\"jqx-grid-cell-hover\") != -1) {\n            p.removeClass(o);\n            p.removeClass(l);\n          }\n\n          var f = e.getAttribute(\"columnindex\");\n\n          if (f) {\n            var d = this.columns.records[parseInt(f)];\n\n            if (d) {\n              d._applyCellStyle(e);\n            }\n          }\n        }\n      }\n    },\n    _selectpath: function (n, e) {\n      var l = this;\n      var i = this._lastClickedCell ? Math.min(this._lastClickedCell.row, n) : 0;\n      var k = this._lastClickedCell ? Math.max(this._lastClickedCell.row, n) : 0;\n\n      if (i <= k) {\n        var h = this._getcolumnindex(this._lastClickedCell.column);\n\n        var g = this._getcolumnindex(e);\n\n        var f = Math.min(h, g);\n        var d = Math.max(h, g);\n        this.selectedcells = new Array();\n        var m = this.dataview.loadedrecords;\n\n        for (var b = i; b <= k; b++) {\n          for (var j = f; j <= d; j++) {\n            var n = m[b];\n\n            this._applycellselection(l.getboundindex(n), l._getcolumnat(j).datafield, true, false);\n          }\n        }\n\n        this._rendervisualrows();\n      }\n    },\n    _selectrowpath: function (g) {\n      if (this.selectionmode == \"multiplerowsextended\") {\n        var c = this;\n        var b = this._lastClickedCell ? Math.min(this._lastClickedCell.row, g) : 0;\n        var h = this._lastClickedCell ? Math.max(this._lastClickedCell.row, g) : 0;\n        var f = this.dataview.loadedrecords;\n\n        if (b <= h) {\n          this.selectedrowindexes = new Array();\n\n          for (var e = b; e <= h; e++) {\n            var g = f[e];\n            var d = this.getrowboundindex(e);\n\n            this._applyrowselection(d, true, false);\n          }\n\n          this._rendervisualrows();\n        }\n      }\n    },\n    _selectrowwithmouse: function (q, b, c, f, d, t) {\n      var k = b.row;\n\n      if (k == undefined) {\n        return;\n      }\n\n      var l = b.index;\n\n      if (this.hittestinfo[l] == undefined) {\n        return;\n      }\n\n      for (var x = 0; x < this.columns.records.length; x++) {\n        var w = this.columns.records[x];\n        w.selected = false;\n\n        if (w.element) {\n          w.element.removeAttribute(\"selected\");\n        }\n\n        w._applyStyle();\n      }\n\n      var u = this.hittestinfo[l].visualrow;\n\n      if (this.hittestinfo[l].details) {\n        return;\n      }\n\n      var n = u.cells[0].className;\n\n      if (k.group) {\n        return;\n      }\n\n      if (this.selectionmode == \"multiplerows\" || this.selectionmode == \"multiplecells\" || this.selectionmode == \"checkbox\" || this.selectionmode.indexOf(\"multiple\") != -1 && (t == true || d == true)) {\n        var m = this.getboundindex(k);\n\n        if (this.dataview.filters.length > 0) {\n          var y = this.getrowdata(m);\n\n          if (y) {\n            m = y.dataindex;\n\n            if (m == undefined) {\n              var m = this.getboundindex(k);\n            }\n          }\n        }\n\n        var s = c.indexOf(m) != -1;\n        var z = this.getboundindex(k) + \"_\" + f;\n\n        if (this.selectionmode.indexOf(\"cell\") != -1) {\n          var h = this.selectedcells[z] != undefined;\n\n          if (this.selectedcells[z] != undefined && h) {\n            this._selectcellwithstyle(q, false, l, f, u);\n          } else {\n            this._selectcellwithstyle(q, true, l, f, u);\n          }\n\n          if (t && this._lastClickedCell == undefined) {\n            var g = this.getselectedcells();\n\n            if (g && g.length > 0) {\n              this._lastClickedCell = {\n                row: g[0].rowindex,\n                column: g[0].datafield\n              };\n            }\n          }\n\n          if (t && this._lastClickedCell) {\n            this._selectpath(k.visibleindex, f);\n\n            this.mousecaptured = false;\n\n            if (this.selectionarea.css(\"visibility\") == \"visible\") {\n              this.selectionarea.css(\"visibility\", \"hidden\");\n            }\n          }\n        } else {\n          if (s) {\n            if (d) {\n              this._applyrowselection(this.getboundindex(k), false);\n            } else {\n              this._selectrowwithstyle(q, u, false, f);\n            }\n          } else {\n            this._selectrowwithstyle(q, u, true, f);\n          }\n\n          if (t && this._lastClickedCell == undefined) {\n            var j = this.getselectedrowindexes();\n\n            if (j && j.length > 0) {\n              this._lastClickedCell = {\n                row: j[0],\n                column: f\n              };\n            }\n          }\n\n          if (t && this._lastClickedCell) {\n            this.selectedrowindexes = new Array();\n            var e = this._lastClickedCell ? Math.min(this._lastClickedCell.row, k.visibleindex) : 0;\n            var v = this._lastClickedCell ? Math.max(this._lastClickedCell.row, k.visibleindex) : 0;\n            var o = this.dataview.loadedrecords;\n\n            for (var p = e; p <= v; p++) {\n              var k = o[p];\n\n              if (k) {\n                this._applyrowselection(this.getboundindex(k), true, false, false);\n              }\n            }\n\n            this._rendervisualrows();\n          }\n        }\n      } else {\n        this._clearselectstyle();\n\n        this._selectrowwithstyle(q, u, true, f);\n\n        if (this.selectionmode.indexOf(\"cell\") != -1) {\n          this._selectcellwithstyle(q, true, l, f, u);\n        }\n      }\n\n      if (!t) {\n        this._lastClickedCell = {\n          row: k.visibleindex,\n          column: f\n        };\n      }\n    },\n    _selectcellwithstyle: function (e, c, h, g, f) {\n      var b = a(f.cells[e._getcolumnindex(g)]);\n      b.removeClass(this.toTP(\"jqx-grid-cell-hover\"));\n      b.removeClass(this.toTP(\"jqx-fill-state-hover\"));\n\n      if (c) {\n        b.addClass(this.toTP(\"jqx-grid-cell-selected\"));\n        b.addClass(this.toTP(\"jqx-fill-state-pressed\"));\n      } else {\n        b.removeClass(this.toTP(\"jqx-grid-cell-selected\"));\n        b.removeClass(this.toTP(\"jqx-fill-state-pressed\"));\n      }\n\n      var d = this.getcolumn(g);\n\n      d._applyCellStyle(b);\n    },\n    _selectrowwithstyle: function (k, b, j, f) {\n      var h = b.cells.length;\n      var c = 0;\n\n      if (k.rowdetails && k.showrowdetailscolumn) {\n        if (!this.rtl) {\n          c = 1 + this.groups.length;\n        } else {\n          h -= 1;\n          h -= this.groups.length;\n        }\n      } else {\n        if (this.groupable) {\n          if (!this.rtl) {\n            c = this.groups.length;\n          } else {\n            h -= this.groups.length;\n          }\n        }\n      }\n\n      for (var g = c; g < h; g++) {\n        var e = b.cells[g];\n\n        if (j) {\n          a(e).removeClass(this.toTP(\"jqx-grid-cell-hover\"));\n          a(e).removeClass(this.toTP(\"jqx-fill-state-hover\"));\n\n          if (k.selectionmode.indexOf(\"cell\") == -1) {\n            a(e).addClass(this.toTP(\"jqx-grid-cell-selected\"));\n            a(e).addClass(this.toTP(\"jqx-fill-state-pressed\"));\n          }\n        } else {\n          a(e).removeClass(this.toTP(\"jqx-grid-cell-hover\"));\n          a(e).removeClass(this.toTP(\"jqx-grid-cell-selected\"));\n          a(e).removeClass(this.toTP(\"jqx-fill-state-hover\"));\n          a(e).removeClass(this.toTP(\"jqx-fill-state-pressed\"));\n        }\n\n        var f = e.getAttribute(\"columnindex\");\n\n        if (f) {\n          var d = this.columns.records[parseInt(f)];\n\n          if (d) {\n            d._applyCellStyle(e);\n          }\n        }\n      }\n    },\n    _handlemousemoveselection: function (ac, r) {\n      if (r.hScrollInstance.isScrolling() || r.vScrollInstance.isScrolling()) {\n        return false;\n      }\n\n      if ((r.selectionmode == \"multiplerowsextended\" || r.selectionmode == \"multiplecellsextended\" || r.selectionmode == \"multiplecellsadvanced\") && r.mousecaptured) {\n        if (r.multipleselectionbegins) {\n          var b = r.multipleselectionbegins(ac);\n\n          if (b === false) {\n            return true;\n          }\n        }\n\n        var ab = this.showheader ? this.columnsheader.height() + 2 : 0;\n        var J = this._groupsheader() ? this.groupsheader.height() : 0;\n        var L = this.showtoolbar ? this.toolbar.height() : 0;\n        J += L;\n        var aa = this.host.coord();\n\n        if (this.hasTransform) {\n          aa = a.jqx.utilities.getOffset(this.host);\n\n          var ae = this._getBodyOffset();\n\n          aa.left -= ae.left;\n          aa.top -= ae.top;\n        }\n\n        if (this.host.css(\"border-top-width\") === \"0px\") {\n          J -= 2;\n        }\n\n        var N = ac.pageX;\n        var M = ac.pageY - J;\n\n        if (Math.abs(this.mousecaptureposition.left - N) > 3 || Math.abs(this.mousecaptureposition.top - M) > 3) {\n          var g = parseInt(this.columnsheader.coord().top);\n\n          if (this.hasTransform) {\n            g = a.jqx.utilities.getOffset(this.columnsheader).top;\n          }\n\n          if (N < aa.left) {\n            N = aa.left;\n          }\n\n          if (N > aa.left + this.host.width()) {\n            N = aa.left + this.host.width();\n          }\n\n          var Y = aa.top + ab;\n\n          if (M < Y) {\n            M = Y + 5;\n          }\n\n          var K = parseInt(Math.min(r.mousecaptureposition.left, N));\n          var h = -5 + parseInt(Math.min(r.mousecaptureposition.top, M));\n          var I = parseFloat(Math.abs(r.mousecaptureposition.left - N));\n          var Q = parseInt(Math.abs(r.mousecaptureposition.top - M));\n          K -= aa.left;\n          h -= aa.top;\n          this.selectionarea.css(\"visibility\", \"visible\");\n\n          if (r.selectionmode == \"multiplecellsadvanced\") {\n            var N = K;\n            var u = N + I;\n            var H = N;\n            var o = r.hScrollInstance;\n            var w = o.value;\n\n            if (this.rtl) {\n              if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n                w = o.max - o.value;\n              }\n\n              if (this.vScrollBar[0].style.visibility != \"hidden\") {}\n            }\n\n            var j = r.table[0].rows[0];\n            var U = 0;\n            var C = r.mousecaptureposition.clickedcell;\n            var B = C;\n            var n = false;\n            var s = 0;\n            var ad = j.cells.length;\n\n            if (r.mousecaptureposition.left <= ac.pageX) {\n              s = C;\n            }\n\n            var c = false;\n\n            for (var X = s; X < ad; X++) {\n              var Z = parseFloat(a(this.columnsrow[0].cells[X]).css(\"left\"));\n              var l = Z - w;\n\n              if (r.columns.records[X].pinned && !r.columns.records[X].hidden) {\n                if (X == C) {\n                  c = true;\n                }\n\n                var T = Z + a(this.columnsrow[0].cells[X]).width();\n\n                if (r.mousecaptureposition.left > ac.pageX) {\n                  if (T >= N && N >= l) {\n                    B = X;\n                    n = true;\n                    break;\n                  }\n                } else {\n                  if (T >= u && u >= l) {\n                    B = X;\n                    n = true;\n                    break;\n                  }\n                }\n\n                continue;\n              }\n\n              if (c) {\n                n = true;\n                B--;\n                break;\n              }\n\n              var P = this._getcolumnat(X);\n\n              if (P != null && P.hidden) {\n                continue;\n              }\n\n              if (r.groupable && r.groups.length > 0) {\n                if (X < r.groups.length) {\n                  continue;\n                }\n              }\n\n              var T = l + a(this.columnsrow[0].cells[X]).width();\n\n              if (r.mousecaptureposition.left > ac.pageX) {\n                if (T >= N && N >= l) {\n                  B = X;\n                  n = true;\n                  break;\n                }\n              } else {\n                if (T >= u && u >= l) {\n                  B = X;\n                  n = true;\n                  break;\n                }\n              }\n            }\n\n            if (!n) {\n              if (r.mousecaptureposition.left > ac.pageX) {\n                a.each(this.columns.records, function (i, k) {\n                  if (r.groupable && r.groups.length > 0) {\n                    if (i < r.groups.length) {\n                      return true;\n                    }\n                  }\n\n                  if (!this.pinned && !this.hidden) {\n                    B = i;\n                    return false;\n                  }\n                });\n              } else {\n                if (!r.groupable || r.groupable && !r.groups.length > 0) {\n                  B = j.cells.length - 1;\n                }\n              }\n            }\n\n            var O = C;\n            C = Math.min(C, B);\n            B = Math.max(O, B);\n            h += 5;\n            h += J;\n            var S = r.table[0].rows.indexOf(r.mousecaptureposition.clickedrow);\n            var z = 0;\n            var f = -1;\n            var v = -1;\n            var e = 0;\n\n            for (var X = 0; X < r.table[0].rows.length; X++) {\n              var t = a(r.table[0].rows[X]);\n\n              if (X == 0) {\n                e = t.coord().top;\n              }\n\n              var G = t.height();\n              var A = e - aa.top;\n\n              if (f == -1 && A + G >= h) {\n                var d = false;\n\n                for (var R = 0; R < r.groups.length; R++) {\n                  var W = t[0].cells[R].className;\n\n                  if (W.indexOf(\"jqx-grid-group-collapse\") != -1 || W.indexOf(\"jqx-grid-group-expand\") != -1) {\n                    d = true;\n                    break;\n                  }\n                }\n\n                if (d) {\n                  continue;\n                }\n\n                f = X;\n              }\n\n              e += G;\n\n              if (r.groupable && r.groups.length > 0) {\n                var d = false;\n\n                for (var R = 0; R < r.groups.length; R++) {\n                  var W = t[0].cells[R].className;\n\n                  if (W.indexOf(\"jqx-grid-group-collapse\") != -1 || W.indexOf(\"jqx-grid-group-expand\") != -1) {\n                    d = true;\n                    break;\n                  }\n                }\n\n                if (d) {\n                  continue;\n                }\n\n                var U = 0;\n\n                for (var V = r.groups.length; V < t[0].cells.length; V++) {\n                  var F = t[0].cells[V];\n\n                  if (a(F).html() == \"\") {\n                    U++;\n                  }\n                }\n\n                if (U == t[0].cells.length - r.groups.length) {\n                  continue;\n                }\n              }\n\n              if (f != -1) {\n                z += G;\n              }\n\n              if (A + G > h + Q) {\n                v = X;\n                break;\n              }\n            }\n\n            if (f != -1) {\n              h = a(r.table[0].rows[f]).coord().top - aa.top - J - 2;\n              var E = 0;\n\n              if (this.filterable && this.showfilterrow) {\n                E = this.filterrowheight;\n              }\n\n              if (parseFloat(r.table[0].style.top) < 0 && h < this.rowsheight + E) {\n                h -= parseFloat(r.table[0].style.top);\n                z += parseFloat(r.table[0].style.top);\n              }\n\n              Q = z;\n              var m = a(this.columnsrow[0].cells[C]);\n              var D = a(this.columnsrow[0].cells[B]);\n              K = parseFloat(m.css(\"left\"));\n              I = parseFloat(D.css(\"left\")) - parseFloat(K) + D.width() - 2;\n              K -= w;\n\n              if (c) {\n                K += w;\n              }\n\n              if (r.editcell && r.editable && r.endcelledit && (C != B || f != v)) {\n                if (r.editcell.validated == false) {\n                  return;\n                }\n\n                r.endcelledit(r.editcell.row, r.editcell.column, true, true);\n              }\n            }\n          }\n\n          this.selectionarea.width(I);\n          this.selectionarea.height(Q);\n          this.selectionarea.css(\"left\", K);\n          this.selectionarea.css(\"top\", h);\n        }\n      }\n    },\n    _handlemouseupselection: function (u, o) {\n      if (!this.selectionarea) {\n        return;\n      }\n\n      if (this.selectionarea[0].style.visibility != \"visible\") {\n        o.mousecaptured = false;\n        return true;\n      }\n\n      if (o.mousecaptured && (o.selectionmode == \"multiplerowsextended\" || o.selectionmode == \"multiplerowsadvanced\" || o.selectionmode == \"multiplecellsextended\" || o.selectionmode == \"multiplecellsadvanced\")) {\n        o.mousecaptured = false;\n\n        if (this.selectionarea.css(\"visibility\") == \"visible\") {\n          this.selectionarea.css(\"visibility\", \"hidden\");\n          var w = this.showheader ? this.columnsheader.height() + 2 : 0;\n          var p = this._groupsheader() ? this.groupsheader.height() : 0;\n\n          if (this.host.css(\"border-top-width\") === \"0px\") {\n            p -= 2;\n          }\n\n          var B = this.showtoolbar ? this.toolbar.height() : 0;\n          p += B;\n          var C = this.selectionarea.coord();\n          var c = this.host.coord();\n\n          if (this.hasTransform) {\n            c = a.jqx.utilities.getOffset(this.host);\n            C = a.jqx.utilities.getOffset(this.selectionarea);\n          }\n\n          if (this.host.css(\"border-top-width\") === \"0px\") {\n            p -= 2;\n          }\n\n          var n = C.left - c.left;\n          var k = C.top - w - c.top - p;\n          var s = k;\n          var g = n + this.selectionarea.width();\n          var D = n;\n          var l = new Array();\n          var e = new Array();\n\n          if (o.selectionmode == \"multiplerowsextended\") {\n            while (k < s + this.selectionarea.height()) {\n              var b = this._hittestrow(n, k);\n\n              var f = b.row;\n              var h = b.index;\n\n              if (h != -1) {\n                if (!e[h]) {\n                  e[h] = true;\n                  l[l.length] = b;\n                }\n              }\n\n              k += 20;\n            }\n\n            var s = 0;\n            a.each(l, function () {\n              var i = this;\n              var m = this.row;\n\n              if (o.selectionmode != \"none\" && o._selectrowwithmouse) {\n                if (u.ctrlKey || u.metaKey) {\n                  o._applyrowselection(o.getboundindex(m), true, false, false);\n                } else {\n                  if (s == 0) {\n                    o._applyrowselection(o.getboundindex(m), true, false, true);\n                  } else {\n                    o._applyrowselection(o.getboundindex(m), true, false, false);\n                  }\n                }\n\n                s++;\n              }\n            });\n          } else {\n            if (o.selectionmode == \"multiplecellsadvanced\") {\n              k += 2;\n            }\n\n            var r = o.hScrollInstance;\n            var t = r.value;\n\n            if (this.rtl) {\n              if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n                t = r.max - r.value;\n              }\n\n              if (this.vScrollBar[0].style.visibility != \"hidden\") {\n                t -= this.scrollbarsize + 4;\n              }\n            }\n\n            var q = o.table[0].rows[0];\n            var j = o.selectionarea.height();\n\n            if (!u.ctrlKey && !u.metaKey && j > 0) {\n              o.selectedcells = new Array();\n            }\n\n            var A = j;\n\n            while (k < s + A) {\n              var b = o._hittestrow(n, k);\n\n              if (!b) {\n                k += 5;\n                continue;\n              }\n\n              var f = b.row;\n              var h = b.index;\n\n              if (h != -1) {\n                if (!e[h]) {\n                  e[h] = true;\n\n                  for (var v = 0; v < q.cells.length; v++) {\n                    var d = parseFloat(a(o.columnsrow[0].cells[v]).css(\"left\")) - t;\n                    var z = d + a(o.columnsrow[0].cells[v]).width();\n\n                    if (D >= d && D <= z || g >= d && g <= z || d >= D && d <= g) {\n                      o._applycellselection(o.getboundindex(f), o._getcolumnat(v).datafield, true, false);\n                    }\n                  }\n                }\n              }\n\n              k += 5;\n            }\n          }\n\n          if (o.autosavestate) {\n            if (o.savestate) {\n              o.savestate();\n            }\n          }\n\n          o._renderrows(o.virtualsizeinfo);\n        }\n      }\n    },\n    selectprevcell: function (e, c) {\n      var f = this._getcolumnindex(c);\n\n      var b = this.columns.records.length;\n\n      var d = this._getprevvisiblecolumn(f);\n\n      if (d != null) {\n        this.clearselection();\n        this.selectcell(e, d.datafield);\n      }\n    },\n    selectnextcell: function (e, d) {\n      var f = this._getcolumnindex(d);\n\n      var c = this.columns.records.length;\n\n      var b = this._getnextvisiblecolumn(f);\n\n      if (b != null) {\n        this.clearselection();\n        this.selectcell(e, b.datafield);\n      }\n    },\n    _getfirstvisiblecolumn: function () {\n      var b = this;\n      var e = this.columns.records.length;\n\n      for (var c = 0; c < e; c++) {\n        var d = this.columns.records[c];\n\n        if (!d.hidden && d.datafield != null) {\n          return d;\n        }\n      }\n\n      return null;\n    },\n    _getlastvisiblecolumn: function () {\n      var b = this;\n      var e = this.columns.records.length;\n\n      for (var c = e - 1; c >= 0; c--) {\n        var d = this.columns.records[c];\n\n        if (!d.hidden && d.datafield != null) {\n          return d;\n        }\n      }\n\n      return null;\n    },\n    _handlekeydown: function (A, t) {\n      if (t.groupable && t.groups.length > 0) {}\n\n      if (t.disabled) {\n        return false;\n      }\n\n      var H = A.charCode ? A.charCode : A.keyCode ? A.keyCode : 0;\n\n      if (t.editcell && t.selectionmode != \"multiplecellsadvanced\") {\n        return true;\n      } else {\n        if (t.editcell && t.selectionmode == \"multiplecellsadvanced\") {\n          if (H >= 33 && H <= 40) {\n            if (!A.altKey) {\n              if (t._cancelkeydown == undefined || t._cancelkeydown == false) {\n                if (t.editmode !== \"selectedrow\") {\n                  t.endcelledit(t.editcell.row, t.editcell.column, false, true);\n                  t._cancelkeydown = false;\n\n                  if (t.editcell && !t.editcell.validated) {\n                    t._rendervisualrows();\n\n                    t.endcelledit(t.editcell.row, t.editcell.column, false, true);\n                    return false;\n                  }\n                } else {\n                  return true;\n                }\n              } else {\n                t._cancelkeydown = false;\n                return true;\n              }\n            } else {\n              t._cancelkeydown = false;\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }\n      }\n\n      if (t.selectionmode == \"none\") {\n        return true;\n      }\n\n      if (t.showfilterrow && t.filterable) {\n        if (this.filterrow) {\n          if (a(A.target).ischildof(t.filterrow)) {\n            return true;\n          }\n        }\n      }\n\n      if (t.showeverpresentrow) {\n        if (t.addnewrowtop) {\n          if (a(A.target).ischildof(t.addnewrowtop)) {\n            return true;\n          }\n        }\n\n        if (t.addnewrowbottom) {\n          if (a(A.target).ischildof(t.addnewrowbottom)) {\n            return true;\n          }\n        }\n      }\n\n      if (A.target.className && A.target.className.indexOf(\"jqx-grid-widget\") >= 0) {\n        return true;\n      }\n\n      if (t.pageable) {\n        if (a(A.target).ischildof(this.pager)) {\n          return true;\n        }\n      }\n\n      if (this.showtoolbar) {\n        if (a(A.target).ischildof(this.toolbar)) {\n          return true;\n        }\n      }\n\n      if (this.showstatusbar) {\n        if (a(A.target).ischildof(this.statusbar)) {\n          return true;\n        }\n      }\n\n      var r = false;\n\n      if (A.altKey) {\n        return true;\n      }\n\n      if (A.ctrlKey || A.metaKey) {\n        if (this.clipboard) {\n          var b = String.fromCharCode(H).toLowerCase();\n\n          if (this.clipboardbegin) {\n            var j = null;\n\n            if (b == \"c\") {\n              j = this.clipboardbegin(\"copy\", this.copyselection());\n            } else {\n              if (b == \"x\") {\n                j = this.clipboardbegin(\"cut\", this.copyselection());\n              } else {\n                if (b == \"v\") {\n                  j = this.clipboardbegin(\"paste\");\n                }\n              }\n            }\n\n            if (j === false) {\n              return false;\n            }\n          }\n\n          if (b == \"c\" || b == \"x\") {\n            var q = this.copyselection();\n\n            if (b == \"c\" && this.clipboardend) {\n              this.clipboardend(\"copy\");\n            }\n\n            if (b == \"x\" && this.clipboardend) {\n              this.clipboardend(\"cut\");\n            }\n\n            if (window.clipboardData) {\n              window.clipboardData.setData(\"Text\", q);\n            } else {\n              var g = a('<textarea style=\"position: absolute; left: -1000px; top: -1000px;\"/>');\n              g.val(q);\n              a(\"body\").append(g);\n              g.select();\n              setTimeout(function () {\n                document.designMode = \"off\";\n                g.select();\n                g.remove();\n                t.focus();\n              }, 100);\n            }\n\n            if (b == \"c\" && a.jqx.browser.msie) {\n              return false;\n            } else {\n              if (b == \"c\") {\n                return true;\n              }\n            }\n          } else {\n            if (b == \"v\") {\n              var F = a('<textarea style=\"position: absolute; left: -1000px; top: -1000px;\"/>');\n              a(\"body\").append(F);\n              F.select();\n              var k = this;\n              setTimeout(function () {\n                k._clipboardselection = new Array();\n                var M = F.val();\n\n                if (M.length == 0 && window.clipboardData) {\n                  F.val(window.clipboardData.getData(\"Text\"));\n                  var M = F.val();\n                }\n\n                var L = M.split(\"\\n\");\n\n                for (var K = 0; K < L.length; K++) {\n                  if (L[K].split(\"\\t\").length > 0) {\n                    var J = L[K].split(\"\\t\");\n\n                    if (J.length == 1 && K == L.length - 1 && J[0] == \"\") {\n                      continue;\n                    }\n\n                    if (J.length > 0) {\n                      k._clipboardselection.push(J);\n                    }\n                  }\n                }\n\n                k.pasteselection();\n                F.remove();\n                k.focus();\n              }, 100);\n              return true;\n            }\n          }\n\n          if (b == \"x\") {\n            this.deleteselection();\n            this.host.focus();\n            return false;\n          }\n        }\n      }\n\n      var n = Math.round(t._gettableheight());\n      var y = Math.round(n / t.rowsheight);\n      var f = t.getdatainformation();\n\n      switch (t.selectionmode) {\n        case \"singlecell\":\n        case \"multiplecells\":\n        case \"multiplecellsextended\":\n        case \"multiplecellsadvanced\":\n          var I = t.getselectedcell();\n\n          if (I === null) {\n            t.selectcell(0, t.columns.records[0].displayfield);\n          }\n\n          if (I != null) {\n            var e = this.getrowvisibleindex(I.rowindex);\n            var i = e;\n            var p = I.datafield;\n\n            var w = t._getcolumnindex(p);\n\n            var c = t.columns.records.length;\n\n            var v = function (Q, K, P, O) {\n              var J = function (ab, U) {\n                var W = t.dataview.loadedrecords[ab];\n\n                if (t.groupable && t.groups.length > 0) {\n                  var X = ab;\n\n                  if (O == \"up\") {\n                    X++;\n                  }\n\n                  if (O == \"down\") {\n                    X--;\n                  }\n\n                  var W = t.getdisplayrows()[X];\n\n                  var R = function (ac) {\n                    if (ac.group) {\n                      if (t.expandedgroups[ac.uniqueid]) {\n                        return t.expandedgroups[ac.uniqueid].expanded;\n                      }\n                    } else {\n                      return false;\n                    }\n                  };\n\n                  var Z = 1;\n                  var S = true;\n\n                  while (S && Z < 300) {\n                    S = false;\n\n                    if (O == \"down\") {\n                      W = t.getdisplayrows()[X + Z];\n                    } else {\n                      if (O == \"up\") {\n                        W = t.getdisplayrows()[X - Z];\n                      }\n                    }\n\n                    if (!W) {\n                      break;\n                    }\n\n                    if (W && W.group) {\n                      S = true;\n                    }\n\n                    var aa = W.parentItem;\n\n                    while (aa) {\n                      if (aa && !R(aa)) {\n                        S = true;\n                      }\n\n                      aa = aa.parentItem;\n                    }\n\n                    if (!S) {\n                      break;\n                    }\n\n                    Z++;\n                  }\n\n                  if (Z == 300) {\n                    W = null;\n                  }\n\n                  if (t.pageable) {\n                    var Y = false;\n\n                    if (W) {\n                      for (var V = 0; V < t.dataview.rows.length; V++) {\n                        if (t.dataview.rows[V].boundindex == W.boundindex) {\n                          Y = true;\n                        }\n                      }\n\n                      if (!Y) {\n                        W = null;\n                      }\n                    }\n                  }\n                } else {\n                  if (t.pageable) {\n                    var Y = false;\n\n                    if (W) {\n                      for (var V = 0; V < t.dataview.rows.length; V++) {\n                        if (t.dataview.rows[V].boundindex == W.boundindex) {\n                          Y = true;\n                        }\n                      }\n\n                      if (!Y) {\n                        if (t.pagerpageinput && A.keyCode === 9) {\n                          if (W.boundindex > t.dataview.rows[t.dataview.rows.length - 1].boundindex) {\n                            t.pagerpageinput.focus();\n                            A.preventDefault();\n                          }\n                        }\n\n                        t.ensurerowvisible(W);\n                      }\n                    }\n                  }\n                }\n\n                if (W != undefined && U != null) {\n                  if (P || P == undefined) {\n                    t.clearselection();\n                  }\n\n                  var T = t.getboundindex(W);\n                  t.selectcell(T, U);\n                  t._oldselectedcell = t.selectedcell;\n                  r = true;\n\n                  if (t.groupable) {\n                    t.ensurecellvisible(T, U);\n                  } else {\n                    t.ensurecellvisible(ab, U);\n                  }\n\n                  return true;\n                }\n\n                return false;\n              };\n\n              if (!J(Q, K) && !t.groupable) {\n                t.ensurecellvisible(Q, K);\n                J(Q, K);\n\n                if (t.virtualmode) {\n                  t.host.focus();\n                }\n              }\n\n              var M = t.groupable && t.groups.length > 0;\n\n              if (!M) {\n                if (A.shiftKey && A.keyCode != 9) {\n                  if (t.selectionmode == \"multiplecellsextended\" || t.selectionmode == \"multiplecellsadvanced\") {\n                    if (t._lastClickedCell) {\n                      t._selectpath(Q, K);\n\n                      var N = t.dataview.loadedrecords[Q];\n                      var L = t.getboundindex(N);\n                      t.selectedcell = {\n                        rowindex: L,\n                        datafield: K\n                      };\n                      return;\n                    }\n                  }\n                } else {\n                  if (!A.shiftKey) {\n                    t._lastClickedCell = {\n                      row: Q,\n                      column: K\n                    };\n                  }\n                }\n              }\n            };\n\n            var B = A.shiftKey && t.selectionmode != \"singlecell\" && t.selectionmode != \"multiplecells\";\n\n            var C = function () {\n              if (t.pageable) {\n                var J = t.dataview.pagenum * t.dataview.pagesize;\n                v(J, p, !B);\n              } else {\n                v(0, p, !B);\n              }\n            };\n\n            var h = function () {\n              var K = f.rowscount - 1;\n\n              if (t.pageable) {\n                var J = t.dataview.pagenum * t.dataview.pagesize;\n                K = J + t.dataview.rows.length - 1;\n              }\n\n              v(K, p, !B);\n            };\n\n            var d = H == 9 && !A.shiftKey;\n            var m = H == 9 && A.shiftKey;\n\n            if (t.rtl) {\n              var s = d;\n              d = m;\n              m = s;\n            }\n\n            if (d || m) {\n              B = false;\n            }\n\n            if (d || m) {\n              if (document.activeElement && document.activeElement.className && document.activeElement.className.indexOf(\"jqx-grid-cell-add-new-row\") >= 0) {\n                return true;\n              }\n            }\n\n            var o = A.ctrlKey || A.metaKey;\n\n            if (o && H == 37) {\n              var E = t._getfirstvisiblecolumn(w);\n\n              if (E != null) {\n                v(i, E.datafield);\n              }\n            } else {\n              if (o && H == 39) {\n                var u = t._getlastvisiblecolumn(w);\n\n                if (u != null) {\n                  v(i, u.datafield);\n                }\n              } else {\n                if (H == 39 || d) {\n                  var x = t._getnextvisiblecolumn(w);\n\n                  if (x != null) {\n                    v(i, x.datafield, !B);\n                  } else {\n                    if (!d) {\n                      r = true;\n                    } else {\n                      var G = t._getfirstvisiblecolumn();\n\n                      H = 40;\n                      p = G.displayfield;\n                    }\n                  }\n                } else {\n                  if (H == 37 || m) {\n                    var E = t._getprevvisiblecolumn(w);\n\n                    if (E != null) {\n                      v(i, E.datafield, !B);\n                    } else {\n                      if (!m) {\n                        r = true;\n                      } else {\n                        var l = t._getlastvisiblecolumn();\n\n                        H = 38;\n                        p = l.displayfield;\n                      }\n                    }\n                  } else {\n                    if (H == 36) {\n                      C();\n                    } else {\n                      if (H == 35) {\n                        h();\n                      } else {\n                        if (H == 33) {\n                          if (i - y >= 0) {\n                            var D = i - y;\n                            v(D, p, !B);\n\n                            if (t.pageable && t.virtualmode) {\n                              t.gotoprevpage();\n                              setTimeout(function () {\n                                v(D, p, !B);\n                              }, 25);\n                            }\n                          } else {\n                            C();\n                          }\n                        } else {\n                          if (H == 34) {\n                            if (f.rowscount > i + y) {\n                              var D = i + y;\n                              v(D, p, !B);\n\n                              if (t.pageable && t.virtualmode) {\n                                t.gotonextpage();\n                                setTimeout(function () {\n                                  v(D, p, !B);\n                                }, 25);\n                              }\n                            } else {\n                              h();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            if (H == 38) {\n              if (o) {\n                C();\n              } else {\n                if (i > 0) {\n                  v(i - 1, p, !B, \"up\");\n                } else {\n                  r = false;\n                }\n              }\n            }\n\n            if (H == 40) {\n              if (o) {\n                h();\n              } else {\n                if (f.rowscount > i + 1 || t.groupable && t.groups.length > 0) {\n                  v(i + 1, p, !B, \"down\");\n                } else {\n                  r = true;\n                }\n              }\n            }\n          }\n\n          break;\n\n        case \"singlerow\":\n        case \"multiplerows\":\n        case \"multiplerowsextended\":\n        case \"multiplerowsadvanced\":\n          var i = t.getselectedrowindex();\n\n          if (i == null || i == -1) {\n            return true;\n          }\n\n          i = this.getrowvisibleindex(i);\n\n          var z = function (K, N, M) {\n            var J = function (V) {\n              var U = t.dataview.loadedrecords[V];\n\n              if (t.groupable && t.groups.length > 0) {\n                if (M == \"up\") {\n                  V++;\n                }\n\n                if (M == \"down\") {\n                  V--;\n                }\n\n                var U = t.getdisplayrows()[V];\n\n                var O = function (Z) {\n                  if (Z.group) {\n                    if (t.expandedgroups[Z.uniqueid]) {\n                      return t.expandedgroups[Z.uniqueid].expanded;\n                    }\n                  } else {\n                    return false;\n                  }\n                };\n\n                var X = 1;\n                var P = true;\n\n                while (P && X < 300) {\n                  P = false;\n\n                  if (M == \"down\") {\n                    U = t.getdisplayrows()[V + X];\n                  } else {\n                    if (M == \"up\") {\n                      U = t.getdisplayrows()[V - X];\n                    }\n                  }\n\n                  if (!U) {\n                    break;\n                  }\n\n                  if (U && U.group) {\n                    P = true;\n                  }\n\n                  var Y = U.parentItem;\n\n                  while (Y) {\n                    if (Y && !O(Y)) {\n                      P = true;\n                    }\n\n                    Y = Y.parentItem;\n                  }\n\n                  if (!P) {\n                    break;\n                  }\n\n                  X++;\n                }\n\n                if (X == 300) {\n                  U = null;\n                }\n\n                if (t.pageable) {\n                  var W = false;\n\n                  if (U) {\n                    for (var T = 0; T < t.dataview.rows.length; T++) {\n                      if (t.dataview.rows[T].boundindex == U.boundindex) {\n                        W = true;\n                      }\n                    }\n\n                    if (!W) {\n                      U = null;\n                    }\n                  }\n                }\n              }\n\n              if (U != undefined) {\n                var Q = t.getboundindex(U);\n                var S = t.selectedrowindex;\n\n                if (N || N == undefined) {\n                  t.clearselection();\n                }\n\n                t.selectedrowindex = S;\n                t.selectrow(Q, false);\n\n                if (t.groupable) {\n                  var R = t.ensurerowvisible(Q);\n                } else {\n                  var R = t.ensurerowvisible(V);\n                }\n\n                if (!R || t.autoheight || t.groupable) {\n                  t._rendervisualrows();\n                }\n\n                r = true;\n                return true;\n              }\n\n              return false;\n            };\n\n            if (!J(K) && !t.groupable) {\n              t.ensurerowvisible(K);\n              J(K, N);\n\n              if (t.virtualmode) {\n                setTimeout(function () {\n                  J(K, N);\n                }, 25);\n              }\n\n              if (t.virtualmode) {\n                t.host.focus();\n              }\n            }\n\n            var L = t.groupable && t.groups.length > 0;\n\n            if (!L) {\n              if (A.shiftKey && H != 9) {\n                if (t.selectionmode == \"multiplerowsextended\") {\n                  if (t._lastClickedCell) {\n                    t._selectrowpath(K);\n\n                    t.selectedrowindex = t.getrowboundindex(K);\n                    return;\n                  }\n                }\n              } else {\n                if (!A.shiftKey) {\n                  t._lastClickedCell = {\n                    row: K\n                  };\n                  t.selectedrowindex = t.getrowboundindex(K);\n                }\n              }\n            }\n          };\n\n          var B = A.shiftKey && t.selectionmode != \"singlerow\" && t.selectionmode != \"multiplerows\";\n\n          var C = function () {\n            if (t.pageable) {\n              var J = t.dataview.pagenum * t.dataview.pagesize;\n              z(J, !B);\n            } else {\n              z(0, !B);\n            }\n          };\n\n          var h = function () {\n            var K = f.rowscount - 1;\n\n            if (t.pageable) {\n              var J = t.dataview.pagenum * t.dataview.pagesize;\n              K = J + t.dataview.rows.length - 1;\n            }\n\n            z(K, !B);\n          };\n\n          var o = A.ctrlKey || A.metaKey;\n\n          if (H == 36 || o && H == 38) {\n            C();\n          } else {\n            if (H == 35 || o && H == 40) {\n              h();\n            } else {\n              if (H == 33) {\n                if (i - y >= 0) {\n                  var D = i - y;\n                  z(D, !B, \"up\");\n\n                  if (t.pageable && t.virtualmode) {\n                    t.gotoprevpage();\n                    setTimeout(function () {\n                      z(D, !B);\n                    }, 25);\n                  }\n                } else {\n                  C();\n                }\n              } else {\n                if (H == 34) {\n                  if (f.rowscount > i + y) {\n                    var D = i + y;\n                    z(D, !B, \"down\");\n\n                    if (t.pageable && t.virtualmode) {\n                      t.gotonextpage();\n                      setTimeout(function () {\n                        z(D, !B);\n                      }, 25);\n                    }\n                  } else {\n                    h();\n                  }\n                } else {\n                  if (H == 38) {\n                    if (i > 0) {\n                      z(i - 1, !B, \"up\");\n                    } else {\n                      r = true;\n                    }\n                  } else {\n                    if (H == 40) {\n                      if (f.rowscount > i + 1 || t.groupable && t.groups.length > 0) {\n                        z(i + 1, !B, \"down\");\n                      } else {\n                        r = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          break;\n      }\n\n      if (r) {\n        if (t.autosavestate) {\n          if (t.savestate) {\n            t.savestate();\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n    _handlemousemove: function (u, p) {\n      if (p.vScrollInstance.isScrolling()) {\n        return;\n      }\n\n      if (p.hScrollInstance.isScrolling()) {\n        return;\n      }\n\n      var w;\n      var q;\n      var f;\n      var n;\n      var m;\n\n      if (p.enablehover || p.selectionmode == \"multiplerows\") {\n        w = this.showheader ? this.columnsheader.height() + 2 : 0;\n        q = this._groupsheader() ? this.groupsheader.height() : 0;\n        var A = this.showtoolbar ? this.toolbarheight : 0;\n        q += A;\n        f = this.host.coord();\n\n        if (this.hasTransform) {\n          f = a.jqx.utilities.getOffset(this.host);\n\n          var k = this._getBodyOffset();\n\n          f.left -= k.left;\n          f.top -= k.top;\n        }\n\n        n = u.pageX - f.left;\n        m = u.pageY - w - f.top - q;\n      }\n\n      if (p.selectionmode == \"multiplerowsextended\" || p.selectionmode == \"multiplecellsextended\" || p.selectionmode == \"multiplecellsadvanced\") {\n        if (p.mousecaptured == true) {\n          return;\n        }\n      }\n\n      if (p.enablehover) {\n        if (p.disabled) {\n          return;\n        }\n\n        if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {\n          return;\n        }\n\n        var c = this._hittestrow(n, m);\n\n        if (!c) {\n          return;\n        }\n\n        var h = c.row;\n        var j = c.index;\n\n        if (this.hoveredrow != -1 && j != -1 && this.hoveredrow == j && this.selectionmode.indexOf(\"cell\") == -1 && this.selectionmode != \"checkbox\") {\n          return;\n        }\n\n        this._clearhoverstyle();\n\n        if (j == -1 || h == undefined) {\n          return;\n        }\n\n        var r = this.hittestinfo[j].visualrow;\n\n        if (r == null) {\n          return;\n        }\n\n        if (this.hittestinfo[j].details) {\n          return;\n        }\n\n        if (u.clientX > a(r).width() + a(r).coord().left) {\n          return;\n        }\n\n        var B = 0;\n        var o = r.cells.length;\n\n        if (p.rowdetails && p.showrowdetailscolumn) {\n          if (!this.rtl) {\n            B = 1 + this.groups.length;\n          } else {\n            o -= 1;\n            o -= this.groups.length;\n          }\n        } else {\n          if (this.groupable) {\n            if (!this.rtl) {\n              B = this.groups.length;\n            } else {\n              o -= this.groups.length;\n            }\n          }\n        }\n\n        if (r.cells.length == 0) {\n          return;\n        }\n\n        var l = r.cells[B].className;\n\n        if (h.group || this.selectionmode.indexOf(\"row\") >= 0 && l.indexOf(\"jqx-grid-cell-selected\") != -1) {\n          return;\n        }\n\n        this.hoveredrow = j;\n\n        if (this.selectionmode.indexOf(\"cell\") != -1 || this.selectionmode == \"checkbox\") {\n          var e = -1;\n          var s = this.hScrollInstance;\n          var t = s.value;\n\n          if (this.rtl) {\n            if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n              t = s.max - s.value;\n            }\n          }\n\n          for (var v = B; v < o; v++) {\n            var g = parseInt(a(this.columnsrow[0].cells[v]).css(\"left\")) - t;\n\n            if (this.columns.records[v].pinned && !this.rtl) {\n              g = parseInt(a(this.columnsrow[0].cells[v]).css(\"left\"));\n            }\n\n            var z = g + a(this.columnsrow[0].cells[v]).width();\n\n            if (z >= n && n >= g) {\n              e = v;\n              break;\n            }\n          }\n\n          if (e != -1) {\n            var b = r.cells[e];\n\n            if (this.cellhover) {\n              this.cellhover(b, u.pageX, u.pageY);\n            }\n\n            if (b.className.indexOf(\"jqx-grid-cell-selected\") == -1) {\n              if (this.editcell) {\n                var d = this._getcolumnat(e);\n\n                if (d) {\n                  if (this.editcell.row == j && this.editcell.column == d.datafield) {\n                    return;\n                  }\n                }\n              }\n            }\n\n            a(b).addClass(this.toTP(\"jqx-grid-cell-hover\"));\n            a(b).addClass(this.toTP(\"jqx-fill-state-hover\"));\n\n            var d = this._getcolumnat(e);\n\n            d._applyCellStyle(b);\n          }\n\n          return;\n        }\n\n        for (var v = B; v < o; v++) {\n          var b = r.cells[v];\n          a(b).addClass(this.toTP(\"jqx-grid-cell-hover\"));\n          a(b).addClass(this.toTP(\"jqx-fill-state-hover\"));\n\n          if (this.cellhover) {\n            this.cellhover(b, u.pageX, u.pageY);\n          }\n\n          var d = this._getcolumnat(v);\n\n          d._applyCellStyle(b);\n        }\n      } else {\n        return true;\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}