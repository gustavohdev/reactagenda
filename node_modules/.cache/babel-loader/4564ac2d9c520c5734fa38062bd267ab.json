{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    savestate: function (b) {\n      var c = this.getstate();\n\n      if (b !== undefined && !a.isEmptyObject(b)) {\n        if (b.indexOf(\"sort\") == -1) {\n          delete c.sortcolumn;\n          delete c.sortdirection;\n        }\n\n        if (b.indexOf(\"pager\") == -1) {\n          delete c.pagenum;\n          delete c.pagesizeoptions;\n          delete c.pagesize;\n        }\n\n        if (b.indexOf(\"selection\") == -1) {\n          delete c.selectedcells;\n          delete c.selectedrowindexes;\n          delete c.selectedrowindex;\n        }\n\n        if (b.indexOf(\"grouping\") == -1) {\n          delete c.groups;\n        }\n\n        if (b.indexOf(\"filter\") == -1) {\n          delete c.filters;\n        }\n\n        a.each(this.columns.records, function (e) {\n          var d = c.columns[this.datafield];\n\n          if (b.indexOf(\"hidden_columns\") == -1) {\n            delete d.hidden;\n          }\n\n          if (b.indexOf(\"reorder\") == -1) {\n            delete d.index;\n          }\n\n          if (b.indexOf(\"columns_width\") == -1) {\n            delete d.width;\n          }\n\n          if (b.indexOf(\"columns_text\") == -1) {\n            delete d.text;\n          }\n\n          if (b.indexOf(\"alignment\") == -1) {\n            delete d.align;\n            delete d.cellsalign;\n          }\n        });\n      }\n\n      if (window.localStorage) {\n        window.localStorage[\"jqxGrid\" + this.element.id] = this._stringify(c);\n      }\n\n      this._savedstate = c;\n      return c;\n    },\n    loadstate: function (d, j) {\n      var g = \"\";\n\n      if (d != undefined && d.width != undefined) {\n        g = d;\n      } else {\n        if (window.localStorage) {\n          var c = window.localStorage[\"jqxGrid\" + this.element.id];\n\n          if (c) {\n            var g = a.parseJSON(window.localStorage[\"jqxGrid\" + this.element.id]);\n          }\n        } else {\n          if (this._savedstate) {\n            var g = this._savedstate;\n          }\n        }\n      }\n\n      if (g != null && g !== \"\") {\n        if (this.virtualmode || this.source._source.url && this.source._source.url != \"\") {\n          this.source.beginUpdate();\n        }\n\n        var f = g;\n\n        if (f.width !== undefined) {\n          this.width = f.width;\n        }\n\n        if (f.height !== undefined) {\n          this.height = f.height;\n        }\n\n        if (this.pageable) {\n          if (f.pagesize != undefined) {\n            this.pagesize = f.pagesize;\n            this.dataview.pagesize = f.pagesize;\n          }\n\n          if (f.pagenum != undefined) {\n            this.dataview.pagenum = f.pagenum;\n          }\n\n          if (f.pagesizeoptions != undefined) {\n            this.pagesizeoptions = f.pagesizeoptions;\n          }\n\n          if (this.pagesizeoptions) {\n            var e = 0;\n\n            for (var b = 0; b < this.pagesizeoptions.length; b++) {\n              if (this.pagesize >= this.pagesizeoptions[b]) {\n                e = b;\n              }\n            }\n\n            if (this.pagershowrowscombo) {\n              this.pagershowrowscombo.jqxDropDownList({\n                selectedIndex: e\n              });\n            }\n          }\n        }\n\n        if (this.sortable) {\n          if (this._loading) {\n            this._loading = false;\n          }\n\n          if (f.sortdirection) {\n            if (f.sortdirection.ascending || f.sortdirection.descending) {\n              this.dataview.sortfield = f.sortcolumn;\n              var h = f.sortdirection.ascending ? \"asc\" : \"desc\";\n              this.dataview.sortfielddirection = h;\n              this.source.sortcolumn = f.sortcolumn;\n              this.source.sortdirection = h;\n              this.sortby(f.sortcolumn, h);\n            }\n          } else {\n            if (this.dataview.sortfield != null && (this.dataview.sortfielddirection == \"asc\" || this.dataview.sortfielddirection == \"desc\")) {\n              this.sortby(this.dataview.sortfield, null);\n            }\n          }\n        }\n\n        if (this.groupable && f.groups) {\n          this.dataview.groups = f.groups;\n          this.groups = f.groups;\n        }\n\n        this.loadingstate = true;\n\n        if (this.virtualsizeinfo) {\n          this._loadselectionandcolumnwidths(f);\n        }\n\n        this.loadingstate = false;\n\n        if (this.virtualmode || this.source._source.url && this.source._source.url != \"\") {\n          if (j == true) {\n            this.source.endUpdate(false);\n          } else {\n            this.source.endUpdate(false);\n\n            if (this.virtualmode || this.source._source.filter || this.source._source.sort) {\n              this.updatebounddata(\"state\");\n            }\n          }\n        }\n      }\n    },\n    _loadselectionandcolumnwidths: function (j) {\n      this.loadingstate = true;\n      var m = \"\";\n\n      if (j != undefined && j.width != undefined) {\n        m = j;\n      } else {\n        if (window.localStorage) {\n          if (window.localStorage[\"jqxGrid\" + this.element.id]) {\n            var m = a.parseJSON(window.localStorage[\"jqxGrid\" + this.element.id]);\n          }\n        } else {\n          if (this._savedstate) {\n            var m = this._savedstate;\n          }\n        }\n      }\n\n      if (m != null && m != \"\") {\n        var E = this._loading;\n        this._loading = false;\n        var G = m;\n        var F = this;\n        var g = false;\n        var d = [];\n        d.length = 0;\n        var D = [];\n        a.each(this.columns.records, function (I) {\n          var i = G.columns[this.datafield];\n\n          if (i != undefined) {\n            if (this.text != i.text) {\n              g = true;\n            }\n\n            if (this.hidden != i.hidden) {\n              g = true;\n            }\n\n            if (i.width !== undefined) {\n              this.width = i.width;\n\n              if (this._width) {\n                this._width = null;\n              }\n\n              if (this._percentagewidth) {\n                this._percentagewidth = null;\n              }\n            }\n\n            if (i.hidden !== undefined) {\n              this.hidden = i.hidden;\n            }\n\n            if (i.pinned !== undefined) {\n              this.pinned = i.pinned;\n            }\n\n            if (i.groupable !== undefined) {\n              this.groupable = i.groupable;\n            }\n\n            if (i.resizable !== undefined) {\n              this.resizable = i.resizable;\n            }\n\n            this.draggable = i.draggable;\n\n            if (i.text !== undefined) {\n              this.text = i.text;\n            }\n\n            if (i.align !== undefined) {\n              this.align = i.align;\n            }\n\n            if (i.cellsalign !== undefined) {\n              this.cellsalign = i.cellsalign;\n            }\n\n            if (F._columns) {\n              for (var H = 0; H < F._columns.length; H++) {\n                if (F._columns[H].datafield == this.datafield) {\n                  if (i.hidden !== undefined) {\n                    F._columns[H][\"hidden\"] = i.hidden;\n                  }\n\n                  if (i.width !== undefined) {\n                    F._columns[H][\"width\"] = i.width;\n                  }\n                }\n              }\n            }\n\n            if (i.index !== undefined) {\n              d[this.datafield] = i.index;\n              d.length++;\n            }\n          }\n        });\n\n        if (d.length > 0) {\n          if (this.setcolumnindex) {\n            var x = this.rowdetails ? 1 : 0;\n            x += this.groupable ? this.groups.length : 0;\n            var v = new Array();\n\n            for (var C = 0; C < this.columns.records.length; C++) {\n              v.push(this.columns.records[C]);\n            }\n\n            var B = 0;\n            var f = new Array();\n\n            for (var C = 0; C < v.length; C++) {\n              var k = v[C];\n              var n = d[k.datafield];\n\n              if (this.groupable && k.grouped) {\n                B++;\n                continue;\n              }\n\n              if (C == 0 && this.rowdetails) {\n                B++;\n                continue;\n              }\n\n              if (C !== n || this.groupable || this.rowdetails) {\n                var q = B + n;\n                f.push({\n                  column: k,\n                  key: q\n                });\n              }\n            }\n\n            f.sort(function (H, i) {\n              if (H.key < i.key) {\n                return -1;\n              }\n\n              if (H.key > i.key) {\n                return 1;\n              }\n\n              return 0;\n            });\n            f.reverse();\n            a.each(f, function (i, I) {\n              var H = this.key;\n              F.setcolumnindex(this.column.datafield, H, false);\n            });\n          }\n\n          this.prerenderrequired = true;\n\n          if (this.groupable) {\n            this._refreshdataview();\n          }\n\n          this.rendergridcontent(true);\n\n          if (this._updatefilterrowui && this.filterable && this.showfilterrow) {\n            this._updatefilterrowui();\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n\n        if (this.filterable && G.filters !== undefined) {\n          if (this.clearfilters) {\n            this._loading = false;\n            this.clearfilters(false);\n          }\n\n          var c = \"\";\n          var p = new a.jqx.filter();\n\n          for (var C = 0; C < G.filters.filterscount; C++) {\n            var A = G.filters[\"filtercondition\" + C];\n            var u = G.filters[\"filterdatafield\" + C];\n            var k = this.getcolumn(u);\n\n            if (u != c) {\n              p = new a.jqx.filter();\n            }\n\n            c = u;\n\n            if (k && k.filterable) {\n              var y = G.filters[\"filtervalue\" + C];\n              var r = G.filters[\"filteroperator\" + C];\n              var b = G.filters[\"filtertype\" + C];\n\n              if (b == \"datefilter\") {\n                var s = p.createfilter(b, y, A, null, k.cellsformat, this.gridlocalization);\n              } else {\n                var s = p.createfilter(b, y, A);\n              }\n\n              p.addfilter(r, s);\n\n              if (this.showfilterrow) {\n                var l = k._filterwidget;\n\n                var e = k._filterwidget.parent();\n\n                if (l != null) {\n                  switch (k.filtertype) {\n                    case \"number\":\n                      e.find(\"input\").val(y);\n\n                      if (this.host.jqxDropDownList) {\n                        var o = p.getoperatorsbyfiltertype(\"numericfilter\");\n                        l.find(\".filter\").jqxDropDownList(\"selectIndex\", o.indexOf(A));\n                      }\n\n                      break;\n\n                    case \"date\":\n                      if (this.host.jqxDateTimeInput) {\n                        a(e.children()[0]).jqxDateTimeInput(\"setDate\", y);\n                      } else {\n                        l.val(y);\n                      }\n\n                      break;\n\n                    case \"range\":\n                      if (this.host.jqxDateTimeInput) {\n                        var t = G.filters[\"filtervalue\" + (C + 1)];\n                        var b = G.filters[\"filtertype\" + C];\n                        var s = p.createfilter(b, t, \"LESS_THAN_OR_EQUAL\");\n                        p.addfilter(r, s);\n                        var z = new Date(y);\n                        var h = new Date(t);\n\n                        if (isNaN(z)) {\n                          z = a.jqx.dataFormat.tryparsedate(y);\n                        }\n\n                        if (isNaN(h)) {\n                          h = a.jqx.dataFormat.tryparsedate(y);\n                        }\n\n                        a(e.children()[0]).jqxDateTimeInput(\"setRange\", z, h);\n                        C++;\n                      } else {\n                        l.val(y);\n                      }\n\n                      break;\n\n                    case \"textbox\":\n                    case \"default\":\n                      l.val(y);\n                      F[\"_oldWriteText\" + l[0].id] = y;\n                      break;\n\n                    case \"list\":\n                      if (this.host.jqxDropDownList) {\n                        var w = a(e.children()[0]).jqxDropDownList(\"getItems\");\n                        var n = -1;\n                        a.each(w, function (H) {\n                          if (this.value == y) {\n                            n = H;\n                            return false;\n                          }\n                        });\n                        a(e.children()[0]).jqxDropDownList(\"selectIndex\", n);\n                      } else {\n                        l.val(y);\n                      }\n\n                      break;\n\n                    case \"checkedlist\":\n                      if (!this.host.jqxDropDownList) {\n                        l.val(y);\n                      }\n\n                      break;\n\n                    case \"bool\":\n                    case \"boolean\":\n                      if (!this.host.jqxCheckBox) {\n                        l.val(y);\n                      } else {\n                        a(e.children()[0]).jqxCheckBox({\n                          checked: y\n                        });\n                      }\n\n                      break;\n                  }\n                }\n              }\n\n              this.addfilter(u, p);\n            }\n          }\n\n          if (G.filters && G.filters.filterscount > 0) {\n            this.applyfilters();\n\n            if (this.showfilterrow) {\n              a.each(this.columns.records, function () {\n                if (this.filtertype == \"checkedlist\" && this.filterable) {\n                  if (F.host.jqxDropDownList) {\n                    var L = this;\n                    var J = L._filterwidget;\n                    var O = J.jqxDropDownList(\"getItems\");\n                    var H = J.jqxDropDownList(\"listBox\");\n                    H.checkAll(false);\n\n                    if (L.filter) {\n                      H.uncheckAll(false);\n                      var N = L.filter.getfilters();\n\n                      for (var K = 0; K < H.items.length; K++) {\n                        var I = H.items[K].label;\n                        a.each(N, function () {\n                          if (this.condition == \"NOT_EQUAL\") {\n                            return true;\n                          }\n\n                          if (I == this.value) {\n                            H.checkIndex(K, false, false);\n                          }\n                        });\n                      }\n\n                      H._updateCheckedItems();\n\n                      var M = H.getCheckedItems().length;\n\n                      if (H.items.length != M && M > 0) {\n                        H.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          }\n\n          if (this.pageable && G.pagenum !== undefined) {\n            if (this.gotopage && !this.virtualmode) {\n              this.dataview.pagenum = -1;\n              this.gotopage(G.pagenum);\n            } else {\n              if (this.gotopage && this.virtualmode) {\n                this.gotopage(G.pagenum);\n              }\n            }\n          }\n        }\n\n        if (G.selectedrowindexes && G.selectedrowindexes && G.selectedrowindexes.length > 0) {\n          this.selectedrowindexes = G.selectedrowindexes;\n          this.selectedrowindex = G.selectedrowindex;\n\n          if (this.selectionmode === \"checkbox\") {\n            this._updatecheckboxselection();\n          }\n        }\n\n        if (G.selectedcells) {\n          if (this._applycellselection) {\n            a.each(G.selectedcells, function () {\n              F._applycellselection(this.rowindex, this.datafield, true, false);\n            });\n          }\n        }\n\n        if (this.groupable && G.groups !== undefined) {\n          this._refreshdataview();\n\n          this.render();\n          this._loading = E;\n          this.loadingstate = false;\n          return;\n        }\n\n        if (g) {\n          this.prerenderrequired = true;\n          this.rendergridcontent(true);\n          this._loading = E;\n          this.loadingstate = false;\n\n          if (this.updating()) {\n            return false;\n          }\n        } else {\n          this._loading = E;\n\n          this._updatecolumnwidths();\n\n          this._updatecellwidths();\n\n          this.loadingstate = false;\n        }\n\n        this.loadingstate = false;\n        this._loading = E;\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      this.loadingstate = false;\n    },\n    getstate: function () {\n      var p = this.getdatainformation();\n      var h = {};\n      h.width = this.width;\n      h.height = this.height;\n      h.pagenum = p.paginginformation.pagenum;\n      h.pagesize = p.paginginformation.pagesize;\n      h.pagesizeoptions = this.pagesizeoptions;\n      h.sortcolumn = p.sortinformation.sortcolumn;\n      h.sortdirection = p.sortinformation.sortdirection;\n\n      if (this.selectionmode != null) {\n        if (this.getselectedcells) {\n          if (this.selectionmode.toString().indexOf(\"cell\") != -1) {\n            var o = this.getselectedcells();\n            var q = new Array();\n            a.each(o, function () {\n              q.push({\n                datafield: this.datafield,\n                rowindex: this.rowindex\n              });\n            });\n            h.selectedcells = q;\n          } else {\n            var n = this.getselectedrowindexes();\n            h.selectedrowindexes = n;\n            h.selectedrowindex = this.selectedrowindex;\n          }\n        }\n      }\n\n      var i = {};\n      var d = 0;\n\n      if (this.dataview.filters) {\n        for (var j = 0; j < this.dataview.filters.length; j++) {\n          var e = this.dataview.filters[j].datafield;\n          var b = this.dataview.filters[j].filter;\n          var c = b.getfilters();\n          i[e + \"operator\"] = b.operator;\n\n          for (var f = 0; f < c.length; f++) {\n            c[f].datafield = e;\n\n            if (c[f].type == \"datefilter\") {\n              if (c[f].value && c[f].value.toLocaleString) {\n                var g = this.getcolumn(c[f].datafield);\n\n                if (g.cellsformat) {\n                  var l = this.source.formatDate(c[f].value, g.cellsformat, this.gridlocalization);\n\n                  if (l) {\n                    i[\"filtervalue\" + d] = l;\n                  } else {\n                    i[\"filtervalue\" + d] = c[f].value.toLocaleString();\n                  }\n                } else {\n                  i[\"filtervalue\" + d] = c[f].value.toLocaleString();\n                }\n              } else {\n                i[\"filtervalue\" + d] = c[f].value;\n              }\n            } else {\n              i[\"filtervalue\" + d] = c[f].value;\n            }\n\n            i[\"filtercondition\" + d] = c[f].condition;\n            i[\"filteroperator\" + d] = c[f].operator;\n            i[\"filterdatafield\" + d] = e;\n            i[\"filtertype\" + d] = c[f].type;\n            d++;\n          }\n        }\n      }\n\n      i.filterscount = d;\n      h.filters = i;\n      h.groups = this.groups;\n      h.columns = {};\n      var k = 0;\n\n      if (this.columns.records) {\n        a.each(this.columns.records, function (m, r) {\n          if (!this.datafield) {\n            return true;\n          }\n\n          var s = {};\n          s.width = this.width;\n          s.hidden = this.hidden;\n          s.pinned = this.pinned;\n          s.groupable = this.groupable;\n          s.resizable = this.resizable;\n          s.draggable = this.draggable;\n          s.text = this.text;\n          s.align = this.align;\n          s.cellsalign = this.cellsalign;\n          s.index = k++;\n          h.columns[this.datafield] = s;\n        });\n      }\n\n      return h;\n    },\n    _stringify: function (e) {\n      if (window.JSON && typeof window.JSON.stringify === \"function\") {\n        var d = this;\n        var c = \"\";\n\n        try {\n          c = window.JSON.stringify(e);\n        } catch (b) {\n          return d._str(\"\", {\n            \"\": e\n          });\n        }\n\n        return c;\n      }\n\n      var c = this._str(\"\", {\n        \"\": e\n      });\n\n      return c;\n    },\n    _quote: function (b) {\n      var d = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n          c = {\n        \"\\b\": \"\\\\b\",\n        \"\\t\": \"\\\\t\",\n        \"\\n\": \"\\\\n\",\n        \"\\f\": \"\\\\f\",\n        \"\\r\": \"\\\\r\",\n        '\"': '\\\\\"',\n        \"\\\\\": \"\\\\\\\\\"\n      };\n      return '\"' + b.replace(d, function (e) {\n        var f = c[e];\n        return typeof f === \"string\" ? f : \"\\\\u\" + (\"0000\" + e.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"';\n    },\n    _stringifyArray: function (e) {\n      var b = e.length,\n          c = [],\n          d;\n\n      for (var d = 0; d < b; d++) {\n        c.push(this._str(d, e) || \"null\");\n      }\n\n      return \"[\" + c.join(\",\") + \"]\";\n    },\n    _stringifyObject: function (f) {\n      var c = [],\n          d,\n          b;\n      var e = this;\n\n      for (d in f) {\n        if (Object.prototype.hasOwnProperty.call(f, d)) {\n          b = e._str(d, f);\n\n          if (b) {\n            c.push(e._quote(d) + \":\" + b);\n          }\n        }\n      }\n\n      return \"{\" + c.join(\",\") + \"}\";\n    },\n    _stringifyReference: function (b) {\n      switch (Object.prototype.toString.call(b)) {\n        case \"[object Array]\":\n          return this._stringifyArray(b);\n      }\n\n      return this._stringifyObject(b);\n    },\n    _stringifyPrimitive: function (c, b) {\n      switch (b) {\n        case \"string\":\n          return this._quote(c);\n\n        case \"number\":\n          return isFinite(c) ? c : \"null\";\n\n        case \"boolean\":\n          return c;\n      }\n\n      return \"null\";\n    },\n    _str: function (c, b) {\n      var e = b[c],\n          d = typeof e;\n\n      if (e && typeof e === \"object\" && typeof e.toJSON === \"function\") {\n        e = e.toJSON(c);\n        d = typeof e;\n      }\n\n      if (/(number|string|boolean)/.test(d) || !e && d === \"object\") {\n        return this._stringifyPrimitive(e, d);\n      } else {\n        return this._stringifyReference(e);\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}