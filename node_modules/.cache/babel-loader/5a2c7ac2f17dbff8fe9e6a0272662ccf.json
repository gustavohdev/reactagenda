{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    exportdata: function (s, C, B, q, t, v, h) {\n      if (!a.jqx.dataAdapter.ArrayExporter) {\n        throw \"jqxGrid: Missing reference to jqxdata.export.js!\";\n      }\n\n      if (B == undefined) {\n        B = true;\n      }\n\n      var L = this;\n\n      if (q == undefined) {\n        var q = this.getrows();\n\n        if (q.length == 0) {\n          throw \"No data to export.\";\n        }\n      }\n\n      this.exporting = true;\n\n      if (!this.pageable) {\n        this.loadondemand = true;\n      }\n\n      if (this.altrows) {\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      var A = this.hScrollInstance.value;\n      this.hScrollInstance.setPosition(0);\n\n      this._renderrows(this.virtualsizeinfo);\n\n      var J = t != undefined ? t : false;\n      var H = {};\n      var p = {};\n      var x = [];\n      var n = this.host.find(\".jqx-grid-cell:first\");\n      var y = this.host.find(\".jqx-grid-cell-alt:first\");\n      n.removeClass(this.toThemeProperty(\"jqx-grid-cell-selected\"));\n      n.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n      y.removeClass(this.toThemeProperty(\"jqx-grid-cell-selected\"));\n      y.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n      n.removeClass(this.toThemeProperty(\"jqx-grid-cell-hover\"));\n      n.removeClass(this.toThemeProperty(\"jqx-fill-state-hover\"));\n      y.removeClass(this.toThemeProperty(\"jqx-grid-cell-hover\"));\n      y.removeClass(this.toThemeProperty(\"jqx-fill-state-hover\"));\n      var k = \"cell\";\n      var g = 1;\n      var I = \"column\";\n      var e = 1;\n      var l = [];\n\n      for (var E = 0; E < this.columns.records.length; E++) {\n        var f = this.columns.records[E];\n\n        if (f.cellclassname != \"\") {\n          f.customCellStyles = new Array();\n\n          if (typeof f.cellclassname == \"string\") {\n            for (var F = 0; F < q.length; F++) {\n              f.customCellStyles[F] = f.cellclassname;\n            }\n          } else {\n            for (var F = 0; F < q.length; F++) {\n              var w = this.getrowboundindex(F);\n              var d = f.cellclassname(w, f.displayfield, q[F][f.displayfield], q[F]);\n\n              if (d) {\n                f.customCellStyles[F] = d;\n              }\n            }\n          }\n        }\n      }\n\n      var z = new Array();\n      var K = null;\n      var c = null;\n      var b = null;\n      a.each(this.columns.records, function (O) {\n        var S = a(L.table[0].rows[0].cells[O]);\n\n        if (L.table[0].rows.length > 1) {\n          var j = a(L.table[0].rows[1].cells[O]);\n\n          if (!b) {\n            b = j;\n          }\n        }\n\n        if (!c) {\n          c = S;\n        }\n\n        var N = this;\n\n        var P = function (U) {\n          U.removeClass(L.toThemeProperty(\"jqx-grid-cell-selected\"));\n          U.removeClass(L.toThemeProperty(\"jqx-fill-state-pressed\"));\n          U.removeClass(L.toThemeProperty(\"jqx-grid-cell-hover\"));\n          U.removeClass(L.toThemeProperty(\"jqx-fill-state-hover\"));\n\n          if (N.customCellStyles) {\n            for (var V in N.customCellStyles) {\n              U.removeClass(N.customCellStyles[V]);\n            }\n          }\n        };\n\n        P(S);\n\n        if (j) {\n          P(j);\n        }\n\n        if (this.displayfield == null) {\n          return true;\n        }\n\n        if (L.showaggregates) {\n          if (L.getcolumnaggregateddata) {\n            l.push(L.getcolumnaggregateddata(this.displayfield, this.aggregates, true, q));\n          }\n        }\n\n        var R = L._getexportcolumntype(this);\n\n        if (this.exportable && (!this.hidden || J)) {\n          H[this.displayfield] = {};\n          H[this.displayfield].text = this.text;\n          H[this.displayfield].width = parseInt(this.width);\n\n          if (isNaN(H[this.displayfield].width)) {\n            H[this.displayfield].width = 60;\n          }\n\n          H[this.displayfield].formatString = this.cellsformat;\n          H[this.displayfield].localization = L.gridlocalization;\n          H[this.displayfield].type = R;\n          H[this.displayfield].cellsAlign = this.cellsalign;\n          H[this.displayfield].hidden = !B;\n          H[this.displayfield].displayfield = this.displayfield;\n          z.push(H[this.displayfield]);\n        }\n\n        k = \"cell\" + g;\n        var T = a(this.element);\n\n        if (this.element == undefined) {\n          T = a(this.uielement);\n        }\n\n        if (!K) {\n          K = T;\n        } else {\n          if (!N._rendered) {\n            T = K;\n            S = c;\n            j = b;\n            var Q = L.toTP(\"jqx-grid-cell\") + \" \" + L.toTP(\"jqx-item\");\n            S[0].className = Q;\n            Q += L.toTP(\"jqx-grid-cell-alt\");\n\n            if (j) {\n              j[0].className = Q;\n            }\n          }\n        }\n\n        I = \"column\" + e;\n\n        if (s == \"html\" || s == \"xls\" || s == \"pdf\") {\n          var i = function (U, ac, ab, V, aa, X, W, Y, Z) {\n            p[U] = {};\n\n            if (ac == undefined) {\n              return;\n            }\n\n            if (ac[0].offsetWidth == 0 || ac[0].offsetHeight == 0) {\n              return;\n            }\n\n            p[U][\"font-size\"] = ac.css(\"font-size\");\n            p[U][\"font-weight\"] = ac.css(\"font-weight\");\n            p[U][\"font-style\"] = ac.css(\"font-style\");\n            p[U][\"background-color\"] = X._getexportcolor(ac.css(\"background-color\"));\n            p[U][\"color\"] = X._getexportcolor(ac.css(\"color\"));\n            p[U][\"border-color\"] = X._getexportcolor(ac.css(\"border-top-color\"));\n\n            if (ab) {\n              p[U][\"text-align\"] = aa.align;\n            } else {\n              p[U][\"text-align\"] = aa.cellsalign;\n              p[U][\"formatString\"] = aa.cellsformat;\n              p[U][\"dataType\"] = R;\n            }\n\n            if (s == \"html\" || s == \"pdf\") {\n              p[U][\"border-top-width\"] = ac.css(\"border-top-width\");\n              p[U][\"border-left-width\"] = ac.css(\"border-left-width\");\n              p[U][\"border-right-width\"] = ac.css(\"border-right-width\");\n              p[U][\"border-bottom-width\"] = ac.css(\"border-bottom-width\");\n              p[U][\"border-top-style\"] = ac.css(\"border-top-style\");\n              p[U][\"border-left-style\"] = ac.css(\"border-left-style\");\n              p[U][\"border-right-style\"] = ac.css(\"border-right-style\");\n              p[U][\"border-bottom-style\"] = ac.css(\"border-bottom-style\");\n\n              if (ab) {\n                if (W == 0) {\n                  p[U][\"border-left-width\"] = ac.css(\"border-right-width\");\n                }\n\n                p[U][\"border-top-width\"] = ac.css(\"border-right-width\");\n                p[U][\"border-bottom-width\"] = ac.css(\"border-bottom-width\");\n              } else {\n                if (W == 0) {\n                  p[U][\"border-left-width\"] = ac.css(\"border-right-width\");\n                }\n              }\n\n              p[U][\"height\"] = ac.css(\"height\");\n            }\n\n            if (aa.exportable && (!aa.hidden || J)) {\n              if (Y == true) {\n                if (!H[aa.displayfield].customCellStyles) {\n                  H[aa.displayfield].customCellStyles = new Array();\n                }\n\n                H[aa.displayfield].customCellStyles[Z] = U;\n              } else {\n                if (ab) {\n                  H[aa.displayfield].style = U;\n                } else {\n                  if (!V) {\n                    H[aa.displayfield].cellStyle = U;\n                  } else {\n                    H[aa.displayfield].cellAltStyle = U;\n                  }\n                }\n              }\n            }\n          };\n\n          i(I, T, true, false, this, L, O);\n          e++;\n          i(k, S, false, false, this, L, O);\n\n          if (L.altrows) {\n            k = \"cellalt\" + g;\n            i(k, j, false, true, this, L, O);\n          }\n\n          if (this.customCellStyles) {\n            for (var M in N.customCellStyles) {\n              S.removeClass(N.customCellStyles[M]);\n            }\n\n            for (var M in N.customCellStyles) {\n              S.addClass(N.customCellStyles[M]);\n              i(k + N.customCellStyles[M], S, false, false, this, L, O, true, M);\n              S.removeClass(N.customCellStyles[M]);\n            }\n          }\n\n          g++;\n        }\n      });\n      a.each(this.columns.records, function (i) {\n        if (H[this.displayfield]) {\n          H[this.displayfield].columnsDataFields = z;\n        }\n      });\n\n      if (this.showaggregates) {\n        var G = [];\n        var D = s == \"xls\" ? \"_AG\" : \"\";\n        var m = this.groupable ? this.groups.length : 0;\n\n        if (this.rowdetails) {\n          m++;\n        }\n\n        if (this.selectionmode === \"checkbox\") {\n          m++;\n        }\n\n        if (l.length > 0) {\n          a.each(this.columns.records, function (j) {\n            if (this.aggregates) {\n              for (var N = 0; N < this.aggregates.length; N++) {\n                if (!G[N]) {\n                  G[N] = {};\n                }\n\n                if (G[N]) {\n                  var O = L._getaggregatename(this.aggregates[N]);\n\n                  var P = L._getaggregatetype(this.aggregates[N]);\n\n                  var M = l[j - m];\n\n                  if (M) {\n                    G[N][this.displayfield] = D + O + \": \" + M[P];\n                  }\n                }\n              }\n            }\n          });\n          a.each(this.columns.records, function (j) {\n            for (var M = 0; M < G.length; M++) {\n              if (G[M][this.displayfield] == undefined) {\n                G[M][this.displayfield] = D;\n              }\n            }\n          });\n        }\n\n        a.each(G, function () {\n          q.push(this);\n        });\n      }\n\n      var o = this;\n      var u = a.jqx.dataAdapter.ArrayExporter(q, H, p);\n\n      if (C == undefined) {\n        this._renderrows(this.virtualsizeinfo);\n\n        var r = u.exportTo(s);\n\n        if (this.showaggregates) {\n          a.each(G, function () {\n            q.pop(this);\n          });\n        }\n\n        setTimeout(function () {\n          o.exporting = false;\n        }, 50);\n        this.hScrollInstance.setPosition(A);\n\n        this._renderrows(this.virtualsizeinfo);\n\n        return r;\n      } else {\n        u.exportToFile(s, C, v, h);\n      }\n\n      if (this.showaggregates) {\n        a.each(G, function () {\n          q.pop(this);\n        });\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      setTimeout(function () {\n        o.exporting = false;\n      }, 50);\n      this.hScrollInstance.setPosition(A);\n\n      this._renderrows(this.virtualsizeinfo);\n    },\n    _getexportcolor: function (l) {\n      var f = l;\n\n      if (l == \"transparent\") {\n        f = \"#FFFFFF\";\n      }\n\n      if (!f || !f.toString()) {\n        f = \"#FFFFFF\";\n      }\n\n      if (f.toString().indexOf(\"rgb\") != -1) {\n        var i = f.split(\",\");\n\n        if (f.toString().indexOf(\"rgba\") != -1) {\n          var d = parseInt(i[0].substring(5));\n          var h = parseInt(i[1]);\n          var j = parseInt(i[2]);\n          var k = parseInt(i[3].substring(1, 4));\n          var m = {\n            r: d,\n            g: h,\n            b: j\n          };\n\n          var e = this._rgbToHex(m);\n\n          if (d == 0 && h == 0 && j == 0 && k == 0) {\n            return \"#ffffff\";\n          }\n\n          return \"#\" + e;\n        }\n\n        var d = parseInt(i[0].substring(4));\n        var h = parseInt(i[1]);\n        var j = parseInt(i[2].substring(1, 4));\n        var m = {\n          r: d,\n          g: h,\n          b: j\n        };\n\n        var e = this._rgbToHex(m);\n\n        return \"#\" + e;\n      } else {\n        if (f.toString().indexOf(\"#\") != -1) {\n          if (f.toString().length == 4) {\n            var c = f.toString().substring(1, 4);\n            f += c;\n          }\n        }\n      }\n\n      return f;\n    },\n    _rgbToHex: function (b) {\n      return this._intToHex(b.r) + this._intToHex(b.g) + this._intToHex(b.b);\n    },\n    _intToHex: function (c) {\n      var b = parseInt(c).toString(16);\n\n      if (b.length == 1) {\n        b = \"0\" + b;\n      }\n\n      return b.toUpperCase();\n    },\n    _getexportcolumntype: function (f) {\n      var g = this;\n      var e = \"string\";\n      var d = g.source.datafields || (g.source._source ? g.source._source.datafields : null);\n\n      if (d) {\n        var i = \"\";\n        a.each(d, function () {\n          if (this.name == f.displayfield) {\n            if (this.type) {\n              i = this.type;\n            }\n\n            return false;\n          }\n        });\n\n        if (i) {\n          return i;\n        }\n      }\n\n      if (f != null) {\n        if (this.dataview.cachedrecords == undefined) {\n          return e;\n        }\n\n        var b = null;\n\n        if (!this.virtualmode) {\n          if (this.dataview.cachedrecords.length == 0) {\n            return e;\n          }\n\n          b = this.dataview.cachedrecords[0][f.displayfield];\n\n          if (b != null && b.toString() == \"\") {\n            return \"string\";\n          }\n        } else {\n          a.each(this.dataview.cachedrecords, function () {\n            b = this[f.displayfield];\n            return false;\n          });\n        }\n\n        if (b != null) {\n          if (f.cellsformat.indexOf(\"c\") != -1) {\n            return \"number\";\n          }\n\n          if (f.cellsformat.indexOf(\"n\") != -1) {\n            return \"number\";\n          }\n\n          if (f.cellsformat.indexOf(\"p\") != -1) {\n            return \"number\";\n          }\n\n          if (f.cellsformat.indexOf(\"d\") != -1) {\n            return \"date\";\n          }\n\n          if (f.cellsformat.indexOf(\"y\") != -1) {\n            return \"date\";\n          }\n\n          if (f.cellsformat.indexOf(\"M\") != -1) {\n            return \"date\";\n          }\n\n          if (f.cellsformat.indexOf(\"m\") != -1) {\n            return \"date\";\n          }\n\n          if (f.cellsformat.indexOf(\"t\") != -1) {\n            return \"date\";\n          }\n\n          if (typeof b == \"boolean\") {\n            e = \"boolean\";\n          } else {\n            if (a.jqx.dataFormat.isNumber(b)) {\n              e = \"number\";\n            } else {\n              var h = new Date(b);\n\n              if (h.toString() == \"NaN\" || h.toString() == \"Invalid Date\") {\n                if (a.jqx.dataFormat) {\n                  h = a.jqx.dataFormat.tryparsedate(b);\n\n                  if (h != null) {\n                    if (h && h.getFullYear()) {\n                      if (h.getFullYear() == 1970 && h.getMonth() == 0 && h.getDate() == 1) {\n                        var c = new Number(b);\n\n                        if (!isNaN(c)) {\n                          return \"number\";\n                        }\n\n                        return \"string\";\n                      }\n                    }\n\n                    return \"date\";\n                  } else {\n                    e = \"string\";\n                  }\n                } else {\n                  e = \"string\";\n                }\n              } else {\n                e = \"date\";\n              }\n            }\n          }\n        }\n      }\n\n      return e;\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}