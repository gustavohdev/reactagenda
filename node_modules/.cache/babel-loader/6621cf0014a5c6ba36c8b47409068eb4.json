{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gustavo Henrique\\\\Documents\\\\react\\\\my-app\\\\src\\\\App.tsx\";\nimport * as React from 'react';\nimport JqxScheduler, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxscheduler';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myScheduler = React.createRef();\n    const appointments = new Array();\n    const appointment1 = {\n      calendar: \"Room 2\",\n      description: \"\",\n      from: new Date(2017, 10, 22, 8, 0, 0),\n      id: \"id4\",\n      location: \"\",\n      style: '#AA4643',\n      subject: \"New Projects Planning\",\n      to: new Date(2017, 10, 22, 13, 0, 0)\n    };\n    const appointment2 = {\n      calendar: \"Room 1\",\n      description: \"\",\n      from: new Date(2017, 10, 25, 13, 0, 0),\n      id: \"id5\",\n      location: \"\",\n      style: '#89A54E',\n      subject: \"Interview with James\",\n      to: new Date(2017, 10, 25, 15, 0, 0)\n    };\n    const appointment3 = {\n      calendar: \"Room 2\",\n      description: \"\",\n      from: new Date(2017, 10, 26, 14, 0, 0),\n      id: \"id6\",\n      location: \"\",\n      style: '#71588F',\n      subject: \"Interview with Nancy\",\n      to: new Date(2017, 10, 26, 16, 0, 0)\n    };\n    const appointment4 = {\n      calendar: \"Room 1\",\n      description: \"\",\n      from: new Date(2017, 10, 23, 10, 0, 0),\n      id: \"id7\",\n      location: \"\",\n      recurrenceException: '2017-11-24 09:00:00,2017-11-26 12:00:00',\n      recurrenceRule: 'FREQ=DAILY;',\n      style: '#307DD7',\n      subject: \"Daily Meeting\",\n      to: new Date(2017, 10, 23, 11, 0, 0)\n    };\n    appointments.push(appointment1);\n    appointments.push(appointment2);\n    appointments.push(appointment3);\n    appointments.push(appointment4);\n    const source = {\n      dataFields: [{\n        name: 'calendar',\n        type: 'string'\n      }, {\n        name: 'description',\n        type: 'string'\n      }, {\n        name: 'from',\n        type: 'date'\n      }, {\n        name: 'id',\n        type: 'string'\n      }, {\n        name: 'location',\n        type: 'string'\n      }, {\n        name: 'recurrenceException',\n        type: 'string'\n      }, {\n        name: 'recurrenceRule',\n        type: 'string'\n      }, {\n        name: 'subject',\n        type: 'string'\n      }, {\n        name: 'style',\n        type: 'string'\n      }, {\n        name: 'to',\n        type: 'date'\n      }],\n      dataType: \"array\",\n      id: 'id',\n      localData: appointments\n    };\n    const dataAdapter = new jqx.dataAdapter(source);\n    this.state = {\n      appointmentDataFields: {\n        description: \"description\",\n        from: \"from\",\n        id: \"id\",\n        location: \"location\",\n        recurrenceException: 'recurrenceException',\n        recurrencePattern: 'recurrenceRule',\n        resourceId: \"calendar\",\n        style: 'style',\n        subject: \"subject\",\n        to: \"to\"\n      },\n      date: new jqx.date(2017, 11, 23),\n      height: 600,\n      ready: () => {\n        setTimeout(() => {\n          this.myScheduler.current.ensureAppointmentVisible(\"id7\");\n        });\n      },\n      source: dataAdapter,\n      views: ['dayView', 'weekView', 'monthView']\n    };\n  }\n\n  render() {\n    return React.createElement(JqxScheduler, {\n      ref: this.myScheduler // @ts-ignore\n      //width={getWidth('scheduler')}\n      ,\n      height: this.state.height,\n      date: this.state.date,\n      source: this.state.source,\n      appointmentDataFields: this.state.appointmentDataFields,\n      view: \"weekView\",\n      views: this.state.views,\n      ready: this.state.ready,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;\n/*import * as React from 'react';\n\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent<{}, IGridProps> {\n\n    private source: IGridProps['source'] = {\n        localdata:\n            [\n                ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n                ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n                ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n                ['Thomas Hardy', 'Sales Representative', 'London', 'UK'],\n                ['Christina Berglund', 'Order Administrator', 'Lule', 'Sweden'],\n                ['Hanna Moos', 'Sales Representative', 'Mannheim', 'Germany'],\n                ['Frdrique Citeaux', 'Marketing Manager', 'Strasbourg', 'France'],\n                ['Martn Sommer', 'Owner', 'Madrid', 'Spain'],\n                ['Owner', 'Marseille', 'France'],\n                ['Elizabeth Lincoln', 'Accounting Manager', 'Tsawassen', 'Canada'],\n                ['Victoria Ashworth', 'Sales Representative', 'London', 'UK'],\n                ['Patricio Simpson', 'Sales Agent', 'Buenos Aires', 'Argentina'],\n                ['Francisco Chang', 'Marketing Manager', 'Mxico D.F.', 'Mexico'],\n                ['Yang Wang', 'Owner', 'Bern', 'Switzerland'],\n                ['Pedro Afonso', 'Sales Associate', 'Sao Paulo', 'Brazil'],\n                ['Elizabeth Brown', 'Sales Representative', 'London', 'UK'],\n                ['Sven Ottlieb', 'Order Administrator', 'Aachen', 'Germany'],\n                ['Janine Labrune', 'Owner', 'Nantes', 'France'],\n                ['Ann Devon', 'Sales Agent', 'London', 'UK'],\n                ['Roland Mendel', 'Sales Manager', 'Graz', 'Austria']\n            ],\n        datafields:\n            [\n                { name: 'ContactName', type: 'string', map: '0' },\n                { name: 'Title', type: 'string', map: '1' },\n                { name: 'City', type: 'string', map: '2' },\n                { name: 'Country', type: 'string', map: '3' }\n            ],\n        datatype: 'array'\n    };\n\n    private columns: IGridProps['columns'] =\n        [\n            { text: 'Contact Name', datafield: 'ContactName', width: 240 },\n            { text: 'Contact Title', datafield: 'Title', width: 240 },\n            { text: 'City', datafield: 'City', width: 150 },\n            { text: 'Country', datafield: 'Country' }\n        ];\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            columns: this.columns,\n            source: new jqx.dataAdapter(this.source)\n        };\n    }\n\n    public render() {\n        return (\n            <JqxGrid\n                width={850} source={this.state.source} columns={this.state.columns}\n                pageable={true} autoheight={true} sortable={true} theme={'material-purple'}\n                altrows={true} enabletooltips={true} editable={true}\n            />\n        );\n    }\n}\n\nexport default App;*/","map":{"version":3,"sources":["C:\\Users\\Gustavo Henrique\\Documents\\react\\my-app\\src\\App.tsx"],"names":["React","JqxScheduler","jqx","App","PureComponent","constructor","props","myScheduler","createRef","appointments","Array","appointment1","calendar","description","from","Date","id","location","style","subject","to","appointment2","appointment3","appointment4","recurrenceException","recurrenceRule","push","source","dataFields","name","type","dataType","localData","dataAdapter","state","appointmentDataFields","recurrencePattern","resourceId","date","height","ready","setTimeout","current","ensureAppointmentVisible","views","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport JqxScheduler, { ISchedulerProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxscheduler';\nclass App extends React.PureComponent<{}, ISchedulerProps> {\n    private myScheduler = React.createRef<JqxScheduler>();\n    constructor(props: {}) {\n        super(props);\n        const appointments = new Array();\n        const appointment1 = {\n            calendar: \"Room 2\",\n            description: \"\",\n            from: new Date(2017, 10, 22, 8, 0, 0),\n            id: \"id4\",\n            location: \"\",\n            style: '#AA4643',\n            subject: \"New Projects Planning\",\n            to: new Date(2017, 10, 22, 13, 0, 0)\n        };\n        const appointment2 = {\n            calendar: \"Room 1\",\n            description: \"\",\n            from: new Date(2017, 10, 25, 13, 0, 0),\n            id: \"id5\",\n            location: \"\",\n            style: '#89A54E',\n            subject: \"Interview with James\",\n            to: new Date(2017, 10, 25, 15, 0, 0)\n        };\n        const appointment3 = {\n            calendar: \"Room 2\",\n            description: \"\",\n            from: new Date(2017, 10, 26, 14, 0, 0),\n            id: \"id6\",\n            location: \"\",\n            style: '#71588F',\n            subject: \"Interview with Nancy\",\n            to: new Date(2017, 10, 26, 16, 0, 0),\n        };\n        const appointment4 = {\n            calendar: \"Room 1\",\n            description: \"\",\n            from: new Date(2017, 10, 23, 10, 0, 0),\n            id: \"id7\",\n            location: \"\",\n            recurrenceException: '2017-11-24 09:00:00,2017-11-26 12:00:00',\n            recurrenceRule: 'FREQ=DAILY;',\n            style: '#307DD7',\n            subject: \"Daily Meeting\",\n            to: new Date(2017, 10, 23, 11, 0, 0)\n        };\n        appointments.push(appointment1);\n        appointments.push(appointment2);\n        appointments.push(appointment3);\n        appointments.push(appointment4);\n        const source: any = {\n            dataFields: [\n                { name: 'calendar', type: 'string' },\n                { name: 'description', type: 'string' },\n                { name: 'from', type: 'date' },\n                { name: 'id', type: 'string' },\n                { name: 'location', type: 'string' },\n                { name: 'recurrenceException', type: 'string' },\n                { name: 'recurrenceRule', type: 'string' },\n                { name: 'subject', type: 'string' },\n                { name: 'style', type: 'string' },\n                { name: 'to', type: 'date' }\n            ],\n            dataType: \"array\",\n            id: 'id',\n            localData: appointments\n        };\n        const dataAdapter: any = new jqx.dataAdapter(source);\n        this.state = {\n            appointmentDataFields: {\n                description: \"description\",\n                from: \"from\",\n                id: \"id\",\n                location: \"location\",\n                recurrenceException: 'recurrenceException',\n                recurrencePattern: 'recurrenceRule',\n                resourceId: \"calendar\",\n                style: 'style',\n                subject: \"subject\",\n                to: \"to\"\n            },\n            date: new jqx.date(2017, 11, 23),\n            height: 600,\n            ready: () => {\n                setTimeout(() => {\n                    this.myScheduler.current!.ensureAppointmentVisible(\"id7\");\n                });\n            },\n            source: dataAdapter,\n            views: [\n                'dayView',\n                'weekView',\n                'monthView'\n            ]\n        };\n    }\n    public render() {\n        return (\n            <JqxScheduler ref={this.myScheduler}\n                // @ts-ignore\n                //width={getWidth('scheduler')}\n                height={this.state.height}\n                date={this.state.date}\n                source={this.state.source}\n                appointmentDataFields={this.state.appointmentDataFields}\n                view={\"weekView\"}\n                views={this.state.views}\n                ready={this.state.ready}\n            />\n        );\n    }\n}\nexport default App;\n\n/*import * as React from 'react';\n\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent<{}, IGridProps> {\n\n    private source: IGridProps['source'] = {\n        localdata:\n            [\n                ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n                ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n                ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n                ['Thomas Hardy', 'Sales Representative', 'London', 'UK'],\n                ['Christina Berglund', 'Order Administrator', 'Lule', 'Sweden'],\n                ['Hanna Moos', 'Sales Representative', 'Mannheim', 'Germany'],\n                ['Frdrique Citeaux', 'Marketing Manager', 'Strasbourg', 'France'],\n                ['Martn Sommer', 'Owner', 'Madrid', 'Spain'],\n                ['Owner', 'Marseille', 'France'],\n                ['Elizabeth Lincoln', 'Accounting Manager', 'Tsawassen', 'Canada'],\n                ['Victoria Ashworth', 'Sales Representative', 'London', 'UK'],\n                ['Patricio Simpson', 'Sales Agent', 'Buenos Aires', 'Argentina'],\n                ['Francisco Chang', 'Marketing Manager', 'Mxico D.F.', 'Mexico'],\n                ['Yang Wang', 'Owner', 'Bern', 'Switzerland'],\n                ['Pedro Afonso', 'Sales Associate', 'Sao Paulo', 'Brazil'],\n                ['Elizabeth Brown', 'Sales Representative', 'London', 'UK'],\n                ['Sven Ottlieb', 'Order Administrator', 'Aachen', 'Germany'],\n                ['Janine Labrune', 'Owner', 'Nantes', 'France'],\n                ['Ann Devon', 'Sales Agent', 'London', 'UK'],\n                ['Roland Mendel', 'Sales Manager', 'Graz', 'Austria']\n            ],\n        datafields:\n            [\n                { name: 'ContactName', type: 'string', map: '0' },\n                { name: 'Title', type: 'string', map: '1' },\n                { name: 'City', type: 'string', map: '2' },\n                { name: 'Country', type: 'string', map: '3' }\n            ],\n        datatype: 'array'\n    };\n\n    private columns: IGridProps['columns'] =\n        [\n            { text: 'Contact Name', datafield: 'ContactName', width: 240 },\n            { text: 'Contact Title', datafield: 'Title', width: 240 },\n            { text: 'City', datafield: 'City', width: 150 },\n            { text: 'Country', datafield: 'Country' }\n        ];\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            columns: this.columns,\n            source: new jqx.dataAdapter(this.source)\n        };\n    }\n\n    public render() {\n        return (\n            <JqxGrid\n                width={850} source={this.state.source} columns={this.state.columns}\n                pageable={true} autoheight={true} sortable={true} theme={'material-purple'}\n                altrows={true} enabletooltips={true} editable={true}\n            />\n        );\n    }\n}\n\nexport default App;*/"]},"metadata":{},"sourceType":"module"}