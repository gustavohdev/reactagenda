{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.dataview.sort = function () {\n    this.sortby = function (d, g, u) {\n      var o = Object.prototype.toString;\n\n      if (g == null) {\n        this.sortdata = null;\n\n        if (this.grid.sortmode !== \"many\") {\n          this.sortcache = {};\n        } else {\n          if (this.sortcache[d]) {\n            delete this.sortcache[d];\n          }\n        }\n\n        this.grid._pagescache = new Array();\n        this.grid._cellscache = new Array();\n\n        if (this.grid.sortmode !== \"many\") {\n          this.refresh();\n          return;\n        }\n      }\n\n      if (this.grid.sortmode === \"many\") {\n        this.grid._pagescache = new Array();\n        this.grid._cellscache = new Array();\n      }\n\n      if (g != null) {\n        if (g == \"a\" || g == \"asc\" || g == \"ascending\" || g == true) {\n          g = true;\n        } else {\n          g = false;\n        }\n      }\n\n      var h = d;\n      this.sortfield = d;\n      this.sortfielddirection = g ? \"asc\" : \"desc\";\n\n      if (g == null) {\n        this.sortfielddirection = null;\n      }\n\n      if (this.sortcache == undefined) {\n        this.sortcache = {};\n      }\n\n      this.sortdata = [];\n      var b = [];\n      var c = false;\n\n      if (h == \"constructor\") {\n        h = \"\";\n      }\n\n      if (!this.virtualmode && this.sortcache[h] != null && this.grid.sortmode !== \"many\") {\n        var t = this.sortcache[h];\n        b = t._sortdata;\n\n        if (t.direction == g) {\n          b.reverse();\n        } else {\n          if (!t.direction && g) {\n            b.reverse();\n          }\n\n          c = true;\n        }\n\n        if (b.length < this.totalrecords) {\n          this.sortcache = {};\n          c = false;\n          b = [];\n        }\n      }\n\n      Object.prototype.toString = typeof d == \"function\" ? d : function () {\n        return this[d];\n      };\n      var x = this.records;\n      var z = this.that;\n      var q = \"\";\n\n      if (this.source.datafields) {\n        a.each(this.source.datafields, function () {\n          if (this.name == d) {\n            if (this.type) {\n              q = this.type;\n            }\n\n            return false;\n          }\n        });\n      }\n\n      if (b.length == 0) {\n        if (x.length) {\n          var j = x.length;\n\n          for (var w = 0; w < j; w++) {\n            var f = x[w];\n\n            if (f != null) {\n              var k = f;\n              var y = k.toString();\n              b.push({\n                sortkey: y,\n                value: k,\n                index: w\n              });\n            }\n          }\n        } else {\n          var n = false;\n\n          for (var s in x) {\n            var f = x[s];\n\n            if (f == undefined) {\n              n = true;\n              break;\n            }\n\n            var k = f;\n            b.push({\n              sortkey: k.toString(),\n              value: k,\n              index: s\n            });\n          }\n\n          if (n) {\n            a.each(x, function (A, B) {\n              b.push({\n                sortkey: B.toString(),\n                value: B,\n                index: A\n              });\n            });\n          }\n        }\n      }\n\n      if (!c) {\n        if (u == null) {\n          this._sortcolumntype = q;\n          var m = this;\n          b.sort(function (A, i) {\n            return m._compare(A, i, q);\n          });\n        } else {\n          b.sort(u);\n        }\n      }\n\n      if (!g) {\n        b.reverse();\n      }\n\n      Object.prototype.toString = o;\n      this.sortdata = b;\n\n      if (g !== null) {\n        this.sortcache[h] = {\n          _sortdata: b,\n          direction: g,\n          dataType: this._sortcolumntype,\n          dataField: h\n        };\n      }\n\n      if (this.grid.sortmode === \"many\") {\n        var v = [];\n        var r = [];\n        var e = [];\n\n        for (var l in this.sortcache) {\n          if (l === \"data\") {\n            continue;\n          }\n\n          var t = this.sortcache[l];\n          v.push(t.dataField);\n          r.push(t.direction ? \"asc\" : \"desc\");\n          e.push(t.dataType);\n        }\n\n        if (v.length > 0) {\n          var p = this.multiSort(x, v, r, e);\n          b = [];\n          a.each(p, function (A, B) {\n            b.push({\n              sortkey: h,\n              value: B,\n              index: B.boundindex\n            });\n          });\n          this.sortdata = b;\n        } else {\n          this.sortcache = {};\n          this.sortdata = null;\n          this.refresh();\n          return;\n        }\n      }\n\n      this.reload(this.records, this.rows, this.filters, this.updated, true);\n    }, this.multiSort = function (g, c, k, m, f) {\n      var j = this;\n\n      if (g.length === 0) {\n        return;\n      }\n\n      var b = [];\n\n      for (var h = 0; h < g.length; h++) {\n        var p = a.extend({}, g[h]);\n        b.push(p);\n      }\n\n      var l = false;\n\n      if (b && b.constructor && b.constructor.name === \"ObservableArray\") {\n        l = true;\n      }\n\n      if (!b || !(b instanceof Array) || b.length === 0 || !c || c instanceof Array && c.length === 0) {\n        if (!l) {\n          throw new Error(\"sort: Missing or Invalid arguments!\");\n        }\n      }\n\n      if (typeof c === \"string\") {\n        c = [c];\n      }\n\n      var e = [],\n          o = [];\n\n      if (k === undefined) {\n        k = [];\n      }\n\n      var d = function (i, s) {\n        var r = s || typeof i;\n        var q;\n\n        switch (r) {\n          case \"string\":\n          default:\n            q = new Intl.Collator().compare;\n            break;\n\n          case \"date\":\n          case \"time\":\n          case \"datetime\":\n          case \"number\":\n          case \"int\":\n          case \"float\":\n            q = function (u, t) {\n              return u - t;\n            };\n\n            break;\n\n          case \"boolean\":\n            q = function (u, t) {\n              if (u === t) {\n                return 0;\n              } else {\n                if (u === false) {\n                  return -1;\n                } else {\n                  return 1;\n                }\n              }\n            };\n\n            break;\n\n          case \"object\":\n            if (i instanceof Date) {\n              q = function (u, t) {\n                return u.getTime() - t.getTime();\n              };\n            }\n\n            break;\n        }\n\n        return q;\n      };\n\n      for (var h = 0; h < c.length; h++) {\n        if (k[h] === undefined || k[h] === \"asc\" || k[h] === \"ascending\") {\n          e[h] = 1;\n        } else {\n          e[h] = -1;\n        }\n\n        var n = b[0][c[h]];\n        o[h] = d(n, m[h]);\n      }\n\n      if (f) {\n        f(b, c, k, o);\n        return;\n      }\n\n      b.sort(function (s, r) {\n        for (var t = 0; t < c.length; t++) {\n          var q = o[t](s[c[t]], r[c[t]]);\n\n          if (q === 0) {\n            if (c[t + 1]) {\n              continue;\n            } else {\n              if (s._index !== undefined) {\n                return (s._index - r._index) * e[t];\n              }\n            }\n\n            return 0;\n          }\n\n          return q * e[t];\n        }\n\n        if (c.length === 0) {\n          if (s.boundIndex < r.boundIndex) {\n            return -1;\n          }\n\n          if (s.boundIndex > r.boundIndex) {\n            return 1;\n          }\n\n          return 0;\n        }\n      });\n      return b;\n    }, this.clearsortdata = function () {\n      this.sortcache = {};\n      this.sortdata = null;\n    };\n\n    this._compare = function (c, b, e) {\n      var c = c.sortkey;\n      var b = b.sortkey;\n\n      if (c === undefined) {\n        c = null;\n      }\n\n      if (b === undefined) {\n        b = null;\n      }\n\n      if (c === null && b === null) {\n        return 0;\n      }\n\n      if (c === null && b !== null) {\n        return -1;\n      }\n\n      if (c !== null && b === null) {\n        return 1;\n      }\n\n      if (a.jqx.dataFormat) {\n        if (e && e != \"\") {\n          switch (e) {\n            case \"number\":\n            case \"int\":\n            case \"float\":\n              if (c < b) {\n                return -1;\n              }\n\n              if (c > b) {\n                return 1;\n              }\n\n              return 0;\n\n            case \"date\":\n            case \"time\":\n              if (c < b) {\n                return -1;\n              }\n\n              if (c > b) {\n                return 1;\n              }\n\n              return 0;\n\n            case \"string\":\n            case \"text\":\n              c = String(c).toLowerCase();\n              b = String(b).toLowerCase();\n              break;\n          }\n        } else {\n          if (a.jqx.dataFormat.isNumber(c) && a.jqx.dataFormat.isNumber(b)) {\n            if (c < b) {\n              return -1;\n            }\n\n            if (c > b) {\n              return 1;\n            }\n\n            return 0;\n          } else {\n            if (a.jqx.dataFormat.isDate(c) && a.jqx.dataFormat.isDate(b)) {\n              if (c < b) {\n                return -1;\n              }\n\n              if (c > b) {\n                return 1;\n              }\n\n              return 0;\n            } else {\n              if (!a.jqx.dataFormat.isNumber(c) && !a.jqx.dataFormat.isNumber(b)) {\n                c = String(c).toLowerCase();\n                b = String(b).toLowerCase();\n              }\n            }\n          }\n        }\n      }\n\n      try {\n        if (c < b) {\n          return -1;\n        }\n\n        if (c > b) {\n          return 1;\n        }\n      } catch (d) {\n        var f = d;\n      }\n\n      return 0;\n    };\n\n    this._equals = function (c, b) {\n      return this._compare(c, b) === 0;\n    };\n  };\n\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _rendersortcolumn: function () {\n      var b = this.that;\n      var h = this.getsortcolumn();\n\n      if (this.sortmode === \"many\") {\n        this.__columnsbydatafield = new Array();\n        var d = this.getsortcolumns();\n        a.each(this.columns.records, function (j, k) {\n          a(this.sortasc).hide();\n          a(this.sortdesc).hide();\n          a(this.sorticon).css(\"visibility\", \"hidden\");\n          this.element.removeAttribute(\"sort\");\n        });\n\n        if (d.length > 0) {\n          for (var c = 0; c < d.length; c++) {\n            var e = d[c];\n\n            var g = this._getcolumnbydatafield(e.dataField);\n\n            g.element.setAttribute(\"sort\", true);\n\n            if (b.isMaterialized() || b.isModern()) {\n              a(g.sorticon).show();\n              a(g.sorticon).css(\"visibility\", \"inherit\");\n              a(g.sorticon).removeClass(\"ascending\");\n              a(g.sorticon).removeClass(\"descending\");\n\n              if (e.ascending) {\n                a(g.sorticon).addClass(\"ascending\");\n              } else {\n                a(g.sorticon).addClass(\"descending\");\n              }\n            } else {\n              if (e.ascending) {\n                a(g.sortasc).show();\n                a(g.sortdesc).hide();\n              } else {\n                if (e.ascending === false) {\n                  a(g.sortasc).hide();\n                  a(g.sortdesc).show();\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n      if (this.sortdirection) {\n        var f = function (j, k) {\n          var i = b.getcolumn(j);\n\n          if (i) {\n            if (k.ascending) {\n              a.jqx.aria(i.element, \"aria-sort\", \"ascending\");\n            } else {\n              if (k.descending) {\n                a.jqx.aria(i.element, \"aria-sort\", \"descending\");\n              } else {\n                a.jqx.aria(i.element, \"aria-sort\", \"none\");\n              }\n            }\n          }\n        };\n\n        if (this._oldsortinfo) {\n          if (this._oldsortinfo.column) {\n            f(this._oldsortinfo.column, {\n              ascending: false,\n              descending: false\n            });\n          }\n        }\n\n        f(h, this.sortdirection);\n      }\n\n      this._oldsortinfo = {\n        column: h,\n        direction: this.sortdirection\n      };\n\n      if (this.sortdirection) {\n        a.each(this.columns.records, function (k, l) {\n          var j = a.data(document.body, \"groupsortelements\" + this.displayfield);\n\n          if (h == null || this.displayfield != h) {\n            a(this.sortasc).hide();\n            a(this.sortdesc).hide();\n            a(this.sorticon).css(\"visibility\", \"hidden\");\n            a(this.sorticon).removeClass(\"ascending\");\n            a(this.sorticon).removeClass(\"descending\");\n            this.element.removeAttribute(\"sort\");\n\n            if (j != null) {\n              j.sortasc.hide();\n              j.sortdesc.hide();\n            }\n          } else {\n            if (b.isMaterialized() || b.isModern()) {\n              a(this.sortasc).hide();\n              a(this.sortdesc).hide();\n              a(this.sorticon).show();\n              a(this.sorticon).css(\"visibility\", \"inherit\");\n\n              if (j != null) {\n                j.sortasc.hide();\n                j.sortdesc.show();\n              }\n\n              a(this.sorticon).removeClass(\"ascending\");\n              a(this.sorticon).removeClass(\"descending\");\n\n              if (b.sortdirection.ascending) {\n                a(this.sorticon).addClass(\"ascending\");\n              } else {\n                a(this.sorticon).addClass(\"descending\");\n              }\n            } else {\n              if (b.sortdirection.ascending) {\n                a(this.sortasc).show();\n                a(this.sortdesc).hide();\n\n                if (j != null) {\n                  j.sortasc.show();\n                  j.sortdesc.hide();\n                }\n              } else {\n                a(this.sortasc).hide();\n                a(this.sortdesc).show();\n\n                if (j != null) {\n                  j.sortasc.hide();\n                  j.sortdesc.show();\n                }\n              }\n            }\n\n            this.element.setAttribute(\"sort\", true);\n          }\n        });\n      }\n    },\n    getsortcolumns: function () {\n      var c = this;\n      var b = [];\n\n      for (var e in c.dataview.sortcache) {\n        if (e === \"data\") {\n          continue;\n        }\n\n        b.push({\n          dataField: e,\n          ascending: c.dataview.sortcache[e].direction\n        });\n      }\n\n      if (b.length === 0) {\n        for (var f in c.sortcolumns) {\n          var d = c.sortcolumns[f];\n\n          if (d !== null) {\n            b.push({\n              dataField: f,\n              ascending: d\n            });\n          }\n        }\n      }\n\n      return b;\n    },\n    getsortcolumn: function () {\n      if (this.sortcolumn != undefined) {\n        return this.sortcolumn;\n      }\n\n      return null;\n    },\n    removesort: function () {\n      this.sortby(null);\n\n      if (this.sortmode === \"many\") {\n        for (var b in this.sortcolumns) {\n          this.sortby(b, null);\n        }\n      }\n    },\n    sortby: function (d, h, g, f, b) {\n      if (this._loading && b !== false) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      if (d == null) {\n        h = null;\n        d = this.sortcolumn;\n      }\n\n      if (d != undefined) {\n        var c = this.that;\n\n        if (g == undefined && c.source.sortcomparer != null) {\n          g = c.source.sortcomparer;\n        }\n\n        if (h === undefined) {\n          h = true;\n        }\n\n        if (h == \"a\" || h == \"asc\" || h == \"ascending\" || h == true) {\n          var e = true;\n        } else {\n          var e = false;\n        }\n\n        if (h != null) {\n          c.sortdirection = {\n            ascending: e,\n            descending: !e\n          };\n        } else {\n          c.sortdirection = {\n            ascending: false,\n            descending: false\n          };\n        }\n\n        if (h != null) {\n          c.sortcolumn = d;\n        } else {\n          c.sortcolumn = null;\n        }\n\n        if (!c.sortcolumns) {\n          c.sortcolumns = [];\n        }\n\n        c.sortcolumns[d] = h;\n\n        if (c.source.sort || c.virtualmode) {\n          c.dataview.sortfield = d;\n\n          if (h == null) {\n            c.dataview.sortfielddirection = \"\";\n          } else {\n            c.dataview.sortfielddirection = e ? \"asc\" : \"desc\";\n          }\n\n          if (c.source.sort && !this._loading) {\n            c.source.sort(d, h, c.sortcolumns);\n\n            c._raiseEvent(6, {\n              sortinformation: c.getsortinformation()\n            });\n\n            return;\n          }\n        } else {\n          c.dataview.sortby(d, h, g);\n        }\n\n        if (f === false) {\n          return;\n        }\n\n        if (c.groupable && c.groups.length > 0) {\n          c._render(true, false, false);\n\n          if (c._updategroupheadersbounds && c.showgroupsheader) {\n            c._updategroupheadersbounds();\n          }\n\n          c._postrender(\"sort\");\n        } else {\n          if (c.pageable) {\n            c.dataview.updateview();\n          }\n\n          c._updaterowsproperties();\n\n          c.rendergridcontent(true);\n\n          c._postrender(\"sort\");\n        }\n\n        c._raiseEvent(6, {\n          sortinformation: c.getsortinformation()\n        });\n      }\n    },\n    _togglesort: function (f) {\n      var b = this.that;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (this.sortmode === \"many\") {\n        if (f.sortable && b.sortable) {\n          var e = b.getsortcolumns();\n          var g = null;\n\n          for (var d = 0; d < e.length; d++) {\n            var j = e[d];\n            var h = f.displayfield;\n\n            if (h === j.dataField) {\n              g = j.ascending;\n\n              if (b.sorttogglestates > 1) {\n                if (g == true) {\n                  g = false;\n                } else {\n                  g = null;\n                }\n              } else {\n                g = !g;\n              }\n\n              b.sortby(f.displayfield, g, null);\n              return;\n            }\n          }\n\n          b.sortby(f.displayfield, true, null);\n        }\n\n        return;\n      }\n\n      if (f.sortable && b.sortable) {\n        var c = b.getsortinformation();\n        var g = null;\n\n        if (c.sortcolumn != null && c.sortcolumn == f.displayfield) {\n          g = c.sortdirection.ascending;\n\n          if (b.sorttogglestates > 1) {\n            if (g == true) {\n              g = false;\n            } else {\n              g = null;\n            }\n          } else {\n            g = !g;\n          }\n        } else {\n          g = true;\n        }\n\n        b.sortby(f.displayfield, g, null);\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}