{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _updatefilterrowui: function (f) {\n      var m = this.columns.records.length;\n      var e = 0;\n      var l = this;\n\n      if (!this.filterrow) {\n        return;\n      }\n\n      for (var i = 0; i < m; i++) {\n        var g = this.columns.records[i];\n        var c = parseInt(g.width);\n\n        if (c < g.minwidth) {\n          c = g.minwidth;\n        }\n\n        if (c > g.maxwidth) {\n          c = g.maxwidth;\n        }\n\n        var k = a(this.filterrow[0].cells[i]);\n        k.css(\"left\", e);\n        var h = true;\n\n        if (k.width() == c) {\n          h = false;\n        }\n\n        if (f) {\n          h = true;\n        }\n\n        k.width(c);\n        k[0].left = e;\n\n        if (g.element) {\n          k[0].style.width = g.element.style.width;\n          k[0].style.left = g.element.style.left;\n        }\n\n        if (!(g.hidden && g.hideable)) {\n          e += c;\n        } else {\n          k.css(\"display\", \"none\");\n        }\n\n        if (!h) {\n          continue;\n        }\n\n        if (g.createfilterwidget && g.filtertype == \"custom\") {\n          g.createfilterwidget(g, k);\n        } else {\n          if (g.filterable) {\n            var d = function (n, o) {\n              var j = a(o.children()[0]);\n\n              if (j[0]) {\n                j[0].style.width = c - 8 + \"px\";\n\n                if (a.jqx.browser.msie) {\n                  j[0].style.width = c - 16 + \"px\";\n                }\n              }\n\n              j.attr(\"disabled\", n.disabled);\n            };\n\n            switch (g.filtertype) {\n              case \"number\":\n              case \"input\":\n                a(k.children()[0]).width(c);\n                k.find(\"input\")[0].style.width = c - 30 + \"px\";\n\n                if (a.jqx.browser.msie) {\n                  k.find(\"input\")[0].style.width = c - 36 + \"px\";\n                }\n\n                k.find(\"input\").attr(\"disabled\", l.disabled);\n                a(k.find(\".jqx-dropdownlist-state-normal\")).jqxDropDownList({\n                  theme: l.theme,\n                  disabled: l.disabled\n                });\n                break;\n\n              case \"date\":\n              case \"range\":\n                if (this.host.jqxDateTimeInput) {\n                  a(k.children()[0]).jqxDateTimeInput({\n                    theme: l.theme,\n                    disabled: l.disabled,\n                    width: c - 10\n                  });\n                } else {\n                  d(this, k);\n                }\n\n                break;\n\n              case \"textbox\":\n              case \"default\":\n                d(this, k);\n                break;\n\n              case \"list\":\n              case \"checkedlist\":\n                if (this.host.jqxDropDownList) {\n                  a(k.children()[0]).jqxDropDownList({\n                    theme: l.theme,\n                    disabled: l.disabled,\n                    width: c - 10\n                  });\n                } else {\n                  d(this, k);\n                }\n\n                break;\n\n              case \"bool\":\n              case \"boolean\":\n                if (!this.host.jqxCheckBox) {\n                  d(this, k);\n                } else {\n                  a(k.children()[0]).jqxCheckBox({\n                    theme: l.theme,\n                    disabled: l.disabled\n                  });\n                }\n\n                break;\n            }\n          }\n        }\n      }\n\n      var b = a(this.filterrow.children()[0]);\n      b.width(parseInt(e) + 2);\n      b.height(this.filterrowheight);\n    },\n    clearfilterrow: function (d) {\n      this._disablefilterrow = true;\n\n      if (!this.columns.records) {\n        return;\n      }\n\n      var m = this.columns.records.length;\n      var e = 0;\n\n      for (var i = 0; i < m; i++) {\n        var f = this.columns.records[i];\n        var l = a(this.filterrow[0].cells[i]);\n\n        if (typeof d == \"string\") {\n          if (f.displayfield != d) {\n            continue;\n          }\n        }\n\n        if (f.filterable) {\n          var c = function (o, p) {\n            var j = a(p.children()[0]);\n            j.val(\"\");\n\n            if (j[0]) {\n              o[\"_oldWriteText\" + j[0].id] = \"\";\n            }\n          };\n\n          switch (f.filtertype) {\n            case \"number\":\n            case \"input\":\n              l.find(\"input\").val(\"\");\n\n              if (this.host.jqxDropDownList) {\n                var k = a(a(a(l).children()[0]).children()[1]);\n                k.jqxDropDownList(\"clearSelection\");\n                var g = 0;\n\n                if (g == 0) {\n                  var b = this._getfiltersbytype(f.filtertype == \"number\" ? \"number\" : \"string\");\n\n                  var n = new a.jqx.filter();\n                  var h = n.getoperatorsbyfiltertype(f.filtertype == \"number\" ? \"numberfilter\" : \"stringfilter\");\n\n                  if (f.filtercondition != null) {\n                    g = h.indexOf(f.filtercondition.toUpperCase());\n\n                    if (g == -1) {\n                      g = f.filtertype == \"number\" ? 0 : 2;\n                    }\n                  } else {\n                    g = f.filtertype == \"number\" ? 0 : 2;\n                  }\n                }\n\n                k.jqxDropDownList({\n                  selectedIndex: g\n                });\n                k.jqxDropDownList(\"ensureVisible\", g);\n              }\n\n              break;\n\n            case \"date\":\n            case \"range\":\n              if (this.host.jqxDateTimeInput) {\n                a(l.children()[0]).jqxDateTimeInput(\"setDate\", null);\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"textbox\":\n            case \"default\":\n              c(this, l);\n              break;\n\n            case \"list\":\n              if (this.host.jqxDropDownList) {\n                a(l.children()[0]).jqxDropDownList(\"clearSelection\");\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"checkedlist\":\n              if (this.host.jqxDropDownList) {\n                a(l.children()[0]).jqxDropDownList(\"checkAll\", false);\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"bool\":\n            case \"boolean\":\n              if (!this.host.jqxCheckBox) {\n                c(this, l);\n              } else {\n                a(l.children()[0]).jqxCheckBox({\n                  checked: null\n                });\n              }\n\n              break;\n          }\n        }\n      }\n\n      this._disablefilterrow = false;\n    },\n    _applyfilterfromfilterrow: function () {\n      if (this._disablefilterrow == true) {\n        return;\n      }\n\n      if (this.disabled) {\n        return;\n      }\n\n      var A = this.columns.records.length;\n      var E = this.that;\n\n      for (var u = 0; u < A; u++) {\n        var l = new a.jqx.filter();\n        var v = this.columns.records[u];\n\n        if (!v.filterable) {\n          continue;\n        }\n\n        if (v.datafield === null) {\n          continue;\n        }\n\n        var f = E._getcolumntypebydatafield(v);\n\n        var d = E._getfiltertype(f);\n\n        var m = 1;\n        var F = true;\n        var e = v.filtertype;\n\n        var C = function (j, M, J) {\n          var i = true;\n\n          if (j._filterwidget) {\n            var H = j._filterwidget.val();\n\n            if (H != \"\") {\n              var K = \"equal\";\n\n              if (M == \"stringfilter\") {\n                var K = \"contains\";\n              }\n\n              if (M == \"numericfilter\") {\n                if (E.gridlocalization.decimalseparator == \",\") {\n                  if (H.indexOf(E.gridlocalization.decimalseparator) >= 0) {\n                    H = H.replace(E.gridlocalization.decimalseparator, \".\");\n                  }\n                }\n              }\n\n              if (M != \"stringfilter\") {\n                var L = 0;\n\n                if (H.indexOf(\">\") != -1) {\n                  K = \"greater_than\";\n                  L = 1;\n                }\n\n                if (H.indexOf(\"<\") != -1) {\n                  K = \"less_than\";\n                  L = 1;\n                }\n\n                if (H.indexOf(\"=\") != -1) {\n                  if (K == \"greater_than\") {\n                    K = \"greater_than_or_equal\";\n                    L = 2;\n                  } else {\n                    if (K == \"less_than\") {\n                      K = \"less_than_or_equal\";\n                      L = 2;\n                    } else {\n                      K = \"equal\";\n                      L = 1;\n                    }\n                  }\n                }\n\n                if (L != 0) {\n                  H = H.substring(L);\n\n                  if (H.length < 1) {\n                    return false;\n                  }\n                }\n              }\n\n              if (j.filtercondition != undefined) {\n                K = j.filtercondition;\n              }\n\n              if (M == \"datefilter\") {\n                var I = J.createfilter(M, H, K, null, j.cellsformat, E.gridlocalization);\n              } else {\n                var I = J.createfilter(M, H, K);\n              }\n\n              J.addfilter(m, I);\n            } else {\n              i = false;\n            }\n          }\n\n          return i;\n        };\n\n        switch (v.filtertype) {\n          case \"range\":\n          case \"date\":\n            if (v._filterwidget.jqxDateTimeInput) {\n              if (v.filtertype == \"range\") {\n                var q = v._filterwidget.jqxDateTimeInput(\"getRange\");\n\n                if (q != null && q.from != null && q.to != null) {\n                  var p = \"GREATER_THAN_OR_EQUAL\";\n                  var s = new Date(0);\n                  s.setHours(0);\n                  s.setMinutes(0);\n                  s.setFullYear(q.from.getFullYear(), q.from.getMonth(), q.from.getDate());\n                  var r = new Date(0);\n                  r.setHours(0);\n                  r.setMinutes(0);\n                  r.setFullYear(q.to.getFullYear(), q.to.getMonth(), q.to.getDate());\n                  r.setHours(q.to.getHours());\n                  r.setMinutes(q.to.getMinutes());\n                  r.setSeconds(q.to.getSeconds());\n                  var z = l.createfilter(d, s, p);\n                  l.addfilter(0, z);\n                  var c = \"LESS_THAN_OR_EQUAL\";\n                  var y = l.createfilter(d, r, c);\n                  l.addfilter(0, y);\n                } else {\n                  F = false;\n                }\n              } else {\n                var q = v._filterwidget.jqxDateTimeInput(\"getDate\");\n\n                if (q != null) {\n                  var s = new Date(0);\n                  s.setHours(0);\n                  s.setMinutes(0);\n                  s.setFullYear(q.getFullYear(), q.getMonth(), q.getDate());\n\n                  if (v._filterwidget.jqxDateTimeInput(\"showTimeButton\")) {\n                    s.setHours(q.getHours());\n                    s.setMinutes(q.getMinutes());\n                  }\n\n                  var p = \"EQUAL\";\n\n                  if (v.filtercondition != undefined) {\n                    p = v.filtercondition;\n                  }\n\n                  var z = l.createfilter(d, s, p);\n\n                  var h = v._filterwidget.jqxDateTimeInput(\"showTimeButton\");\n\n                  if (h) {\n                    z = l.createfilter(d, s, p, null, v.cellsformat);\n                  }\n\n                  l.addfilter(0, z);\n                } else {\n                  F = false;\n                }\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n\n          case \"input\":\n            if (v._filterwidget) {\n              var q = v._filterwidget.find(\"input\").val();\n\n              var k = v._filterwidget.find(\".filter\").jqxDropDownList(\"selectedIndex\");\n\n              var x = l.getoperatorsbyfiltertype(d)[k];\n\n              if (E.updatefilterconditions) {\n                var G = E.updatefilterconditions(d, l.getoperatorsbyfiltertype(d));\n\n                if (G != undefined) {\n                  l.setoperatorsbyfiltertype(d, G);\n                }\n\n                var x = l.getoperatorsbyfiltertype(d)[k];\n              }\n\n              var o = x == \"NULL\" || x == \"NOT_NULL\";\n              var t = x == \"EMPTY\" || x == \"NOT_EMPTY\";\n\n              if (q != undefined && q.length > 0 || o || t) {\n                z = l.createfilter(d, q, x, null, v.cellsformat, E.gridlocalization);\n                l.addfilter(0, z);\n              } else {\n                F = false;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"number\":\n            if (v._filterwidget) {\n              var q = v._filterwidget.find(\"input\").val();\n\n              if (E.gridlocalization.decimalseparator == \",\") {\n                if (q.indexOf(E.gridlocalization.decimalseparator) >= 0) {\n                  q = q.replace(E.gridlocalization.decimalseparator, \".\");\n                }\n              }\n\n              var k = v._filterwidget.find(\".filter\").jqxDropDownList(\"selectedIndex\");\n\n              var x = l.getoperatorsbyfiltertype(d)[k];\n\n              if (E.updatefilterconditions) {\n                var G = E.updatefilterconditions(d, l.getoperatorsbyfiltertype(d));\n\n                if (G != undefined) {\n                  l.setoperatorsbyfiltertype(d, G);\n                }\n\n                var x = l.getoperatorsbyfiltertype(d)[k];\n              }\n\n              var o = x == \"NULL\" || x == \"NOT_NULL\";\n              var t = x == \"EMPTY\" || x == \"NOT_EMPTY\";\n\n              if (q != undefined && q.length > 0 || o || t) {\n                z = l.createfilter(d, new Number(q), x, null, v.cellsformat, E.gridlocalization);\n                l.addfilter(0, z);\n              } else {\n                F = false;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"textbox\":\n          case \"default\":\n            F = C(v, d, l);\n            break;\n\n          case \"bool\":\n          case \"boolean\":\n            if (v._filterwidget.jqxCheckBox) {\n              var q = v._filterwidget.jqxCheckBox(\"checked\");\n\n              if (q != null) {\n                var p = \"equal\";\n                var n = l.createfilter(d, q, p);\n                l.addfilter(m, n);\n              } else {\n                F = false;\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n\n          case \"list\":\n            var g = v._filterwidget.jqxDropDownList(\"listBox\");\n\n            if (g.selectedIndex > 0) {\n              var b = g.getItem(g.selectedIndex);\n              var q = b.label;\n              var B = b.value;\n              var p = \"equal\";\n\n              if (q === \"\") {\n                p = \"NULL\";\n              }\n\n              var n = l.createfilter(d, q, p);\n              l.addfilter(m, n);\n\n              if (B !== q) {\n                n.data = B;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"checkedlist\":\n            if (v._filterwidget.jqxDropDownList) {\n              var g = v._filterwidget.jqxDropDownList(\"listBox\");\n\n              var D = g.getCheckedItems();\n\n              if (D.length == 0) {\n                for (var w = 1; w < g.items.length; w++) {\n                  var q = g.items[w].label;\n                  var B = g.items[w].value;\n                  var p = \"not_equal\";\n\n                  if (q === \"\") {\n                    p = \"NOT_NULL\";\n                  }\n\n                  var n = l.createfilter(d, q, p);\n\n                  if (B !== q) {\n                    n.data = B;\n                  }\n\n                  l.addfilter(0, n);\n                }\n\n                F = true;\n              } else {\n                if (D.length != g.items.length) {\n                  for (var w = 0; w < D.length; w++) {\n                    var q = D[w].label;\n                    var B = D[w].value;\n                    var p = \"equal\";\n\n                    if (q === \"\") {\n                      p = \"NULL\";\n                    }\n\n                    var n = l.createfilter(d, q, p);\n\n                    if (B !== q) {\n                      n.data = B;\n                    }\n\n                    l.addfilter(m, n);\n                  }\n                } else {\n                  F = false;\n                }\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n        }\n\n        if (!this._loading) {\n          if (F) {\n            this.addfilter(v.displayfield, l, false);\n          } else {\n            this.removefilter(v.displayfield, false);\n          }\n        }\n      }\n\n      if (!this._loading) {\n        this.applyfilters(\"filterrow\");\n      }\n    },\n    _updatefilterrow: function () {\n      var b = a('<div style=\"position: relative;\" id=\"row00' + this.element.id + '\"></div>');\n      var f = 0;\n      var o = this.columns.records.length;\n      var m = this.toThemeProperty(\"jqx-grid-cell\");\n      m += \" \" + this.toThemeProperty(\"jqx-grid-cell-pinned\");\n      m += \" \" + this.toThemeProperty(\"jqx-grid-cell-filter-row\");\n      var r = o + 10;\n      var s = new Array();\n      var n = this.that;\n      this.filterrow[0].cells = s;\n      b.height(this.filterrowheight);\n      this.filterrow.children().detach();\n      this.filterrow.append(b);\n\n      if (!this._filterrowcache) {\n        this._filterrowcache = new Array();\n      }\n\n      this._initcolumntypes();\n\n      var g = false;\n      var d = new Array();\n      var q = document.createDocumentFragment();\n\n      for (var h = 0; h < o; h++) {\n        var e = this.columns.records[h];\n        var c = e.width;\n\n        if (c < e.minwidth) {\n          c = e.minwidth;\n        }\n\n        if (c > e.maxwidth) {\n          c = e.maxwidth;\n        }\n\n        var l = document.createElement(\"div\");\n        l.style.overflow = \"hidden\";\n        l.style.position = \"absolute\";\n        l.style.height = \"100%\";\n        l.className = m;\n        l = a(l);\n        q.appendChild(l[0]);\n        l[0].style.left = f + \"px\";\n\n        if (this.rtl) {\n          l.css(\"z-index\", r++);\n          l.css(\"border-left-width\", \"1px\");\n        } else {\n          l.css(\"z-index\", r--);\n        }\n\n        if (c == \"auto\") {\n          c = 0;\n        }\n\n        l[0].style.width = parseFloat(c) + \"px\";\n        l[0].left = f;\n\n        if (!(e.hidden && e.hideable)) {\n          f += c;\n        } else {\n          l.css(\"display\", \"none\");\n        }\n\n        s[s.length] = l[0];\n        var k = true;\n\n        if (!this.rtl) {\n          if (this.groupable) {\n            var p = this.showrowdetailscolumn && this.rowdetails ? 1 : 0;\n\n            if (this.groups.length + p > h) {\n              k = false;\n            }\n          }\n\n          if (this.showrowdetailscolumn && this.rowdetails && h == 0) {\n            k = false;\n          }\n        } else {\n          if (this.groupable) {\n            var p = this.showrowdetailscolumn && this.rowdetails ? 1 : 0;\n\n            if (this.groups.length + p + h > o - 1) {\n              k = false;\n            }\n          }\n\n          if (this.showrowdetailscolumn && this.rowdetails && h == o - 1) {\n            k = false;\n          }\n        }\n\n        if (k) {\n          if (e.filtertype == \"custom\" && e.createfilterwidget) {\n            var i = function () {\n              n._applyfilterfromfilterrow();\n            };\n\n            e.createfilterwidget(e, l, i);\n          } else {\n            if (e.filterable) {\n              if (this._filterrowcache[e.datafield]) {\n                g = true;\n                l.append(this._filterrowcache[e.datafield]);\n                e._filterwidget = this._filterrowcache[e.datafield];\n              } else {\n                this._addfilterwidget(e, l, c);\n\n                d[e.datafield] = e._filterwidget;\n              }\n            }\n          }\n        }\n      }\n\n      b[0].appendChild(q);\n      this._filterrowcache = d;\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n        b.css(\"z-index\", r--);\n      }\n\n      b.width(parseFloat(f) + 2);\n      this.filterrow.addClass(m);\n      this.filterrow.css(\"border-top-width\", \"1px\");\n      this.filterrow.css(\"border-right-width\", \"0px\");\n\n      if (g) {\n        this._updatefilterrowui(true);\n      }\n    },\n    _addfilterwidget: function (C, d, A) {\n      var H = this.that;\n      var z = \"\";\n      var E = \"\";\n\n      for (var F = 0; F < H.dataview.filters.length; F++) {\n        var x = H.dataview.filters[F];\n\n        if (x.datafield && x.datafield == C.datafield) {\n          var F = x.filter.getfilters()[0];\n          z = F.value;\n\n          if (C.filtertype === \"range\") {\n            z = {\n              from: z,\n              to: x.filter.getfilters()[1].value\n            };\n          }\n\n          E = F.condition;\n          C.filtercondition = E;\n          break;\n        }\n      }\n\n      var g = function (I, J) {\n        var f = a('<input autocomplete=\"off\" type=\"textarea\"/>');\n        f.attr(\"tabindex\", 5 + C.visibleindex);\n        f[0].id = a.jqx.utilities.createId();\n        f.addClass(I.toThemeProperty(\"jqx-widget\"));\n        f.addClass(I.toThemeProperty(\"jqx-filter-input jqx-input jqx-input-widget\"));\n        f.addClass(I.toThemeProperty(\"jqx-rc-all\"));\n        f.addClass(I.toThemeProperty(\"jqx-widget-content\"));\n\n        if (I.rtl) {\n          f.css(\"direction\", \"rtl\");\n        }\n\n        if (I.disabled) {\n          f.attr(\"disabled\", true);\n        }\n\n        f.attr(\"disabled\", false);\n        f.appendTo(J);\n        f.css(\"margin\", \"4px\");\n        f.width(A - 8);\n        f.height(I.filterrowheight - 9);\n\n        if (C.createfilterwidget) {\n          C.createfilterwidget(C, J, f);\n        }\n\n        C._filterwidget = f;\n        f.focus(function () {\n          I.content[0].scrollLeft = 0;\n          setTimeout(function () {\n            I.content[0].scrollLeft = 0;\n          }, 10);\n          I.focusedfilter = f;\n          f.addClass(I.toThemeProperty(\"jqx-fill-state-focus\"));\n          return false;\n        });\n        f.blur(function () {\n          f.removeClass(I.toThemeProperty(\"jqx-fill-state-focus\"));\n        });\n        f.keydown(function (K) {\n          if (K.keyCode == \"13\") {\n            I._applyfilterfromfilterrow();\n          }\n\n          if (f[0]._writeTimer) {\n            clearTimeout(f[0]._writeTimer);\n          }\n\n          f[0]._writeTimer = setTimeout(function () {\n            if (!I._loading) {\n              if (!I[\"_oldWriteText\" + f[0].id]) {\n                I[\"_oldWriteText\" + f[0].id] = \"\";\n              }\n\n              if (I[\"_oldWriteText\" + f[0].id].length > 0 && I[\"_oldWriteText\" + f[0].id] != f.val()) {\n                I._applyfilterfromfilterrow();\n\n                I[\"_oldWriteText\" + f[0].id] = f.val();\n              } else {\n                if (I[\"_oldWriteText\" + f[0].id].length == 0) {\n                  I._applyfilterfromfilterrow();\n\n                  I[\"_oldWriteText\" + f[0].id] = f.val();\n                }\n              }\n            }\n          }, C.filterdelay);\n          I.focusedfilter = f;\n        });\n        I.host.removeClass(\"jqx-disableselect\");\n        I.content.removeClass(\"jqx-disableselect\");\n        f.val(z);\n      };\n\n      if (C.datatype != null) {\n        if (C.filtertype == \"number\") {\n          if (C.datatype == \"string\" || C.datatype == \"date\" || C.datatype == \"bool\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n\n        if (C.filtertype == \"date\") {\n          if (C.datatype == \"string\" || C.datatype == \"number\" || C.datatype == \"bool\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n\n        if (C.filtertype == \"bool\") {\n          if (C.datatype == \"string\" || C.datatype == \"number\" || C.datatype == \"date\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n      }\n\n      switch (C.filtertype) {\n        case \"number\":\n        case \"input\":\n          var m = a(\"<div></div>\");\n          m.width(d.width());\n          m.height(this.filterrowheight);\n          d.append(m);\n          var A = d.width() - 21;\n\n          var s = function (J, K, f) {\n            var I = a('<input style=\"float: left;\" autocomplete=\"off\" type=\"textarea\"/>');\n\n            if (H.rtl) {\n              I.css(\"float\", \"right\");\n              I.css(\"direction\", \"rtl\");\n            }\n\n            I.attr(\"tabindex\", 5 + C.visibleindex);\n            I[0].id = a.jqx.utilities.createId();\n            I.addClass(H.toThemeProperty(\"jqx-widget jqx-input jqx-rc-all jqx-input-widget jqx-filter-input jqx-widget-content\"));\n            I.appendTo(J);\n            I.width(K - 10);\n\n            if (H.disabled) {\n              I.attr(\"disabled\", true);\n            }\n\n            I.attr(\"disabled\", false);\n            I[0].style.height = H.filterrowheight - 9 + \"px\";\n            I.css(\"margin\", \"4px\");\n            I.css(\"margin-right\", \"3px\");\n            I.focus(function () {\n              H.focusedfilter = I;\n              I.addClass(H.toThemeProperty(\"jqx-fill-state-focus\"));\n            });\n            I.blur(function () {\n              I.removeClass(H.toThemeProperty(\"jqx-fill-state-focus\"));\n            });\n            I.keydown(function (L) {\n              if (L.keyCode == \"13\") {\n                H._applyfilterfromfilterrow();\n              }\n\n              if (L.keyCode == \"9\") {\n                return;\n              }\n\n              if (I[0]._writeTimer) {\n                clearTimeout(I[0]._writeTimer);\n              }\n\n              I[0]._writeTimer = setTimeout(function () {\n                if (!H._loading) {\n                  if (H[\"_oldWriteText\" + I[0].id] != I.val()) {\n                    H._applyfilterfromfilterrow();\n\n                    H[\"_oldWriteText\" + I[0].id] = I.val();\n                  }\n                }\n              }, C.filterdelay);\n              H.focusedfilter = I;\n            });\n            I.val(z);\n            return I;\n          };\n\n          s(m, A);\n\n          var B = H._getfiltersbytype(C.filtertype == \"number\" ? \"number\" : \"string\");\n\n          var t = a(\"<div class='filter' style='float: left;'></div>\");\n          t.css(\"margin-top\", \"4px\");\n          t.appendTo(m);\n\n          if (H.rtl) {\n            t.css(\"float\", \"right\");\n          }\n\n          var h = 0;\n\n          if (C.filtercondition != null) {\n            var F = new a.jqx.filter();\n            var r = F.getoperatorsbyfiltertype(C.filtertype == \"number\" ? \"numericfilter\" : \"stringfilter\");\n            var e = r.indexOf(C.filtercondition.toUpperCase());\n\n            if (e != -1) {\n              h = e;\n            }\n          }\n\n          var D = 180;\n\n          if (C.filtertype == \"input\") {\n            D = 240;\n\n            if (h == 0) {\n              var e = B.indexOf(\"contains\") || 2;\n\n              if (e != -1 && C.filtercondition == null) {\n                h = e;\n              }\n            }\n          }\n\n          t.jqxDropDownList({\n            disabled: H.disabled,\n            touchMode: H.touchmode,\n            rtl: H.rtl,\n            dropDownHorizontalAlignment: \"right\",\n            enableBrowserBoundsDetection: true,\n            selectedIndex: h,\n            width: 20,\n            height: 27,\n            dropDownHeight: 150,\n            dropDownWidth: D,\n            source: B,\n            theme: H.theme\n          });\n          t.jqxDropDownList({\n            selectionRenderer: function (f) {\n              return \"\";\n            }\n          });\n          t.attr(\"tabindex\", 5 + C.visibleindex);\n          t.jqxDropDownList(\"setContent\", \"\");\n          t.find(\".jqx-dropdownlist-content\").hide();\n\n          if (C.createfilterwidget) {\n            C.createfilterwidget(C, d, m);\n          }\n\n          C._filterwidget = m;\n          var j = null;\n          this.addHandler(t, \"select\", function () {\n            var f = t.jqxDropDownList(\"getSelectedItem\").label;\n\n            if (C._filterwidget.find(\"input\").val().length > 0 && !H.refreshingfilter) {\n              H._applyfilterfromfilterrow();\n            }\n\n            if (C.filtertype == \"input\" && !H.refreshingfilter) {\n              H._applyfilterfromfilterrow();\n            } else {\n              if (C._filterwidget.find(\"input\").val().length == 0 && !H.refreshingfilter) {\n                if (j == \"null\" || j == \"not null\" || f == \"null\" || f == \"not null\") {\n                  H._applyfilterfromfilterrow();\n                }\n              }\n            }\n\n            j = f;\n          });\n          break;\n\n        case \"textbox\":\n        case \"default\":\n        default:\n          g(this, d);\n          break;\n\n        case \"none\":\n          break;\n\n        case \"date\":\n        case \"range\":\n          if (this.host.jqxDateTimeInput) {\n            var b = a(\"<div></div>\");\n            b.css(\"margin\", \"4px\");\n            b.css(\"margin-left\", \"5px\");\n            b.appendTo(d);\n            var n = {\n              calendar: this.gridlocalization,\n              todayString: this.gridlocalization.todaystring,\n              clearString: this.gridlocalization.clearstring\n            };\n            b.jqxDateTimeInput({\n              firstDayOfWeek: this.gridlocalization.firstDay,\n              readonly: true,\n              disabled: H.disabled,\n              localization: n,\n              rtl: H.rtl,\n              showFooter: true,\n              formatString: C.cellsformat,\n              selectionMode: C.filtertype,\n              value: null,\n              theme: this.theme,\n              width: A - 9,\n              height: this.filterrowheight - 9\n            });\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, b);\n            }\n\n            if (z && z.from) {\n              b.jqxDateTimeInput(\"setRange\", z.from, z.to);\n            } else {\n              if (z && z.toString().length > 1) {\n                b.val(z);\n              }\n            }\n\n            b.find(\"input\").attr(\"tabindex\", 5 + C.visibleindex);\n            C._filterwidget = b;\n            this.addHandler(b, \"valueChanged\", function (f) {\n              if (!H.refreshingfilter) {\n                H._applyfilterfromfilterrow();\n\n                H.focusedfilter = null;\n              }\n            });\n          } else {\n            g(this, d);\n          }\n\n          break;\n\n        case \"list\":\n        case \"checkedlist\":\n          if (this.host.jqxDropDownList) {\n            var q = this._getfilterdataadapter(C);\n\n            var l = false;\n            var t = a(\"<div></div>\");\n            t.css(\"margin\", \"4px\");\n            t.css(\"margin-left\", \"5px\");\n            var u = C.datafield;\n            var v = C.filtertype == \"checkedlist\" ? true : false;\n            var D = A < 150 ? 220 : \"auto\";\n            q.dataBind();\n            var p = q.records;\n            var k = p.length < 8 ? true : false;\n            l = k;\n            t.appendTo(d);\n            t.jqxDropDownList({\n              hint: false,\n              placeHolder: H.gridlocalization.filterchoosestring,\n              disabled: H.disabled,\n              touchMode: H.touchmode,\n              rtl: H.rtl,\n              checkboxes: v,\n              dropDownWidth: D,\n              source: q.records,\n              autoDropDownHeight: k,\n              theme: this.theme,\n              width: A - 9,\n              height: this.filterrowheight - 9,\n              displayMember: C.displayfield,\n              valueMember: u\n            });\n            t.attr(\"tabindex\", 5 + C.visibleindex);\n            t.attr(\"default-placeholder\", true);\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, t);\n            }\n\n            var c = t.jqxDropDownList(\"listBox\");\n\n            if (v) {\n              t.jqxDropDownList({\n                selectionRenderer: function () {\n                  var f = '<span class=\"' + H.toThemeProperty(\"jqx-item\") + '\" style=\"top: 4px; position: relative; color: inherit; border: none; background-color: transparent;\">' + H.gridlocalization.filterselectstring + \"</span>\";\n                  return f;\n                }\n              });\n              var y = a('<span style=\"top: 2px; position: relative; color: inherit; border: none; background-color: transparent;\">' + H.gridlocalization.filterselectstring + \"</span>\");\n              y.addClass(this.toThemeProperty(\"jqx-item\"));\n\n              if (c != undefined) {\n                if (!l) {\n                  c.host.height(200);\n                }\n\n                c.insertAt({\n                  label: H.gridlocalization.filterselectallstring\n                }, 0);\n                t.jqxDropDownList(\"setContent\", y);\n                var i = true;\n                var G = new Array();\n                c.checkAll(false);\n                H.addHandler(c.host, \"checkChange\", function (J) {\n                  t[0]._selectionChanged = true;\n\n                  if (!i) {\n                    return;\n                  }\n\n                  if (J.args.label != H.gridlocalization.filterselectallstring) {\n                    i = false;\n                    c.host.jqxListBox(\"checkIndex\", 0, true, false);\n                    var f = c.host.jqxListBox(\"getCheckedItems\");\n                    var I = c.host.jqxListBox(\"getItems\");\n\n                    if (f.length == 1) {\n                      c.host.jqxListBox(\"uncheckIndex\", 0, true, false);\n                    } else {\n                      if (I.length != f.length) {\n                        c.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                      }\n                    }\n\n                    i = true;\n                  } else {\n                    i = false;\n\n                    if (J.args.checked) {\n                      c.host.jqxListBox(\"checkAll\", false);\n                    } else {\n                      c.host.jqxListBox(\"uncheckAll\", false);\n                    }\n\n                    i = true;\n                  }\n                });\n              }\n            } else {\n              c.insertAt({\n                label: this.gridlocalization.filterchoosestring,\n                value: \"\"\n              }, 0);\n              t.jqxDropDownList({\n                selectedIndex: 0\n              });\n            }\n\n            C._filterwidget = t;\n            var o = t.jqxDropDownList(\"dropdownlistWrapper\");\n\n            if (C.filtertype == \"list\") {\n              this.addHandler(t, \"select\", function (f) {\n                if (!H.refreshingfilter) {\n                  if (f.args && f.args.type != \"none\") {\n                    H._applyfilterfromfilterrow();\n\n                    H.focusedfilter = null;\n                  }\n                }\n              });\n            } else {\n              this.addHandler(t, \"close\", function (f) {\n                if (t[0]._selectionChanged) {\n                  H._applyfilterfromfilterrow();\n\n                  H.focusedfilter = null;\n                  t[0]._selectionChanged = false;\n                }\n              });\n            }\n          } else {\n            g(this, d);\n          }\n\n          break;\n\n        case \"bool\":\n        case \"boolean\":\n          if (this.host.jqxCheckBox) {\n            var w = a('<div tabIndex=0 style=\"opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -9px; margin-left: -12px;\"></div>');\n            w.appendTo(d);\n            w.jqxCheckBox({\n              disabled: H.disabled,\n              enableContainerClick: false,\n              animationShowDelay: 0,\n              animationHideDelay: 0,\n              hasThreeStates: true,\n              theme: this.theme,\n              checked: null\n            });\n            w.attr(\"tabindex\", 5 + C.visibleindex);\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, w);\n            }\n\n            if (z === true || z == \"true\") {\n              w.jqxCheckBox({\n                checked: true\n              });\n            } else {\n              if (z === false || z == \"false\") {\n                w.jqxCheckBox({\n                  checked: false\n                });\n              }\n            }\n\n            C._filterwidget = w;\n            this.addHandler(w, \"change\", function (f) {\n              if (!H.refreshingfilter) {\n                if (f.args) {\n                  H.focusedfilter = null;\n\n                  H._applyfilterfromfilterrow();\n                }\n              }\n            });\n          } else {\n            g(this, d);\n          }\n\n          break;\n      }\n    },\n    _getfilterdataadapter: function (b) {\n      var c = this.source._source ? true : false;\n\n      if (!c) {\n        var f = new a.jqx.dataAdapter(this.source, {\n          autoBind: false,\n          uniqueDataFields: [b.displayfield],\n          autoSort: true,\n          autoSortField: b.displayfield,\n          async: false\n        });\n      } else {\n        var e = {\n          localdata: a.extend(true, {}, this.source.records),\n          datatype: this.source.datatype,\n          async: false\n        };\n        var d = this;\n        var f = new a.jqx.dataAdapter(e, {\n          autoBind: false,\n          autoSort: true,\n          autoSortField: b.displayfield,\n          async: false,\n          uniqueDataFields: [b.displayfield],\n          beforeLoadComplete: function (g) {\n            var l = new Array();\n\n            if (b.cellsformat) {\n              var k = d._getcolumntypebydatafield(b);\n\n              for (var h = 0; h < g.length; h++) {\n                l.push(g[h]);\n                var j = g[h][b.displayfield];\n                g[h][b.displayfield + \"JQValue\"] = j;\n\n                if (k === \"date\") {\n                  if (j != null) {\n                    g[h][b.displayfield] = f.formatDate(j, b.cellsformat, d.gridlocalization);\n                  } else {\n                    g[h][b.displayfield] = \"\";\n                  }\n                } else {\n                  if (k === \"number\" || k === \"float\" || k === \"int\") {\n                    if (j != null) {\n                      g[h][b.displayfield] = f.formatNumber(j, b.cellsformat, d.gridlocalization);\n                    } else {\n                      g[h][b.displayfield] = \"\";\n                    }\n                  }\n                }\n              }\n\n              return l;\n            } else {\n              return g;\n            }\n          }\n        });\n      }\n\n      if (b.filteritems && b.filteritems.length > 0) {\n        var e = {\n          localdata: b.filteritems,\n          datatype: this.source.datatype,\n          async: false\n        };\n        var f = new a.jqx.dataAdapter(e, {\n          autoBind: false,\n          async: false\n        });\n      } else {\n        if (b.filteritems) {\n          if (b.filteritems._source) {\n            b.filteritems._options.autoBind = false;\n            b.filteritems._options.async = false;\n            return b.filteritems;\n          } else {\n            if (a.isFunction(b.filteritems)) {\n              return b.filteritems();\n            }\n          }\n        }\n      }\n\n      return f;\n    },\n    refreshfilterrow: function () {\n      if (!this.showfilterrow) {\n        return;\n      }\n\n      this.refreshingfilter = true;\n\n      this._updatefilterrowui();\n\n      this._updatelistfilters(true, true);\n\n      var h = this.that;\n      var l = this.columns.records.length;\n\n      for (var d = 0; d < l; d++) {\n        var c = this.columns.records[d];\n\n        if (c.filterable) {\n          if (c.filter) {\n            var b = c.filter.getfilters();\n\n            if (b.length > 0) {\n              var k = b[0].value;\n              var e = c._filterwidget;\n\n              var f = c._filterwidget.parent();\n\n              if (e != null) {\n                switch (c.filtertype) {\n                  case \"number\":\n                    f.find(\"input\").val(k);\n\n                    if (this.host.jqxDropDownList) {\n                      var i = c.filter.getoperatorsbyfiltertype(\"numericfilter\");\n                      e.find(\".filter\").jqxDropDownList(\"selectIndex\", i.indexOf(b[0].condition));\n                    }\n\n                    break;\n\n                  case \"input\":\n                    f.find(\"input\").val(k);\n\n                    if (this.host.jqxDropDownList) {\n                      var i = c.filter.getoperatorsbyfiltertype(\"stringfilter\");\n                      e.find(\".filter\").jqxDropDownList(\"selectIndex\", i.indexOf(b[0].condition));\n                    }\n\n                    break;\n\n                  case \"date\":\n                  case \"range\":\n                    if (this.host.jqxDateTimeInput) {\n                      var k = c.filter.getfilterat(0).filtervalue;\n\n                      if (k != undefined) {\n                        if (c.filter.getfilterat(1)) {\n                          var g = c.filter.getfilterat(1).filtervalue;\n                        } else {\n                          g = k;\n                        }\n\n                        if (c.filtertype == \"range\") {\n                          a(f.children()[0]).jqxDateTimeInput(\"setRange\", new Date(k), new Date(g));\n                        } else {\n                          a(f.children()[0]).jqxDateTimeInput(\"setDate\", new Date(k));\n                        }\n                      }\n                    } else {\n                      e.val(k);\n                    }\n\n                    break;\n\n                  case \"textbox\":\n                  case \"default\":\n                    e.val(k);\n                    h[\"_oldWriteText\" + e[0].id] = k;\n                    break;\n\n                  case \"bool\":\n                  case \"boolean\":\n                    if (!this.host.jqxCheckBox) {\n                      e.val(k);\n                    } else {\n                      a(f.children()[0]).jqxCheckBox({\n                        checked: k\n                      });\n                    }\n\n                    break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.refreshingfilter = false;\n    },\n    _destroyedfilters: function () {\n      var g = this.that;\n      var b = this.columns.records.length;\n\n      for (var f = 0; f < b; f++) {\n        var c = this.columns.records[f];\n\n        if (c.filterable) {\n          var h = c._filterwidget;\n\n          if (c.filtertype == \"list\" || c.filtertype == \"checkedlist\") {\n            this.removeHandler(h, \"select\");\n            this.removeHandler(h, \"close\");\n            h.jqxDropDownList(\"destroy\");\n          } else {\n            if (c.filtertype == \"date\" || c.filtertype == \"range\") {\n              this.removeHandler(h, \"valueChanged\");\n              h.jqxDateTimeInput(\"destroy\");\n            } else {\n              if (c.filtertype == \"bool\") {\n                this.removeHandler(h, \"change\");\n                h.jqxCheckBox(\"destroy\");\n              } else {\n                if (c.filtertype == \"number\" || c.filtertype === \"input\") {\n                  var d = h.find(\".jqx-input\");\n                  this.removeHandler(d, \"keydown\");\n                  var e = a(h.children()[1]);\n                  e.jqxDropDownList(\"destroy\");\n                } else {\n                  this.removeHandler(h, \"keydown\");\n                }\n              }\n            }\n          }\n\n          h.remove();\n        }\n      }\n    },\n    _updatelistfilters: function (l, k) {\n      var v = this.that;\n      var t = this.columns.records.length;\n\n      for (var p = 0; p < t; p++) {\n        var q = this.columns.records[p];\n\n        if (q.filterable) {\n          if (q.filtertype == \"list\" || q.filtertype == \"checkedlist\") {\n            var h = q._filterwidget;\n\n            if (!l) {\n              if (q.filter == undefined) {\n                h.jqxDropDownList(\"renderSelection\");\n                continue;\n              }\n            } else {\n              var e = this._getfilterdataadapter(q);\n\n              h.jqxDropDownList({\n                source: e\n              });\n              var d = h.jqxDropDownList(\"getItems\");\n              var o = true;\n\n              if (d.length != e.records.length + 1) {\n                o = false;\n              }\n\n              if (o) {\n                for (var s = 1; s < d.length; s++) {\n                  if (d[s].label != e.records[s - 1][q.displayfield]) {\n                    o = false;\n                    break;\n                  }\n                }\n              }\n\n              if (o && !k) {\n                continue;\n              }\n            }\n\n            var m = q.filtertype == \"checkedlist\" ? true : false;\n            var d = h.jqxDropDownList(\"getItems\");\n            var b = h.jqxDropDownList(\"listBox\");\n            h.jqxDropDownList(\"dataBind\");\n\n            if (m) {\n              h.jqxDropDownList({\n                selectionRenderer: function () {\n                  return v.gridlocalization.filterselectstring;\n                }\n              });\n\n              if (b.getItem(this.gridlocalization.filterselectallstring) == null) {\n                b.insertAt({\n                  label: this.gridlocalization.filterselectallstring\n                }, 0);\n              }\n\n              var n = a('<span style=\"top: 2px; position: relative; color: inherit; border: none; background-color: transparent;\">' + this.gridlocalization.filterselectstring + \"</span>\");\n              n.addClass(this.toThemeProperty(\"jqx-item\"));\n              h.jqxDropDownList(\"setContent\", n);\n              b.checkAll(false);\n\n              if (q.filter) {\n                var g = q.filter.getfilters();\n\n                for (var s = 0; s < b.items.length; s++) {\n                  var f = b.items[s].label;\n                  var r = undefined;\n                  a.each(g, function () {\n                    var i;\n\n                    if (this.condition == \"NOT_EQUAL\") {\n                      if (f == this.value) {\n                        i = false;\n                      } else {\n                        i = true;\n                      }\n                    } else {\n                      if (this.condition == \"EQUAL\") {\n                        if (f == this.value) {\n                          i = true;\n                        } else {\n                          i = false;\n                        }\n                      }\n                    }\n\n                    if (r == undefined && i !== undefined) {\n                      r = i;\n                    } else {\n                      if (this.condition == \"EQUAL\") {\n                        r = r || i;\n                      } else {\n                        r = r && i;\n                      }\n                    }\n                  });\n\n                  if (r) {\n                    b.checkIndex(s, false, false);\n                  } else {\n                    b.uncheckIndex(s, false, false);\n                  }\n                }\n\n                b._updateCheckedItems();\n\n                var u = b.getCheckedItems().length;\n\n                if (b.items.length != u && u > 0) {\n                  b.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                }\n              }\n            } else {\n              if (b.getItem(this.gridlocalization.filterchoosestring) == null) {\n                b.insertAt({\n                  label: this.gridlocalization.filterchoosestring,\n                  value: \"\"\n                }, 0);\n              }\n\n              h.jqxDropDownList({\n                selectedIndex: 0\n              });\n\n              if (q.filter) {\n                var g = q.filter.getfilters();\n                var c = -1;\n\n                for (var s = 0; s < b.items.length; s++) {\n                  var f = b.items[s].label;\n                  a.each(g, function () {\n                    if (this.condition == \"NOT_EQUAL\") {\n                      return true;\n                    }\n\n                    if (f == this.value) {\n                      c = s;\n                      return false;\n                    }\n                  });\n                }\n\n                if (c != -1) {\n                  b.selectIndex(c);\n                }\n              }\n            }\n\n            if (d.length < 8) {\n              h.jqxDropDownList(\"autoDropDownHeight\", true);\n            } else {\n              h.jqxDropDownList(\"autoDropDownHeight\", false);\n            }\n          }\n        }\n      }\n    },\n    _renderfiltercolumn: function () {\n      var b = this.that;\n\n      if (this.filterable) {\n        if (!this.columns.records) {\n          return;\n        }\n\n        a.each(this.columns.records, function (d, e) {\n          var c = false;\n\n          if (b.autoshowfiltericon) {\n            if (this.filter) {\n              a(this.filtericon).show();\n              c = true;\n            } else {\n              a(this.filtericon).hide();\n            }\n          } else {\n            if (this.filterable) {\n              a(this.filtericon).show();\n              c = true;\n            }\n          }\n\n          this.element.removeAttribute(\"filter\");\n\n          if (c) {\n            this.element.setAttribute(\"filter\", true);\n          }\n\n          if (this.align == \"right\" && !this.renderer) {\n            if (this.element) {\n              if (!c) {\n                this.element.firstChild.firstChild.style.marginRight = \"2px\";\n              } else {\n                this.element.firstChild.firstChild.style.marginRight = \"18px\";\n              }\n            }\n          }\n        });\n      }\n    },\n    _initcolumntypes: function () {\n      if (this.columns && this.columns.records) {\n        var b = this.source._source.datafields;\n\n        if (b) {\n          for (var c = 0; c < this.columns.records.length; c++) {\n            var d = this.columns.records[c];\n\n            if (d.datatype) {\n              continue;\n            }\n\n            var e = \"\";\n            a.each(b, function () {\n              if (this.name == d.displayfield) {\n                if (this.type) {\n                  e = this.type;\n                }\n\n                return false;\n              }\n            });\n\n            if (e != \"\") {\n              d.datatype = e;\n            } else {\n              d.datatype = \"\";\n            }\n          }\n        }\n      }\n    },\n    _getcolumntypebydatafield: function (f) {\n      var g = this.that;\n      var e = \"string\";\n      var d = g.source.datafields || (g.source._source ? g.source._source.datafields : null);\n\n      if (d) {\n        var i = \"\";\n        a.each(d, function () {\n          if (this.name == f.displayfield) {\n            if (this.type) {\n              i = this.type;\n            }\n\n            return false;\n          }\n        });\n\n        if (i) {\n          return i;\n        }\n      }\n\n      if (f != null) {\n        if (this.dataview.cachedrecords == undefined) {\n          return e;\n        }\n\n        var b = null;\n\n        if (!this.virtualmode) {\n          if (this.dataview.cachedrecords.length == 0) {\n            return e;\n          }\n\n          b = this.dataview.cachedrecords[0][f.displayfield];\n\n          if (b != null && b.toString() == \"\") {\n            return \"string\";\n          }\n        } else {\n          a.each(this.dataview.cachedrecords, function () {\n            b = this[f.displayfield];\n            return false;\n          });\n        }\n\n        if (b != null) {\n          if (typeof b == \"boolean\") {\n            e = \"boolean\";\n          } else {\n            if (a.jqx.dataFormat.isNumber(b)) {\n              e = \"number\";\n            } else {\n              var h = new Date(b);\n\n              if (h.toString() == \"NaN\" || h.toString() == \"Invalid Date\") {\n                if (a.jqx.dataFormat) {\n                  h = a.jqx.dataFormat.tryparsedate(b);\n\n                  if (h != null) {\n                    if (h && h.getFullYear()) {\n                      if (h.getFullYear() == 1970 && h.getMonth() == 0 && h.getDate() == 1) {\n                        var c = new Number(b);\n\n                        if (!isNaN(c)) {\n                          return \"number\";\n                        }\n\n                        return \"string\";\n                      }\n                    }\n\n                    return \"date\";\n                  } else {\n                    e = \"string\";\n                  }\n                } else {\n                  e = \"string\";\n                }\n              } else {\n                e = \"date\";\n              }\n            }\n          }\n        }\n      }\n\n      return e;\n    },\n    _getfiltersbytype: function (b) {\n      var c = this.that;\n      var d = \"\";\n\n      switch (b) {\n        case \"number\":\n        case \"float\":\n        case \"int\":\n          d = c.gridlocalization.filternumericcomparisonoperators;\n          break;\n\n        case \"date\":\n          d = c.gridlocalization.filterdatecomparisonoperators;\n          break;\n\n        case \"boolean\":\n        case \"bool\":\n          d = c.gridlocalization.filterbooleancomparisonoperators;\n          break;\n\n        case \"string\":\n        default:\n          d = c.gridlocalization.filterstringcomparisonoperators;\n          break;\n      }\n\n      return d;\n    },\n    _getfiltertype: function (b) {\n      var c = \"stringfilter\";\n\n      switch (b) {\n        case \"number\":\n        case \"int\":\n        case \"float\":\n        case \"decimal\":\n          c = \"numericfilter\";\n          break;\n\n        case \"boolean\":\n        case \"bool\":\n          c = \"booleanfilter\";\n          break;\n\n        case \"date\":\n        case \"time\":\n        case \"range\":\n          c = \"datefilter\";\n          break;\n\n        case \"string\":\n        case \"input\":\n          c = \"stringfilter\";\n          break;\n      }\n\n      return c;\n    },\n    _buildfilter: function (r, l, F) {\n      var f = a(l).find(\".filter1\");\n      var G = a(l).find(\".filter2\");\n      var K = a(l).find(\".filter3\");\n      var k = a(l).find(\".filtertext1\" + r.element.id);\n      var j = a(l).find(\".filtertext2\" + r.element.id);\n      var A = k.val();\n      var z = j.val();\n\n      var M = r._getcolumntypebydatafield(F);\n\n      var t = r._getfiltersbytype(M);\n\n      var J = new a.jqx.filter();\n\n      var w = r._getfiltertype(M);\n\n      if (r.filtermode === \"default\" && F.filtertype !== \"list\" && F.filtertype !== \"checkedlist\") {\n        var E = f.jqxDropDownList(\"selectedIndex\");\n        var c = G.jqxDropDownList(\"selectedIndex\");\n        var D = K.jqxDropDownList(\"selectedIndex\");\n        var e = null;\n        var d = null;\n\n        if (r.updatefilterconditions) {\n          var p = r.updatefilterconditions(w, J.getoperatorsbyfiltertype(w));\n\n          if (p != undefined) {\n            J.setoperatorsbyfiltertype(w, p);\n          }\n        }\n\n        var q = false;\n        var L = J.getoperatorsbyfiltertype(w)[E];\n        var K = J.getoperatorsbyfiltertype(w)[D];\n        var v = L == \"NULL\" || L == \"NOT_NULL\";\n        var h = L == \"EMPTY\" || L == \"NOT_EMPTY\";\n\n        if (L == undefined) {\n          L = J.getoperatorsbyfiltertype(w)[0];\n        }\n\n        if (K == undefined) {\n          K = J.getoperatorsbyfiltertype(w)[0];\n        }\n\n        if (A.length > 0 || v || h) {\n          e = J.createfilter(w, A, L, null, F.cellsformat, r.gridlocalization);\n          J.addfilter(c, e);\n          q = true;\n        }\n\n        var u = K == \"NULL\" || K == \"NOT_NULL\";\n        var g = K == \"EMPTY\" || K == \"NOT_EMPTY\";\n\n        if (z.length > 0 || u || g) {\n          d = J.createfilter(w, z, K, null, F.cellsformat, r.gridlocalization);\n          J.addfilter(c, d);\n          q = true;\n        }\n\n        if (q) {\n          var C = F.displayfield;\n          this.addfilter(C, J, true);\n        } else {\n          this._clearfilter(r, l, F);\n        }\n      } else {\n        if (r.filtermode === \"excel\" || F.filtertype === \"list\" || F.filtertype === \"checkedlist\") {\n          var B = this;\n          var n = false;\n          var x = f.data().jqxListBox.instance;\n          var I = this.filtermode === \"excel\" || F.filtertype === \"checkedlist\";\n          var o = x.getCheckedItems();\n\n          if (!I) {\n            var o = x.getSelectedItems();\n          }\n\n          if (o.length == 0) {\n            for (var H = 1; H < x.items.length; H++) {\n              var m = x.items[H].value;\n\n              if (m === undefined) {\n                m = \"\";\n              }\n\n              var b = \"not_equal\";\n\n              if (m && m.indexOf) {\n                if (m.indexOf(\"|\") >= 0 || m.indexOf(\" AND \") >= 0 || m.indexOf(\" OR \") >= 0 || m.indexOf(\" and \") >= 0 || m.indexOf(\" or \") >= 0) {\n                  m = m.replace(\"|\", \"\");\n                  m = m.replace(\"AND\", \"\");\n                  m = m.replace(\"OR\", \"\");\n                  m = m.replace(\"and\", \"\");\n                  m = m.replace(\"or\", \"\");\n                  var b = \"equal\";\n                }\n              }\n\n              if (w == \"datefilter\") {\n                var y = J.createfilter(w, m, b, null, F.cellsformat, r.gridlocalization);\n              } else {\n                var y = J.createfilter(w, m, b, null);\n              }\n\n              J.addfilter(0, y);\n            }\n\n            n = true;\n          } else {\n            if (o.length != x.items.length) {\n              n = true;\n\n              for (var H = 0; H < o.length; H++) {\n                if (r.gridlocalization.filterselectallstring === o[H].value) {\n                  continue;\n                }\n\n                var m = o[H].value;\n\n                if (m === undefined) {\n                  m = \"\";\n                }\n\n                var b = \"equal\";\n\n                if (w == \"datefilter\") {\n                  var y = J.createfilter(w, m, b, null, F.cellsformat, r.gridlocalization);\n                } else {\n                  var y = J.createfilter(w, m, b, null);\n                }\n\n                var s = 1;\n                J.addfilter(s, y);\n              }\n            } else {\n              n = false;\n            }\n          }\n\n          if (n) {\n            var C = F.displayfield;\n            this.addfilter(C, J, true);\n          } else {\n            var C = F.displayfield;\n            this.removefilter(C, true);\n          }\n        }\n      }\n    },\n    _clearfilter: function (e, c, d) {\n      var b = d.displayfield;\n      this.removefilter(b, true);\n    },\n    addfilter: function (d, e, c) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      var f = this.getcolumn(d);\n\n      var b = this._getcolumn(d);\n\n      if (f == undefined || f == null) {\n        return;\n      }\n\n      f.filter = e;\n      b.filter = e;\n      this.dataview.addfilter(d, e);\n\n      if (c == true && c != undefined) {\n        this.applyfilters(\"add\");\n      }\n    },\n    removefilter: function (d, c) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      var e = this.getcolumn(d);\n\n      var b = this._getcolumn(d);\n\n      if (e == undefined || e == null) {\n        return;\n      }\n\n      if (e.filter == null) {\n        return;\n      }\n\n      this.dataview.removefilter(d, e.filter);\n      e.filter = null;\n      b.filter = null;\n\n      if (this.showfilterrow) {\n        this.clearfilterrow(d);\n      }\n\n      if (c == true || c !== false) {\n        this.applyfilters(\"remove\");\n      }\n    },\n    applyfilters: function (f) {\n      var c = false;\n\n      if (this.dataview.filters.length >= 0 && (this.virtualmode || !this.source.localdata)) {\n        if (this.source != null && this.source.filter) {\n          var g = -1;\n\n          if (this.pageable) {\n            g = this.dataview.pagenum;\n            this.dataview.pagenum = 0;\n          } else {\n            this.vScrollInstance.setPosition(0);\n            this.loadondemand = true;\n\n            this._renderrows(this.virtualsizeinfo);\n          }\n\n          if (this.pageable && this.virtualmode) {\n            this.dataview.pagenum = 0;\n          }\n\n          this.source.filter(this.dataview.filters, this.dataview.records, this.dataview.records.length);\n\n          if (this.pageable && !this.virtualmode) {\n            this.dataview.pagenum = g;\n          }\n        }\n      }\n\n      this._cellscache = new Array();\n\n      if (this.dataview.clearsortdata) {\n        this.dataview.clearsortdata();\n      }\n\n      if (!this.virtualmode) {\n        var b = this.selectedrowindexes;\n        var d = this.that;\n        this.dataview.refresh();\n\n        if (this.dataview.clearsortdata) {\n          if (this.sortcolumn && this.sortdirection) {\n            var e = this.sortdirection.ascending ? \"asc\" : \"desc\";\n\n            if (!this._loading) {\n              this.sortby(this.sortcolumn, e, null, false);\n            } else {\n              this.sortby(this.sortcolumn, e, null, false, false);\n            }\n          }\n        }\n      } else {\n        if (this.pageable) {\n          this.dataview.updateview();\n\n          if (this.gotopage) {\n            this.gotopage(0);\n          }\n        }\n\n        this.rendergridcontent(false, false);\n\n        if (this.showfilterrow) {\n          if (typeof f != \"string\" && a.isEmptyObject(f)) {\n            this.refreshfilterrow();\n          }\n        }\n\n        this._postrender(\"filter\");\n\n        this._raiseEvent(13, {\n          filters: this.dataview.filters\n        });\n\n        return;\n      }\n\n      if (this.pageable) {\n        this.dataview.updateview();\n\n        if (this.gotopage) {\n          this.gotopage(0);\n          this.updatepagerdetails();\n        }\n      }\n\n      this._updaterowsproperties();\n\n      if (!this.groupable || this.groupable && this.groups.length == 0) {\n        this._rowdetailscache = new Array();\n        this.virtualsizeinfo = null;\n        this._pagescache = new Array();\n\n        if (this.columns && this.columns.records && this.columns.records.length > 0 && !this.columns.records[0].filtericon) {\n          this.prerenderrequired = true;\n        }\n\n        this.rendergridcontent(true, false);\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n\n        if (this.showaggregates && this._updatecolumnsaggregates) {\n          this._updatecolumnsaggregates();\n        }\n\n        this._postrender(\"filter\");\n      } else {\n        this.collapseallgroups();\n        this._rowdetailscache = new Array();\n\n        this._render(true, true, false, false, false);\n\n        if (this.showfilterrow) {\n          this._updatefocusedfilter();\n        }\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n\n        this._postrender(\"filter\");\n      }\n\n      if (this.showfilterrow) {\n        if (typeof f != \"string\" && a.isEmptyObject(f)) {\n          this.refreshfilterrow();\n        }\n      }\n\n      this._raiseEvent(13, {\n        filters: this.dataview.filters\n      });\n    },\n    getfilterinformation: function () {\n      var d = new Array();\n\n      for (var b = 0; b < this.dataview.filters.length; b++) {\n        var c = this.getcolumn(this.dataview.filters[b].datafield);\n        d[b] = {\n          filter: this.dataview.filters[b].filter,\n          datafield: c.datafield,\n          displayfield: c.displayfield,\n          filtercolumn: c.datafield,\n          filtercolumntext: c.text\n        };\n      }\n\n      return d;\n    },\n    clearfilters: function (b) {\n      var d = this.that;\n\n      if (this.showfilterrow) {\n        this.clearfilterrow();\n      }\n\n      if (this.columns.records) {\n        var c = b == true || b !== false;\n        a.each(this.columns.records, function () {\n          d.removefilter(this.displayfield, !c);\n        });\n      }\n\n      if (b === false) {\n        return;\n      }\n\n      if (b == true || b !== false) {\n        this.applyfilters(\"clear\");\n      }\n    },\n    _destroyfilterpanel: function () {\n      var e = a(a.find(\"#filterclearbutton\" + this.element.id));\n      var d = a(a.find(\"#filterbutton\" + this.element.id));\n      var h = a(a.find(\"#filter1\" + this.element.id));\n      var c = a(a.find(\"#filter2\" + this.element.id));\n      var g = a(a.find(\"#filter3\" + this.element.id));\n      var f = a(a.find(\".filtertext1\" + this.element.id));\n      var b = a(a.find(\".filtertext2\" + this.element.id));\n\n      if (f.length > 0 && b.length > 0) {\n        f.removeClass();\n        b.removeClass();\n        f.remove();\n        b.remove();\n      }\n\n      if (e.length > 0) {\n        e.jqxButton(\"destroy\");\n        d.jqxButton(\"destroy\");\n        this.removeHandler(e, \"click\");\n        this.removeHandler(d, \"click\");\n      }\n\n      if (h.length > 0) {\n        h.jqxDropDownList(\"destroy\");\n      }\n\n      if (c.length > 0) {\n        c.jqxDropDownList(\"destroy\");\n      }\n\n      if (g.length > 0) {\n        g.jqxDropDownList(\"destroy\");\n      }\n\n      var h = a(a.find(\"#filter1\" + this.element.id + \"ex\"));\n      var c = a(a.find(\"#filter2\" + this.element.id + \"ex\"));\n      var g = a(a.find(\"#filter3\" + this.element.id + \"ex\"));\n\n      if (h.length > 0) {\n        h.jqxDropDownList(\"destroy\");\n      }\n\n      if (c.length > 0) {\n        c.jqxDropDownList(\"destroy\");\n      }\n\n      if (g.length > 0) {\n        g.jqxDropDownList(\"destroy\");\n      }\n    },\n    _updatefilterpanel: function (s, p, E) {\n      if (s == null || s == undefined) {\n        s = this;\n      }\n\n      var Q = s._getcolumntypebydatafield(E);\n\n      var u = s._getfiltersbytype(Q);\n\n      if (!s.host.jqxDropDownList) {\n        throw new Error(\"jqxGrid: Missing reference to jqxdropdownlist.js.\");\n        return;\n      }\n\n      s.filterpanel.detach();\n      s.excelfilterpanel.detach();\n\n      if (E.filterpanel) {\n        E.filterpanel.detach();\n      }\n\n      a(p).children().detach();\n      var k = a(s.menuitemsarray[6]);\n      a(k).css(\"height\", \"190px\");\n\n      if (E.createfilterpanel && !E.filterpanel) {\n        var K = a(\"<div class='filter' style='margin-left: 7px;'></div>\");\n        a(p).append(K);\n        E.createfilterpanel(E.displayfield, K);\n        E.filterpanel = K;\n      }\n\n      if (E.filtertype === \"list\" || E.filtertype === \"checkedlist\") {\n        a(p).append(s.excelfilterpanel);\n      } else {\n        if (E.filtertype !== \"custom\") {\n          a(p).append(s.filterpanel);\n        } else {\n          if (E.filterpanel) {\n            a(p).append(E.filterpanel);\n          }\n        }\n      }\n\n      var g = a(p);\n      var N = g.find(\"#filterclearbutton\" + s.element.id);\n      var l = g.find(\"#filterbutton\" + s.element.id);\n      var f = g.find(\".filter1\");\n      var m = g.find(\".filter2\");\n      var P = g.find(\".filter3\");\n      var j = g.find(\".filtertext1\" + s.element.id);\n      var h = g.find(\".filtertext2\" + s.element.id);\n\n      if (this._hasdatefilter && E.filtertype !== \"list\" && E.filtertype !== \"checkedlist\" && E.filtertype !== \"custom\") {\n        var e = j.parent();\n        var d = h.parent();\n        e.children().remove();\n        d.children().remove();\n\n        if (E.filtertype == \"date\") {\n          s._showwhere.text(s.gridlocalization.filtershowrowdatestring);\n\n          var b = a(\"<div class='filtertext1\" + s.element.id + \"' style=''></div>\");\n          e.append(b);\n\n          var n = function (c) {\n            var i = {\n              calendar: s.gridlocalization,\n              todayString: s.gridlocalization.todaystring,\n              clearString: s.gridlocalization.clearstring\n            };\n            c.jqxDateTimeInput({\n              disabled: s.disabled,\n              firstDayOfWeek: s.gridlocalization.firstDay,\n              localization: i,\n              rtl: s.rtl,\n              width: s._filterpanelwidth - 10,\n              height: 24,\n              value: null,\n              formatString: E.cellsformat,\n              theme: s.theme\n            });\n          };\n\n          n(b);\n          var b = a(\"<div class='filtertext2\" + s.element.id + \"' style=''></div>\");\n          d.append(b);\n          n(b);\n        } else {\n          s._showwhere.text(s.gridlocalization.filtershowrowstring);\n\n          var b = a(\"<input autocomplete='off' class='filtertext1\" + s.element.id + \"' style='box-sizing: content-box; height: 16px; padding: 3px;' type='text'></input>\");\n          e.append(b);\n\n          var n = function (c) {\n            c.addClass(s.toThemeProperty(\"jqx-input\"));\n            c.addClass(s.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n            c.addClass(s.toThemeProperty(\"jqx-rc-all\"));\n            c.width(s._filterpanelwidth - 18);\n          };\n\n          n(b);\n          var b = a(\"<input autocomplete='off' class='filtertext2\" + s.element.id + \"' style='box-sizing: content-box; height: 16px; padding: 3px;' type='text'></input>\");\n          d.append(b);\n          n(b);\n        }\n\n        var j = g.find(\".filtertext1\" + s.element.id);\n        var h = g.find(\".filtertext2\" + s.element.id);\n      }\n\n      if (E.filtertype != \"date\") {\n        j.val(\"\");\n        h.val(\"\");\n      } else {\n        j.val(null);\n        h.val(null);\n      }\n\n      this.removeHandler(l, \"click\");\n      this.addHandler(l, \"click\", function () {\n        s._buildfilter(s, p, E);\n\n        s._closemenu();\n      });\n      this.removeHandler(N, \"click\");\n      this.addHandler(N, \"click\", function () {\n        s._clearfilter(s, p, E);\n\n        s._closemenu();\n      });\n      this.removeHandler(l, \"keydown\");\n      this.addHandler(l, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          s._buildfilter(s, p, E);\n\n          s._closemenu();\n        }\n      });\n      this.removeHandler(N, \"keydown\");\n      this.addHandler(N, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          s._clearfilter(s, p, E);\n\n          s._closemenu();\n        }\n      });\n      this.removeHandler(j, \"keydown\");\n      this.addHandler(j, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          l.trigger(\"click\");\n        }\n\n        if (c.keyCode === 27) {\n          s._closemenu();\n        }\n      });\n      this.removeHandler(h, \"keydown\");\n      this.addHandler(h, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          l.trigger(\"click\");\n        }\n\n        if (c.keyCode === 27) {\n          s._closemenu();\n        }\n      });\n\n      if (this.filtermode === \"default\" && E.filtertype !== \"list\" && E.filtertype !== \"checkedlist\" && E.filtertype !== \"custom\") {\n        if (f.jqxDropDownList(\"source\") != u) {\n          f.jqxDropDownList({\n            enableBrowserBoundsDetection: false,\n            source: u\n          });\n          P.jqxDropDownList({\n            enableBrowserBoundsDetection: false,\n            source: u\n          });\n        }\n\n        if (Q == \"boolean\" || Q == \"bool\") {\n          f.jqxDropDownList({\n            autoDropDownHeight: true,\n            selectedIndex: 0\n          });\n          P.jqxDropDownList({\n            autoDropDownHeight: true,\n            selectedIndex: 0\n          });\n        } else {\n          var H = false;\n\n          if (u && u.length) {\n            if (u.length < 5) {\n              H = true;\n            }\n          }\n\n          f.jqxDropDownList({\n            autoDropDownHeight: H,\n            selectedIndex: 2\n          });\n          P.jqxDropDownList({\n            autoDropDownHeight: H,\n            selectedIndex: 2\n          });\n        }\n\n        m.jqxDropDownList({\n          selectedIndex: 0\n        });\n        var z = E.filter;\n        var M = new a.jqx.filter();\n        var x = \"\";\n\n        switch (Q) {\n          case \"number\":\n          case \"int\":\n          case \"float\":\n          case \"decimal\":\n            x = \"numericfilter\";\n            o = M.getoperatorsbyfiltertype(\"numericfilter\");\n            break;\n\n          case \"boolean\":\n          case \"bool\":\n            x = \"booleanfilter\";\n            o = M.getoperatorsbyfiltertype(\"booleanfilter\");\n            break;\n\n          case \"date\":\n          case \"time\":\n            x = \"datefilter\";\n            o = M.getoperatorsbyfiltertype(\"datefilter\");\n            break;\n\n          case \"string\":\n            x = \"stringfilter\";\n            o = M.getoperatorsbyfiltertype(\"stringfilter\");\n            break;\n        }\n\n        if (z != null) {\n          var e = z.getfilterat(0);\n          var d = z.getfilterat(1);\n          var I = z.getoperatorat(0);\n\n          if (s.updatefilterconditions) {\n            var o = [];\n            var r = s.updatefilterconditions(x, o);\n\n            if (r != undefined) {\n              for (var O = 0; O < r.length; O++) {\n                r[O] = r[O].toUpperCase();\n              }\n\n              z.setoperatorsbyfiltertype(x, r);\n              o = r;\n            }\n          }\n\n          var w = \"default\";\n\n          if (e != null) {\n            var D = o.indexOf(e.comparisonoperator);\n            var A = e.filtervalue;\n            j.val(A);\n            f.jqxDropDownList({\n              selectedIndex: D,\n              animationType: w\n            });\n          }\n\n          if (d != null) {\n            var C = o.indexOf(d.comparisonoperator);\n            var y = d.filtervalue;\n            h.val(y);\n            P.jqxDropDownList({\n              selectedIndex: C,\n              animationType: w\n            });\n          }\n\n          if (z.getoperatorat(0) == undefined) {\n            m.jqxDropDownList({\n              selectedIndex: 0,\n              animationType: w\n            });\n          } else {\n            if (z.getoperatorat(0) == \"and\" || z.getoperatorat(0) == 0) {\n              m.jqxDropDownList({\n                selectedIndex: 0\n              });\n            } else {\n              m.jqxDropDownList({\n                selectedIndex: 1\n              });\n            }\n          }\n        }\n\n        if (s.updatefilterpanel) {\n          s.updatefilterpanel(f, P, m, j, h, l, N, z, x, o);\n        }\n\n        if (!this._hasdatefilter || this._hasdatefilter && E.filtertype != \"date\") {\n          if (!this.touchdevice) {\n            j.focus();\n            setTimeout(function () {\n              j.focus();\n            }, 10);\n          }\n        }\n      } else {\n        if (this.filtermode === \"excel\" || E.filtertype === \"list\" || E.filtertype === \"checkedlist\") {\n          var v = s._getfilterdataadapter(E);\n\n          var x = s._getfiltertype(Q);\n\n          var L = this.filtermode === \"excel\" || E.filtertype === \"checkedlist\";\n\n          if (E.filtertype == \"date\") {\n            s._showwhere.text(s.gridlocalization.filtershowrowstring);\n          }\n\n          f.jqxListBox(\"focus\");\n          this.removeHandler(f, \"keyup\");\n          this.addHandler(f, \"keyup\", function (c) {\n            if (c.keyCode === 13) {\n              l.trigger(\"click\");\n            }\n\n            if (c.keyCode === 27) {\n              s._closemenu();\n            }\n          });\n\n          if (E.cellsformat) {\n            f.jqxListBox({\n              checkboxes: L,\n              displayMember: E.displayfield,\n              valueMember: E.displayfield + \"JQValue\",\n              source: v\n            });\n          } else {\n            f.jqxListBox({\n              checkboxes: L,\n              displayMember: E.displayfield,\n              valueMember: E.displayfield,\n              source: v\n            });\n          }\n\n          if (L) {\n            f.jqxListBox(\"insertAt\", {\n              label: s.gridlocalization.filterselectallstring\n            }, 0);\n            var F = f.data().jqxListBox.instance;\n            F.checkAll(false);\n            var B = this;\n\n            if (E.filter) {\n              F.uncheckAll(false);\n              var t = E.filter.getfilters();\n\n              for (var J = 0; J < F.items.length; J++) {\n                var G = F.items[J].value;\n                a.each(t, function () {\n                  if (this.condition == \"NOT_EQUAL\") {\n                    if (G != this.value) {\n                      F.uncheckIndex(J, false, false);\n                      return false;\n                    } else {\n                      if (G != null && this.value != null && G.toString() != this.value.toString()) {\n                        F.uncheckIndex(J, false, false);\n                        return false;\n                      }\n                    }\n                  } else {\n                    if (this.condition == \"EQUAL\") {\n                      if (G == this.value) {\n                        F.checkIndex(J, false, false);\n                        return false;\n                      } else {\n                        if (G != null && this.value != null && G.toString() == this.value.toString()) {\n                          F.checkIndex(J, false, false);\n                          return false;\n                        }\n                      }\n                    }\n                  }\n                });\n              }\n\n              F._updateCheckedItems();\n\n              var q = F.getCheckedItems().length;\n\n              if (F.items.length != q && q > 0) {\n                F.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n              }\n\n              if (q === F.items.length - 1) {\n                F.host.jqxListBox(\"checkIndex\", 0, true, false);\n              }\n            }\n          } else {\n            if (E.filter) {\n              var F = f.data().jqxListBox.instance;\n              F.clearSelection();\n              var t = E.filter.getfilters();\n\n              for (var J = 0; J < F.items.length; J++) {\n                var G = F.items[J].value;\n                a.each(t, function () {\n                  if (this.condition == \"NOT_EQUAL\") {\n                    if (G != this.value) {\n                      F.unselectIndex(J, false, false);\n                      return false;\n                    }\n                  } else {\n                    if (this.condition == \"EQUAL\") {\n                      if (G == this.value) {\n                        F.selectIndex(J, true, false);\n                        return false;\n                      }\n                    }\n                  }\n                });\n              }\n\n              F._renderItems();\n            }\n          }\n        }\n      }\n    },\n    _initfilterpanel: function (z, b, c, p, w) {\n      if (z == null || z == undefined) {\n        z = this;\n      }\n\n      b[0].innerHTML = \"\";\n      var t = a(\"<div class='filter' style='position: absolute; bottom: 3px; margin-left: 3px;'></div>\");\n      b.append(t);\n      var n = a(\"<div class='filter showwhere' style='height: 18px; margin-top: 3px; margin-bottom: 3px;'></div>\");\n      n.text(z.gridlocalization.filtershowrowstring);\n      this._showwhere = n;\n      var o = w ? \"ex\" : \"\";\n      var v = a(\"<div class='filter filter1' id='filter1\" + z.element.id + o + \"'></div>\");\n      var h = a(\"<div class='filter filter2' id='filter2\" + z.element.id + o + \"' style='margin-top: 3px; margin-bottom: 3px;'></div>\");\n      var s = a(\"<div class='filter filter3' id='filter3\" + z.element.id + o + \"'></div>\");\n\n      var e = z._getcolumntypebydatafield(c);\n\n      if (!v.jqxDropDownList) {\n        throw new Error(\"jqxGrid: jqxdropdownlist.js is not loaded.\");\n        return;\n      }\n\n      var q = z._getfiltersbytype(e);\n\n      this._hasdatefilter = false;\n      this._filterpanelwidth = p;\n\n      if (this.columns && this.columns.records) {\n        for (var u = 0; u < this.columns.records.length; u++) {\n          if (this.columns.records[u].filtertype == \"date\") {\n            this._hasdatefilter = true;\n            break;\n          }\n        }\n      } else {\n        if (this.columns && !this.columns.records) {\n          for (var u = 0; u < this.columns.length; u++) {\n            if (this.columns[u].filtertype == \"date\") {\n              this._hasdatefilter = true;\n              break;\n            }\n          }\n        }\n      }\n\n      var k = a(\"<div style='margin-top:3px;' class='filter'><input autocomplete='off' class='filtertext1\" + z.element.id + \"' style='padding: 3px; height: 17px; margin-top: 3px; margin-bottom: 3px;' type='text'></input></div>\");\n      var m = k.find(\"input\");\n      m.addClass(this.toThemeProperty(\"jqx-input\"));\n      m.addClass(this.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n      m.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      m.width(p - 18);\n      var l = a(\"<div style='margin-top:3px;' class='filter'><input autocomplete='off' class='filtertext2\" + z.element.id + \"' style='padding: 3px; height: 17px; margin-top: 3px;' type='text'></input></div>\");\n      var j = l.find(\"input\");\n      j.addClass(this.toThemeProperty(\"jqx-input\"));\n      j.addClass(this.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n      j.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      j.width(p - 18);\n\n      if (z.rtl) {\n        m.css(\"direction\", \"rtl\");\n        j.css(\"direction\", \"rtl\");\n      }\n\n      var g = a(\"<div class='filter' style='height: 25px; text-align:center; margin-top: 12px; margin-left:-2px;'></div>\");\n      var f = a('<span tabIndex=0 id=\"filterbutton' + z.element.id + '\" class=\"filterbutton\" style=\"padding: 4px 12px;\">' + z.gridlocalization.filterstring + \"</span>\");\n      g.append(f);\n      var x = a('<span tabIndex=0 id=\"filterclearbutton' + z.element.id + '\" class=\"filterclearbutton\" style=\"position: relative; left: 1px; padding: 4px 12px; margin-left: 7px;\">' + z.gridlocalization.filterclearstring + \"</span>\");\n      g.append(x);\n      f.jqxButton({\n        height: 20,\n        theme: z.theme\n      });\n      x.jqxButton({\n        height: 20,\n        theme: z.theme\n      });\n\n      var y = function (A) {\n        if (A) {\n          if (A.text().indexOf(\"case sensitive\") != -1) {\n            var i = A.text();\n            i = i.replace(\"case sensitive\", \"match case\");\n            A.text(i);\n          }\n\n          A.css(\"font-family\", z.host.css(\"font-family\"));\n          A.css(\"font-size\", z.host.css(\"font-size\"));\n          A.css(\"top\", \"2px\");\n          A.css(\"position\", \"relative\");\n          return A;\n        }\n\n        return \"\";\n      };\n\n      if (this.filtermode === \"default\" && !w) {\n        t.append(n);\n        t.append(v);\n        v.jqxDropDownList({\n          _checkForHiddenParent: false,\n          autoItemsHeight: true,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          selectedIndex: 2,\n          width: p - 10,\n          height: 24,\n          dropDownHeight: 150,\n          dropDownWidth: p - 10,\n          selectionRenderer: y,\n          source: q,\n          theme: z.theme\n        });\n        t.append(k);\n        var r = new Array();\n        r[0] = z.gridlocalization.filterandconditionstring;\n        r[1] = z.gridlocalization.filterorconditionstring;\n        h.jqxDropDownList({\n          _checkForHiddenParent: false,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          autoDropDownHeight: true,\n          selectedIndex: 0,\n          width: 60,\n          height: 24,\n          source: r,\n          selectionRenderer: y,\n          theme: z.theme\n        });\n        t.append(h);\n        s.jqxDropDownList({\n          _checkForHiddenParent: false,\n          autoItemsHeight: true,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          selectedIndex: 2,\n          width: p - 10,\n          height: 24,\n          dropDownHeight: 150,\n          dropDownWidth: p - 10,\n          selectionRenderer: y,\n          source: q,\n          theme: z.theme\n        });\n        t.append(s);\n        t.append(l);\n      } else {\n        if (this.filtermode === \"excel\" || w) {\n          t.append(n);\n          t.append(v);\n          v.attr(\"tabindex\", 0);\n          v.jqxListBox({\n            rtl: z.rtl,\n            _checkForHiddenParent: false,\n            checkboxes: true,\n            selectedIndex: 2,\n            width: p - 10,\n            height: 130,\n            theme: z.theme\n          });\n          var d = true;\n          z.addHandler(v, \"checkChange\", function (B) {\n            if (!d) {\n              return;\n            }\n\n            if (B.args.label != z.gridlocalization.filterselectallstring) {\n              d = false;\n              v.jqxListBox(\"checkIndex\", 0, true, false);\n              var i = v.jqxListBox(\"getCheckedItems\");\n              var A = v.jqxListBox(\"getItems\");\n\n              if (i.length == 1) {\n                v.jqxListBox(\"uncheckIndex\", 0, true, false);\n              } else {\n                if (A.length != i.length) {\n                  v.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                }\n              }\n\n              d = true;\n            } else {\n              d = false;\n\n              if (B.args.checked) {\n                v.jqxListBox(\"checkAll\", false);\n              } else {\n                v.jqxListBox(\"uncheckAll\", false);\n              }\n\n              d = true;\n            }\n          });\n        }\n      }\n\n      t.append(g);\n\n      if (z.updatefilterpanel) {\n        z.updatefilterpanel(v, s, h, k, l, f, x, null, null, q);\n      }\n    }\n  });\n})(jqxBaseFramework);\n\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _updatefilterrowui: function (f) {\n      var m = this.columns.records.length;\n      var e = 0;\n      var l = this;\n\n      if (!this.filterrow) {\n        return;\n      }\n\n      for (var i = 0; i < m; i++) {\n        var g = this.columns.records[i];\n        var c = parseInt(g.width);\n\n        if (c < g.minwidth) {\n          c = g.minwidth;\n        }\n\n        if (c > g.maxwidth) {\n          c = g.maxwidth;\n        }\n\n        var k = a(this.filterrow[0].cells[i]);\n        k.css(\"left\", e);\n        var h = true;\n\n        if (k.width() == c) {\n          h = false;\n        }\n\n        if (f) {\n          h = true;\n        }\n\n        k.width(c);\n        k[0].left = e;\n\n        if (g.element) {\n          k[0].style.width = g.element.style.width;\n          k[0].style.left = g.element.style.left;\n        }\n\n        if (!(g.hidden && g.hideable)) {\n          e += c;\n        } else {\n          k.css(\"display\", \"none\");\n        }\n\n        if (!h) {\n          continue;\n        }\n\n        if (g.createfilterwidget && g.filtertype == \"custom\") {\n          g.createfilterwidget(g, k);\n        } else {\n          if (g.filterable) {\n            var d = function (n, o) {\n              var j = a(o.children()[0]);\n\n              if (j[0]) {\n                j[0].style.width = c - 8 + \"px\";\n\n                if (a.jqx.browser.msie) {\n                  j[0].style.width = c - 16 + \"px\";\n                }\n              }\n\n              j.attr(\"disabled\", n.disabled);\n            };\n\n            switch (g.filtertype) {\n              case \"number\":\n              case \"input\":\n                a(k.children()[0]).width(c);\n                k.find(\"input\")[0].style.width = c - 30 + \"px\";\n\n                if (a.jqx.browser.msie) {\n                  k.find(\"input\")[0].style.width = c - 36 + \"px\";\n                }\n\n                k.find(\"input\").attr(\"disabled\", l.disabled);\n                a(k.find(\".jqx-dropdownlist-state-normal\")).jqxDropDownList({\n                  theme: l.theme,\n                  disabled: l.disabled\n                });\n                break;\n\n              case \"date\":\n              case \"range\":\n                if (this.host.jqxDateTimeInput) {\n                  a(k.children()[0]).jqxDateTimeInput({\n                    theme: l.theme,\n                    disabled: l.disabled,\n                    width: c - 10\n                  });\n                } else {\n                  d(this, k);\n                }\n\n                break;\n\n              case \"textbox\":\n              case \"default\":\n                d(this, k);\n                break;\n\n              case \"list\":\n              case \"checkedlist\":\n                if (this.host.jqxDropDownList) {\n                  a(k.children()[0]).jqxDropDownList({\n                    theme: l.theme,\n                    disabled: l.disabled,\n                    width: c - 10\n                  });\n                } else {\n                  d(this, k);\n                }\n\n                break;\n\n              case \"bool\":\n              case \"boolean\":\n                if (!this.host.jqxCheckBox) {\n                  d(this, k);\n                } else {\n                  a(k.children()[0]).jqxCheckBox({\n                    theme: l.theme,\n                    disabled: l.disabled\n                  });\n                }\n\n                break;\n            }\n          }\n        }\n      }\n\n      var b = a(this.filterrow.children()[0]);\n      b.width(parseInt(e) + 2);\n      b.height(this.filterrowheight);\n    },\n    clearfilterrow: function (d) {\n      this._disablefilterrow = true;\n\n      if (!this.columns.records) {\n        return;\n      }\n\n      var m = this.columns.records.length;\n      var e = 0;\n\n      for (var i = 0; i < m; i++) {\n        var f = this.columns.records[i];\n        var l = a(this.filterrow[0].cells[i]);\n\n        if (typeof d == \"string\") {\n          if (f.displayfield != d) {\n            continue;\n          }\n        }\n\n        if (f.filterable) {\n          var c = function (o, p) {\n            var j = a(p.children()[0]);\n            j.val(\"\");\n\n            if (j[0]) {\n              o[\"_oldWriteText\" + j[0].id] = \"\";\n            }\n          };\n\n          switch (f.filtertype) {\n            case \"number\":\n            case \"input\":\n              l.find(\"input\").val(\"\");\n\n              if (this.host.jqxDropDownList) {\n                var k = a(a(a(l).children()[0]).children()[1]);\n                k.jqxDropDownList(\"clearSelection\");\n                var g = 0;\n\n                if (g == 0) {\n                  var b = this._getfiltersbytype(f.filtertype == \"number\" ? \"number\" : \"string\");\n\n                  var n = new a.jqx.filter();\n                  var h = n.getoperatorsbyfiltertype(f.filtertype == \"number\" ? \"numberfilter\" : \"stringfilter\");\n\n                  if (f.filtercondition != null) {\n                    g = h.indexOf(f.filtercondition.toUpperCase());\n\n                    if (g == -1) {\n                      g = f.filtertype == \"number\" ? 0 : 2;\n                    }\n                  } else {\n                    g = f.filtertype == \"number\" ? 0 : 2;\n                  }\n                }\n\n                k.jqxDropDownList({\n                  selectedIndex: g\n                });\n                k.jqxDropDownList(\"ensureVisible\", g);\n              }\n\n              break;\n\n            case \"date\":\n            case \"range\":\n              if (this.host.jqxDateTimeInput) {\n                a(l.children()[0]).jqxDateTimeInput(\"setDate\", null);\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"textbox\":\n            case \"default\":\n              c(this, l);\n              break;\n\n            case \"list\":\n              if (this.host.jqxDropDownList) {\n                a(l.children()[0]).jqxDropDownList(\"clearSelection\");\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"checkedlist\":\n              if (this.host.jqxDropDownList) {\n                a(l.children()[0]).jqxDropDownList(\"checkAll\", false);\n              } else {\n                c(this, l);\n              }\n\n              break;\n\n            case \"bool\":\n            case \"boolean\":\n              if (!this.host.jqxCheckBox) {\n                c(this, l);\n              } else {\n                a(l.children()[0]).jqxCheckBox({\n                  checked: null\n                });\n              }\n\n              break;\n          }\n        }\n      }\n\n      this._disablefilterrow = false;\n    },\n    _applyfilterfromfilterrow: function () {\n      if (this._disablefilterrow == true) {\n        return;\n      }\n\n      if (this.disabled) {\n        return;\n      }\n\n      var A = this.columns.records.length;\n      var E = this.that;\n\n      for (var u = 0; u < A; u++) {\n        var l = new a.jqx.filter();\n        var v = this.columns.records[u];\n\n        if (!v.filterable) {\n          continue;\n        }\n\n        if (v.datafield === null) {\n          continue;\n        }\n\n        var f = E._getcolumntypebydatafield(v);\n\n        var d = E._getfiltertype(f);\n\n        var m = 1;\n        var F = true;\n        var e = v.filtertype;\n\n        var C = function (j, M, J) {\n          var i = true;\n\n          if (j._filterwidget) {\n            var H = j._filterwidget.val();\n\n            if (H != \"\") {\n              var K = \"equal\";\n\n              if (M == \"stringfilter\") {\n                var K = \"contains\";\n              }\n\n              if (M == \"numericfilter\") {\n                if (E.gridlocalization.decimalseparator == \",\") {\n                  if (H.indexOf(E.gridlocalization.decimalseparator) >= 0) {\n                    H = H.replace(E.gridlocalization.decimalseparator, \".\");\n                  }\n                }\n              }\n\n              if (M != \"stringfilter\") {\n                var L = 0;\n\n                if (H.indexOf(\">\") != -1) {\n                  K = \"greater_than\";\n                  L = 1;\n                }\n\n                if (H.indexOf(\"<\") != -1) {\n                  K = \"less_than\";\n                  L = 1;\n                }\n\n                if (H.indexOf(\"=\") != -1) {\n                  if (K == \"greater_than\") {\n                    K = \"greater_than_or_equal\";\n                    L = 2;\n                  } else {\n                    if (K == \"less_than\") {\n                      K = \"less_than_or_equal\";\n                      L = 2;\n                    } else {\n                      K = \"equal\";\n                      L = 1;\n                    }\n                  }\n                }\n\n                if (L != 0) {\n                  H = H.substring(L);\n\n                  if (H.length < 1) {\n                    return false;\n                  }\n                }\n              }\n\n              if (j.filtercondition != undefined) {\n                K = j.filtercondition;\n              }\n\n              if (M == \"datefilter\") {\n                var I = J.createfilter(M, H, K, null, j.cellsformat, E.gridlocalization);\n              } else {\n                var I = J.createfilter(M, H, K);\n              }\n\n              J.addfilter(m, I);\n            } else {\n              i = false;\n            }\n          }\n\n          return i;\n        };\n\n        switch (v.filtertype) {\n          case \"range\":\n          case \"date\":\n            if (v._filterwidget.jqxDateTimeInput) {\n              if (v.filtertype == \"range\") {\n                var q = v._filterwidget.jqxDateTimeInput(\"getRange\");\n\n                if (q != null && q.from != null && q.to != null) {\n                  var p = \"GREATER_THAN_OR_EQUAL\";\n                  var s = new Date(0);\n                  s.setHours(0);\n                  s.setMinutes(0);\n                  s.setFullYear(q.from.getFullYear(), q.from.getMonth(), q.from.getDate());\n                  var r = new Date(0);\n                  r.setHours(0);\n                  r.setMinutes(0);\n                  r.setFullYear(q.to.getFullYear(), q.to.getMonth(), q.to.getDate());\n                  r.setHours(q.to.getHours());\n                  r.setMinutes(q.to.getMinutes());\n                  r.setSeconds(q.to.getSeconds());\n                  var z = l.createfilter(d, s, p);\n                  l.addfilter(0, z);\n                  var c = \"LESS_THAN_OR_EQUAL\";\n                  var y = l.createfilter(d, r, c);\n                  l.addfilter(0, y);\n                } else {\n                  F = false;\n                }\n              } else {\n                var q = v._filterwidget.jqxDateTimeInput(\"getDate\");\n\n                if (q != null) {\n                  var s = new Date(0);\n                  s.setHours(0);\n                  s.setMinutes(0);\n                  s.setFullYear(q.getFullYear(), q.getMonth(), q.getDate());\n\n                  var h = v._filterwidget.jqxDateTimeInput(\"showTimeButton\");\n\n                  if (h) {\n                    s.setHours(q.getHours());\n                    s.setMinutes(q.getMinutes());\n                  }\n\n                  var p = \"EQUAL\";\n\n                  if (v.filtercondition != undefined) {\n                    p = v.filtercondition;\n                  }\n\n                  var z = l.createfilter(d, s, p);\n\n                  if (h) {\n                    z = l.createfilter(d, s, p, null, v.cellsformat);\n                  }\n\n                  l.addfilter(0, z);\n                } else {\n                  F = false;\n                }\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n\n          case \"input\":\n            if (v._filterwidget) {\n              var q = v._filterwidget.find(\"input\").val();\n\n              var k = v._filterwidget.find(\".filter\").jqxDropDownList(\"selectedIndex\");\n\n              var x = l.getoperatorsbyfiltertype(d)[k];\n\n              if (E.updatefilterconditions) {\n                var G = E.updatefilterconditions(d, l.getoperatorsbyfiltertype(d));\n\n                if (G != undefined) {\n                  l.setoperatorsbyfiltertype(d, G);\n                }\n\n                var x = l.getoperatorsbyfiltertype(d)[k];\n              }\n\n              var o = x == \"NULL\" || x == \"NOT_NULL\";\n              var t = x == \"EMPTY\" || x == \"NOT_EMPTY\";\n\n              if (q != undefined && q.length > 0 || o || t) {\n                z = l.createfilter(d, q, x, null, v.cellsformat, E.gridlocalization);\n                l.addfilter(0, z);\n              } else {\n                F = false;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"number\":\n            if (v._filterwidget) {\n              var q = v._filterwidget.find(\"input\").val();\n\n              if (E.gridlocalization.decimalseparator == \",\") {\n                if (q.indexOf(E.gridlocalization.decimalseparator) >= 0) {\n                  q = q.replace(E.gridlocalization.decimalseparator, \".\");\n                }\n              }\n\n              var k = v._filterwidget.find(\".filter\").jqxDropDownList(\"selectedIndex\");\n\n              var x = l.getoperatorsbyfiltertype(d)[k];\n\n              if (E.updatefilterconditions) {\n                var G = E.updatefilterconditions(d, l.getoperatorsbyfiltertype(d));\n\n                if (G != undefined) {\n                  l.setoperatorsbyfiltertype(d, G);\n                }\n\n                var x = l.getoperatorsbyfiltertype(d)[k];\n              }\n\n              var o = x == \"NULL\" || x == \"NOT_NULL\";\n              var t = x == \"EMPTY\" || x == \"NOT_EMPTY\";\n\n              if (q != undefined && q.length > 0 || o || t) {\n                z = l.createfilter(d, new Number(q), x, null, v.cellsformat, E.gridlocalization);\n                l.addfilter(0, z);\n              } else {\n                F = false;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"textbox\":\n          case \"default\":\n            F = C(v, d, l);\n            break;\n\n          case \"bool\":\n          case \"boolean\":\n            if (v._filterwidget.jqxCheckBox) {\n              var q = v._filterwidget.jqxCheckBox(\"checked\");\n\n              if (q != null) {\n                var p = \"equal\";\n                var n = l.createfilter(d, q, p);\n                l.addfilter(m, n);\n              } else {\n                F = false;\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n\n          case \"list\":\n            var g = v._filterwidget.jqxDropDownList(\"listBox\");\n\n            if (g.selectedIndex > 0) {\n              var b = g.getItem(g.selectedIndex);\n              var q = b.label;\n              var B = b.value;\n              var p = \"equal\";\n\n              if (q === \"\") {\n                p = \"NULL\";\n              }\n\n              var n = l.createfilter(d, q, p);\n              l.addfilter(m, n);\n\n              if (B !== q) {\n                n.data = B;\n              }\n            } else {\n              F = false;\n            }\n\n            break;\n\n          case \"checkedlist\":\n            if (v._filterwidget.jqxDropDownList) {\n              var g = v._filterwidget.jqxDropDownList(\"listBox\");\n\n              var D = g.getCheckedItems();\n\n              if (D.length == 0) {\n                for (var w = 1; w < g.items.length; w++) {\n                  var q = g.items[w].label;\n                  var B = g.items[w].value;\n                  var p = \"not_equal\";\n\n                  if (q === \"\") {\n                    p = \"NOT_NULL\";\n                  }\n\n                  var n = l.createfilter(d, q, p);\n\n                  if (B !== q) {\n                    n.data = B;\n                  }\n\n                  l.addfilter(0, n);\n                }\n\n                F = true;\n              } else {\n                if (D.length != g.items.length) {\n                  for (var w = 0; w < D.length; w++) {\n                    var q = D[w].label;\n                    var B = D[w].value;\n                    var p = \"equal\";\n\n                    if (q === \"\") {\n                      p = \"NULL\";\n                    }\n\n                    var n = l.createfilter(d, q, p);\n\n                    if (B !== q) {\n                      n.data = B;\n                    }\n\n                    l.addfilter(m, n);\n                  }\n                } else {\n                  F = false;\n                }\n              }\n            } else {\n              F = C(v, d, l);\n            }\n\n            break;\n        }\n\n        if (!this._loading) {\n          if (F) {\n            this.addfilter(v.displayfield, l, false);\n          } else {\n            this.removefilter(v.displayfield, false);\n          }\n        }\n      }\n\n      if (!this._loading) {\n        this.applyfilters(\"filterrow\");\n      }\n    },\n    _updatefilterrow: function () {\n      var b = a('<div style=\"position: relative;\" id=\"row00' + this.element.id + '\"></div>');\n      var f = 0;\n      var o = this.columns.records.length;\n      var m = this.toThemeProperty(\"jqx-grid-cell\");\n      m += \" \" + this.toThemeProperty(\"jqx-grid-cell-pinned\");\n      m += \" \" + this.toThemeProperty(\"jqx-grid-cell-filter-row\");\n      var r = o + 10;\n      var s = new Array();\n      var n = this.that;\n      this.filterrow[0].cells = s;\n      b.height(this.filterrowheight);\n      this.filterrow.children().detach();\n      this.filterrow.append(b);\n\n      if (!this._filterrowcache) {\n        this._filterrowcache = new Array();\n      }\n\n      this._initcolumntypes();\n\n      var g = false;\n      var d = new Array();\n      var q = document.createDocumentFragment();\n\n      for (var h = 0; h < o; h++) {\n        var e = this.columns.records[h];\n        var c = e.width;\n\n        if (c < e.minwidth) {\n          c = e.minwidth;\n        }\n\n        if (c > e.maxwidth) {\n          c = e.maxwidth;\n        }\n\n        var l = document.createElement(\"div\");\n        l.style.overflow = \"hidden\";\n        l.style.position = \"absolute\";\n        l.style.height = \"100%\";\n        l.className = m;\n        l = a(l);\n        q.appendChild(l[0]);\n        l[0].style.left = f + \"px\";\n\n        if (this.rtl) {\n          l.css(\"z-index\", r++);\n          l.css(\"border-left-width\", \"1px\");\n        } else {\n          l.css(\"z-index\", r--);\n        }\n\n        if (c == \"auto\") {\n          c = 0;\n        }\n\n        l[0].style.width = parseFloat(c) + \"px\";\n        l[0].left = f;\n\n        if (!(e.hidden && e.hideable)) {\n          f += c;\n        } else {\n          l.css(\"display\", \"none\");\n        }\n\n        s[s.length] = l[0];\n        var k = true;\n\n        if (!this.rtl) {\n          if (this.groupable) {\n            var p = this.showrowdetailscolumn && this.rowdetails ? 1 : 0;\n\n            if (this.groups.length + p > h) {\n              k = false;\n            }\n          }\n\n          if (this.showrowdetailscolumn && this.rowdetails && h == 0) {\n            k = false;\n          }\n        } else {\n          if (this.groupable) {\n            var p = this.showrowdetailscolumn && this.rowdetails ? 1 : 0;\n\n            if (this.groups.length + p + h > o - 1) {\n              k = false;\n            }\n          }\n\n          if (this.showrowdetailscolumn && this.rowdetails && h == o - 1) {\n            k = false;\n          }\n        }\n\n        if (k) {\n          if (e.filtertype == \"custom\" && e.createfilterwidget) {\n            var i = function () {\n              n._applyfilterfromfilterrow();\n            };\n\n            e.createfilterwidget(e, l, i);\n          } else {\n            if (e.filterable) {\n              if (this._filterrowcache[e.datafield]) {\n                g = true;\n                l.append(this._filterrowcache[e.datafield]);\n                e._filterwidget = this._filterrowcache[e.datafield];\n              } else {\n                this._addfilterwidget(e, l, c);\n\n                d[e.datafield] = e._filterwidget;\n              }\n            }\n          }\n        }\n      }\n\n      b[0].appendChild(q);\n      this._filterrowcache = d;\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n        b.css(\"z-index\", r--);\n      }\n\n      b.width(parseFloat(f) + 2);\n      this.filterrow.addClass(m);\n      this.filterrow.css(\"border-top-width\", \"1px\");\n      this.filterrow.css(\"border-right-width\", \"0px\");\n\n      if (g) {\n        this._updatefilterrowui(true);\n      }\n    },\n    _addfilterwidget: function (C, d, A) {\n      var H = this.that;\n      var z = \"\";\n      var E = \"\";\n\n      for (var F = 0; F < H.dataview.filters.length; F++) {\n        var x = H.dataview.filters[F];\n\n        if (x.datafield && x.datafield == C.datafield) {\n          var F = x.filter.getfilters()[0];\n          z = F.value;\n\n          if (C.filtertype === \"range\") {\n            z = {\n              from: z,\n              to: x.filter.getfilters()[1].value\n            };\n          }\n\n          E = F.condition;\n          C.filtercondition = E;\n          break;\n        }\n      }\n\n      var g = function (I, J) {\n        var f = a('<input autocomplete=\"off\" type=\"textarea\"/>');\n        f.attr(\"tabindex\", 5 + C.visibleindex);\n        f[0].id = a.jqx.utilities.createId();\n        f.addClass(I.toThemeProperty(\"jqx-widget\"));\n        f.addClass(I.toThemeProperty(\"jqx-filter-input jqx-input jqx-input-widget\"));\n        f.addClass(I.toThemeProperty(\"jqx-rc-all\"));\n        f.addClass(I.toThemeProperty(\"jqx-widget-content\"));\n\n        if (I.rtl) {\n          f.css(\"direction\", \"rtl\");\n        }\n\n        if (I.disabled) {\n          f.attr(\"disabled\", true);\n        }\n\n        f.attr(\"disabled\", false);\n        f.appendTo(J);\n        f.css(\"margin\", \"4px\");\n        f.width(A - 8);\n        f.height(I.filterrowheight - 9);\n\n        if (C.createfilterwidget) {\n          C.createfilterwidget(C, J, f);\n        }\n\n        C._filterwidget = f;\n        f.focus(function () {\n          I.content[0].scrollLeft = 0;\n          setTimeout(function () {\n            I.content[0].scrollLeft = 0;\n          }, 10);\n          I.focusedfilter = f;\n          f.addClass(I.toThemeProperty(\"jqx-fill-state-focus\"));\n          return false;\n        });\n        f.blur(function () {\n          f.removeClass(I.toThemeProperty(\"jqx-fill-state-focus\"));\n        });\n        f.keydown(function (K) {\n          if (K.keyCode == \"13\") {\n            I._applyfilterfromfilterrow();\n          }\n\n          if (f[0]._writeTimer) {\n            clearTimeout(f[0]._writeTimer);\n          }\n\n          f[0]._writeTimer = setTimeout(function () {\n            if (!I._loading) {\n              if (!I[\"_oldWriteText\" + f[0].id]) {\n                I[\"_oldWriteText\" + f[0].id] = \"\";\n              }\n\n              if (I[\"_oldWriteText\" + f[0].id].length > 0 && I[\"_oldWriteText\" + f[0].id] != f.val()) {\n                I._applyfilterfromfilterrow();\n\n                I[\"_oldWriteText\" + f[0].id] = f.val();\n              } else {\n                if (I[\"_oldWriteText\" + f[0].id].length == 0) {\n                  I._applyfilterfromfilterrow();\n\n                  I[\"_oldWriteText\" + f[0].id] = f.val();\n                }\n              }\n            }\n          }, C.filterdelay);\n          I.focusedfilter = f;\n        });\n        I.host.removeClass(\"jqx-disableselect\");\n        I.content.removeClass(\"jqx-disableselect\");\n        f.val(z);\n      };\n\n      if (C.datatype != null) {\n        if (C.filtertype == \"number\") {\n          if (C.datatype == \"string\" || C.datatype == \"date\" || C.datatype == \"bool\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n\n        if (C.filtertype == \"date\") {\n          if (C.datatype == \"string\" || C.datatype == \"number\" || C.datatype == \"bool\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n\n        if (C.filtertype == \"bool\") {\n          if (C.datatype == \"string\" || C.datatype == \"number\" || C.datatype == \"date\") {\n            C.filtertype = \"textbox\";\n          }\n        }\n      }\n\n      switch (C.filtertype) {\n        case \"number\":\n        case \"input\":\n          var m = a(\"<div></div>\");\n          m.width(d.width());\n          m.height(this.filterrowheight);\n          d.append(m);\n          var A = d.width() - 21;\n\n          var s = function (J, K, f) {\n            var I = a('<input style=\"float: left;\" autocomplete=\"off\" type=\"textarea\"/>');\n\n            if (H.rtl) {\n              I.css(\"float\", \"right\");\n              I.css(\"direction\", \"rtl\");\n            }\n\n            I.attr(\"tabindex\", 5 + C.visibleindex);\n            I[0].id = a.jqx.utilities.createId();\n            I.addClass(H.toThemeProperty(\"jqx-widget jqx-input jqx-rc-all jqx-input-widget jqx-filter-input jqx-widget-content\"));\n            I.appendTo(J);\n            I.width(K - 10);\n\n            if (H.disabled) {\n              I.attr(\"disabled\", true);\n            }\n\n            I.attr(\"disabled\", false);\n            I[0].style.height = H.filterrowheight - 9 + \"px\";\n            I.css(\"margin\", \"4px\");\n            I.css(\"margin-right\", \"3px\");\n            I.focus(function () {\n              H.focusedfilter = I;\n              I.addClass(H.toThemeProperty(\"jqx-fill-state-focus\"));\n            });\n            I.blur(function () {\n              I.removeClass(H.toThemeProperty(\"jqx-fill-state-focus\"));\n            });\n            I.keydown(function (L) {\n              if (L.keyCode == \"13\") {\n                H._applyfilterfromfilterrow();\n              }\n\n              if (L.keyCode == \"9\") {\n                return;\n              }\n\n              if (I[0]._writeTimer) {\n                clearTimeout(I[0]._writeTimer);\n              }\n\n              I[0]._writeTimer = setTimeout(function () {\n                if (!H._loading) {\n                  if (H[\"_oldWriteText\" + I[0].id] != I.val()) {\n                    H._applyfilterfromfilterrow();\n\n                    H[\"_oldWriteText\" + I[0].id] = I.val();\n                  }\n                }\n              }, C.filterdelay);\n              H.focusedfilter = I;\n            });\n            I.val(z);\n            return I;\n          };\n\n          s(m, A);\n\n          var B = H._getfiltersbytype(C.filtertype == \"number\" ? \"number\" : \"string\");\n\n          var t = a(\"<div class='filter' style='float: left;'></div>\");\n          t.css(\"margin-top\", \"4px\");\n          t.appendTo(m);\n\n          if (H.rtl) {\n            t.css(\"float\", \"right\");\n          }\n\n          var h = 0;\n\n          if (C.filtercondition != null) {\n            var F = new a.jqx.filter();\n            var r = F.getoperatorsbyfiltertype(C.filtertype == \"number\" ? \"numericfilter\" : \"stringfilter\");\n            var e = r.indexOf(C.filtercondition.toUpperCase());\n\n            if (e != -1) {\n              h = e;\n            }\n          }\n\n          var D = 180;\n\n          if (C.filtertype == \"input\") {\n            D = 240;\n\n            if (h == 0) {\n              var e = B.indexOf(\"contains\") || 2;\n\n              if (e != -1 && C.filtercondition == null) {\n                h = e;\n              }\n            }\n          }\n\n          t.jqxDropDownList({\n            disabled: H.disabled,\n            touchMode: H.touchmode,\n            rtl: H.rtl,\n            dropDownHorizontalAlignment: \"right\",\n            enableBrowserBoundsDetection: true,\n            selectedIndex: h,\n            width: 20,\n            height: 27,\n            dropDownHeight: 150,\n            dropDownWidth: D,\n            source: B,\n            theme: H.theme\n          });\n          t.jqxDropDownList({\n            selectionRenderer: function (f) {\n              return \"\";\n            }\n          });\n          t.attr(\"tabindex\", 5 + C.visibleindex);\n          t.jqxDropDownList(\"setContent\", \"\");\n          t.find(\".jqx-dropdownlist-content\").hide();\n\n          if (C.createfilterwidget) {\n            C.createfilterwidget(C, d, m);\n          }\n\n          C._filterwidget = m;\n          var j = null;\n          this.addHandler(t, \"select\", function () {\n            var f = t.jqxDropDownList(\"getSelectedItem\").label;\n\n            if (C._filterwidget.find(\"input\").val().length > 0 && !H.refreshingfilter) {\n              H._applyfilterfromfilterrow();\n            }\n\n            if (C.filtertype == \"input\" && !H.refreshingfilter) {\n              H._applyfilterfromfilterrow();\n            } else {\n              if (C._filterwidget.find(\"input\").val().length == 0 && !H.refreshingfilter) {\n                if (j == \"null\" || j == \"not null\" || f == \"null\" || f == \"not null\") {\n                  H._applyfilterfromfilterrow();\n                }\n              }\n            }\n\n            j = f;\n          });\n          break;\n\n        case \"textbox\":\n        case \"default\":\n        default:\n          g(this, d);\n          break;\n\n        case \"none\":\n          break;\n\n        case \"date\":\n        case \"range\":\n          if (this.host.jqxDateTimeInput) {\n            var b = a(\"<div></div>\");\n            b.css(\"margin\", \"4px\");\n            b.css(\"margin-left\", \"5px\");\n            b.appendTo(d);\n            var n = {\n              calendar: this.gridlocalization,\n              todayString: this.gridlocalization.todaystring,\n              clearString: this.gridlocalization.clearstring\n            };\n            b.jqxDateTimeInput({\n              firstDayOfWeek: this.gridlocalization.firstDay,\n              readonly: true,\n              disabled: H.disabled,\n              localization: n,\n              rtl: H.rtl,\n              showFooter: true,\n              formatString: C.cellsformat,\n              selectionMode: C.filtertype,\n              value: null,\n              theme: this.theme,\n              width: A - 9,\n              height: this.filterrowheight - 9\n            });\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, b);\n            }\n\n            if (z && z.from) {\n              b.jqxDateTimeInput(\"setRange\", z.from, z.to);\n            } else {\n              if (z && z.toString().length > 1) {\n                b.val(z);\n              }\n            }\n\n            b.find(\"input\").attr(\"tabindex\", 5 + C.visibleindex);\n            C._filterwidget = b;\n            this.addHandler(b, \"valueChanged\", function (f) {\n              if (!H.refreshingfilter) {\n                H._applyfilterfromfilterrow();\n\n                H.focusedfilter = null;\n              }\n            });\n          } else {\n            g(this, d);\n          }\n\n          break;\n\n        case \"list\":\n        case \"checkedlist\":\n          if (this.host.jqxDropDownList) {\n            var q = this._getfilterdataadapter(C);\n\n            var l = false;\n            var t = a(\"<div></div>\");\n            t.css(\"margin\", \"4px\");\n            t.css(\"margin-left\", \"5px\");\n            var u = C.datafield;\n            var v = C.filtertype == \"checkedlist\" ? true : false;\n            var D = A < 150 ? 220 : \"auto\";\n            q.dataBind();\n            var p = q.records;\n            var k = p.length < 8 ? true : false;\n            l = k;\n            t.appendTo(d);\n            t.jqxDropDownList({\n              hint: false,\n              placeHolder: H.gridlocalization.filterchoosestring,\n              disabled: H.disabled,\n              touchMode: H.touchmode,\n              rtl: H.rtl,\n              checkboxes: v,\n              dropDownWidth: D,\n              source: q.records,\n              autoDropDownHeight: k,\n              theme: this.theme,\n              width: A - 9,\n              height: this.filterrowheight - 9,\n              displayMember: C.displayfield,\n              valueMember: u\n            });\n            t.attr(\"tabindex\", 5 + C.visibleindex);\n            t.attr(\"default-placeholder\", true);\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, t);\n            }\n\n            var c = t.jqxDropDownList(\"listBox\");\n\n            if (v) {\n              t.jqxDropDownList({\n                selectionRenderer: function () {\n                  var f = '<span class=\"' + H.toThemeProperty(\"jqx-item\") + '\" style=\"top: 4px; position: relative; color: inherit; border: none; background-color: transparent;\">' + H.gridlocalization.filterselectstring + \"</span>\";\n                  return f;\n                }\n              });\n              var y = a('<span style=\"top: 2px; position: relative; color: inherit; border: none; background-color: transparent;\">' + H.gridlocalization.filterselectstring + \"</span>\");\n              y.addClass(this.toThemeProperty(\"jqx-item\"));\n\n              if (c != undefined) {\n                if (!l) {\n                  c.host.height(200);\n                }\n\n                c.insertAt({\n                  label: H.gridlocalization.filterselectallstring\n                }, 0);\n                t.jqxDropDownList(\"setContent\", y);\n                var i = true;\n                var G = new Array();\n                c.checkAll(false);\n                H.addHandler(c.host, \"checkChange\", function (J) {\n                  t[0]._selectionChanged = true;\n\n                  if (!i) {\n                    return;\n                  }\n\n                  if (J.args.label != H.gridlocalization.filterselectallstring) {\n                    i = false;\n                    c.host.jqxListBox(\"checkIndex\", 0, true, false);\n                    var f = c.host.jqxListBox(\"getCheckedItems\");\n                    var I = c.host.jqxListBox(\"getItems\");\n\n                    if (f.length == 1) {\n                      c.host.jqxListBox(\"uncheckIndex\", 0, true, false);\n                    } else {\n                      if (I.length != f.length) {\n                        c.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                      }\n                    }\n\n                    i = true;\n                  } else {\n                    i = false;\n\n                    if (J.args.checked) {\n                      c.host.jqxListBox(\"checkAll\", false);\n                    } else {\n                      c.host.jqxListBox(\"uncheckAll\", false);\n                    }\n\n                    i = true;\n                  }\n                });\n              }\n            } else {\n              c.insertAt({\n                label: this.gridlocalization.filterchoosestring,\n                value: \"\"\n              }, 0);\n              t.jqxDropDownList({\n                selectedIndex: 0\n              });\n            }\n\n            C._filterwidget = t;\n            var o = t.jqxDropDownList(\"dropdownlistWrapper\");\n\n            if (C.filtertype == \"list\") {\n              this.addHandler(t, \"select\", function (f) {\n                if (!H.refreshingfilter) {\n                  if (f.args && f.args.type != \"none\") {\n                    H._applyfilterfromfilterrow();\n\n                    H.focusedfilter = null;\n                  }\n                }\n              });\n            } else {\n              this.addHandler(t, \"close\", function (f) {\n                if (t[0]._selectionChanged) {\n                  H._applyfilterfromfilterrow();\n\n                  H.focusedfilter = null;\n                  t[0]._selectionChanged = false;\n                }\n              });\n            }\n          } else {\n            g(this, d);\n          }\n\n          break;\n\n        case \"bool\":\n        case \"boolean\":\n          if (this.host.jqxCheckBox) {\n            var w = a('<div tabIndex=0 style=\"opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -9px; margin-left: -12px;\"></div>');\n            w.appendTo(d);\n            w.jqxCheckBox({\n              disabled: H.disabled,\n              enableContainerClick: false,\n              animationShowDelay: 0,\n              animationHideDelay: 0,\n              hasThreeStates: true,\n              theme: this.theme,\n              checked: null\n            });\n            w.attr(\"tabindex\", 5 + C.visibleindex);\n\n            if (C.createfilterwidget) {\n              C.createfilterwidget(C, d, w);\n            }\n\n            if (z === true || z == \"true\") {\n              w.jqxCheckBox({\n                checked: true\n              });\n            } else {\n              if (z === false || z == \"false\") {\n                w.jqxCheckBox({\n                  checked: false\n                });\n              }\n            }\n\n            C._filterwidget = w;\n            this.addHandler(w, \"change\", function (f) {\n              if (!H.refreshingfilter) {\n                if (f.args) {\n                  H.focusedfilter = null;\n\n                  H._applyfilterfromfilterrow();\n                }\n              }\n            });\n          } else {\n            g(this, d);\n          }\n\n          break;\n      }\n    },\n    _getfilterdataadapter: function (b) {\n      var c = this.source._source ? true : false;\n\n      if (!c) {\n        var f = new a.jqx.dataAdapter(this.source, {\n          autoBind: false,\n          uniqueDataFields: [b.displayfield],\n          autoSort: true,\n          autoSortField: b.displayfield,\n          async: false\n        });\n      } else {\n        var e = {\n          localdata: a.extend(true, {}, this.source.records),\n          datatype: this.source.datatype,\n          async: false\n        };\n        var d = this;\n        var f = new a.jqx.dataAdapter(e, {\n          autoBind: false,\n          autoSort: true,\n          autoSortField: b.displayfield,\n          async: false,\n          uniqueDataFields: [b.displayfield],\n          beforeLoadComplete: function (g) {\n            var l = new Array();\n\n            if (b.cellsformat) {\n              var k = d._getcolumntypebydatafield(b);\n\n              for (var h = 0; h < g.length; h++) {\n                l.push(g[h]);\n                var j = g[h][b.displayfield];\n                g[h][b.displayfield + \"JQValue\"] = j;\n\n                if (k === \"date\") {\n                  if (j != null) {\n                    g[h][b.displayfield] = f.formatDate(j, b.cellsformat, d.gridlocalization);\n                  } else {\n                    g[h][b.displayfield] = \"\";\n                  }\n                } else {\n                  if (k === \"number\" || k === \"float\" || k === \"int\") {\n                    if (j != null) {\n                      g[h][b.displayfield] = f.formatNumber(j, b.cellsformat, d.gridlocalization);\n                    } else {\n                      g[h][b.displayfield] = \"\";\n                    }\n                  }\n                }\n              }\n\n              return l;\n            } else {\n              return g;\n            }\n          }\n        });\n      }\n\n      if (b.filteritems && b.filteritems.length > 0) {\n        var e = {\n          localdata: b.filteritems,\n          datatype: this.source.datatype,\n          async: false\n        };\n        var f = new a.jqx.dataAdapter(e, {\n          autoBind: false,\n          async: false\n        });\n      } else {\n        if (b.filteritems) {\n          if (b.filteritems._source) {\n            b.filteritems._options.autoBind = false;\n            b.filteritems._options.async = false;\n            return b.filteritems;\n          } else {\n            if (a.isFunction(b.filteritems)) {\n              return b.filteritems();\n            }\n          }\n        }\n      }\n\n      return f;\n    },\n    refreshfilterrow: function () {\n      if (!this.showfilterrow) {\n        return;\n      }\n\n      this.refreshingfilter = true;\n\n      this._updatefilterrowui();\n\n      this._updatelistfilters(true, true);\n\n      var h = this.that;\n      var l = this.columns.records.length;\n\n      for (var d = 0; d < l; d++) {\n        var c = this.columns.records[d];\n\n        if (c.filterable) {\n          if (c.filter) {\n            var b = c.filter.getfilters();\n\n            if (b.length > 0) {\n              var k = b[0].value;\n              var e = c._filterwidget;\n\n              var f = c._filterwidget.parent();\n\n              if (e != null) {\n                switch (c.filtertype) {\n                  case \"number\":\n                    f.find(\"input\").val(k);\n\n                    if (this.host.jqxDropDownList) {\n                      var i = c.filter.getoperatorsbyfiltertype(\"numericfilter\");\n                      e.find(\".filter\").jqxDropDownList(\"selectIndex\", i.indexOf(b[0].condition));\n                    }\n\n                    break;\n\n                  case \"input\":\n                    f.find(\"input\").val(k);\n\n                    if (this.host.jqxDropDownList) {\n                      var i = c.filter.getoperatorsbyfiltertype(\"stringfilter\");\n                      e.find(\".filter\").jqxDropDownList(\"selectIndex\", i.indexOf(b[0].condition));\n                    }\n\n                    break;\n\n                  case \"date\":\n                  case \"range\":\n                    if (this.host.jqxDateTimeInput) {\n                      var k = c.filter.getfilterat(0).filtervalue;\n\n                      if (k != undefined) {\n                        if (c.filter.getfilterat(1)) {\n                          var g = c.filter.getfilterat(1).filtervalue;\n                        } else {\n                          g = k;\n                        }\n\n                        if (c.filtertype == \"range\") {\n                          a(f.children()[0]).jqxDateTimeInput(\"setRange\", new Date(k), new Date(g));\n                        } else {\n                          a(f.children()[0]).jqxDateTimeInput(\"setDate\", new Date(k));\n                        }\n                      }\n                    } else {\n                      e.val(k);\n                    }\n\n                    break;\n\n                  case \"textbox\":\n                  case \"default\":\n                    e.val(k);\n                    h[\"_oldWriteText\" + e[0].id] = k;\n                    break;\n\n                  case \"bool\":\n                  case \"boolean\":\n                    if (!this.host.jqxCheckBox) {\n                      e.val(k);\n                    } else {\n                      a(f.children()[0]).jqxCheckBox({\n                        checked: k\n                      });\n                    }\n\n                    break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.refreshingfilter = false;\n    },\n    _destroyedfilters: function () {\n      var g = this.that;\n      var b = this.columns.records.length;\n\n      for (var f = 0; f < b; f++) {\n        var c = this.columns.records[f];\n\n        if (c.filterable) {\n          var h = c._filterwidget;\n\n          if (c.filtertype == \"list\" || c.filtertype == \"checkedlist\") {\n            this.removeHandler(h, \"select\");\n            this.removeHandler(h, \"close\");\n            h.jqxDropDownList(\"destroy\");\n          } else {\n            if (c.filtertype == \"date\" || c.filtertype == \"range\") {\n              this.removeHandler(h, \"valueChanged\");\n              h.jqxDateTimeInput(\"destroy\");\n            } else {\n              if (c.filtertype == \"bool\") {\n                this.removeHandler(h, \"change\");\n                h.jqxCheckBox(\"destroy\");\n              } else {\n                if (c.filtertype == \"number\" || c.filtertype === \"input\") {\n                  var d = h.find(\".jqx-input\");\n                  this.removeHandler(d, \"keydown\");\n                  var e = a(h.children()[1]);\n                  e.jqxDropDownList(\"destroy\");\n                } else {\n                  this.removeHandler(h, \"keydown\");\n                }\n              }\n            }\n          }\n\n          h.remove();\n        }\n      }\n    },\n    _updatelistfilters: function (l, k) {\n      var v = this.that;\n      var t = this.columns.records.length;\n\n      for (var p = 0; p < t; p++) {\n        var q = this.columns.records[p];\n\n        if (q.filterable) {\n          if (q.filtertype == \"list\" || q.filtertype == \"checkedlist\") {\n            var h = q._filterwidget;\n\n            if (!l) {\n              if (q.filter == undefined) {\n                h.jqxDropDownList(\"renderSelection\");\n                continue;\n              }\n            } else {\n              var e = this._getfilterdataadapter(q);\n\n              h.jqxDropDownList({\n                source: e\n              });\n              var d = h.jqxDropDownList(\"getItems\");\n              var o = true;\n\n              if (d.length != e.records.length + 1) {\n                o = false;\n              }\n\n              if (o) {\n                for (var s = 1; s < d.length; s++) {\n                  if (d[s].label != e.records[s - 1][q.displayfield]) {\n                    o = false;\n                    break;\n                  }\n                }\n              }\n\n              if (o && !k) {\n                continue;\n              }\n            }\n\n            var m = q.filtertype == \"checkedlist\" ? true : false;\n            var d = h.jqxDropDownList(\"getItems\");\n            var b = h.jqxDropDownList(\"listBox\");\n            h.jqxDropDownList(\"dataBind\");\n\n            if (m) {\n              h.jqxDropDownList({\n                selectionRenderer: function () {\n                  return v.gridlocalization.filterselectstring;\n                }\n              });\n\n              if (b.getItem(this.gridlocalization.filterselectallstring) == null) {\n                b.insertAt({\n                  label: this.gridlocalization.filterselectallstring\n                }, 0);\n              }\n\n              var n = a('<span style=\"top: 2px; position: relative; color: inherit; border: none; background-color: transparent;\">' + this.gridlocalization.filterselectstring + \"</span>\");\n              n.addClass(this.toThemeProperty(\"jqx-item\"));\n              h.jqxDropDownList(\"setContent\", n);\n              b.checkAll(false);\n\n              if (q.filter) {\n                var g = q.filter.getfilters();\n\n                for (var s = 0; s < b.items.length; s++) {\n                  var f = b.items[s].label;\n                  var r = undefined;\n                  a.each(g, function () {\n                    var i;\n\n                    if (this.condition == \"NOT_EQUAL\") {\n                      if (f == this.value) {\n                        i = false;\n                      } else {\n                        i = true;\n                      }\n                    } else {\n                      if (this.condition == \"EQUAL\") {\n                        if (f == this.value) {\n                          i = true;\n                        } else {\n                          i = false;\n                        }\n                      }\n                    }\n\n                    if (r == undefined && i !== undefined) {\n                      r = i;\n                    } else {\n                      if (this.condition == \"EQUAL\") {\n                        r = r || i;\n                      } else {\n                        r = r && i;\n                      }\n                    }\n                  });\n\n                  if (r) {\n                    b.checkIndex(s, false, false);\n                  } else {\n                    b.uncheckIndex(s, false, false);\n                  }\n                }\n\n                b._updateCheckedItems();\n\n                var u = b.getCheckedItems().length;\n\n                if (b.items.length != u && u > 0) {\n                  b.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                }\n              }\n            } else {\n              if (b.getItem(this.gridlocalization.filterchoosestring) == null) {\n                if (b.items[0].label !== this.gridlocalization.filterchoosestring) {\n                  b.insertAt({\n                    label: this.gridlocalization.filterchoosestring,\n                    value: \"\"\n                  }, 0);\n                }\n              }\n\n              h.jqxDropDownList({\n                selectedIndex: 0\n              });\n\n              if (q.filter) {\n                var g = q.filter.getfilters();\n                var c = -1;\n\n                for (var s = 0; s < b.items.length; s++) {\n                  var f = b.items[s].label;\n                  a.each(g, function () {\n                    if (this.condition == \"NOT_EQUAL\") {\n                      return true;\n                    }\n\n                    if (f == this.value) {\n                      c = s;\n                      return false;\n                    }\n                  });\n                }\n\n                if (c != -1) {\n                  b.selectIndex(c);\n                }\n              }\n            }\n\n            if (d.length < 8) {\n              h.jqxDropDownList(\"autoDropDownHeight\", true);\n            } else {\n              h.jqxDropDownList(\"autoDropDownHeight\", false);\n            }\n          }\n        }\n      }\n    },\n    _renderfiltercolumn: function () {\n      var b = this.that;\n\n      if (this.filterable) {\n        if (!this.columns.records) {\n          return;\n        }\n\n        a.each(this.columns.records, function (d, e) {\n          var c = false;\n\n          if (b.autoshowfiltericon) {\n            if (this.filter) {\n              a(this.filtericon).show();\n              c = true;\n            } else {\n              a(this.filtericon).hide();\n            }\n          } else {\n            if (this.filterable) {\n              a(this.filtericon).show();\n              c = true;\n            }\n          }\n\n          this.element.removeAttribute(\"filter\");\n\n          if (c) {\n            this.element.setAttribute(\"filter\", true);\n          }\n\n          if (this.align == \"right\" && !this.renderer) {\n            if (this.element) {\n              if (!c) {\n                this.element.firstChild.firstChild.style.marginRight = \"2px\";\n              } else {\n                this.element.firstChild.firstChild.style.marginRight = \"18px\";\n              }\n            }\n          }\n        });\n      }\n    },\n    _initcolumntypes: function () {\n      if (this.columns && this.columns.records) {\n        var b = this.source._source.datafields;\n\n        if (b) {\n          for (var c = 0; c < this.columns.records.length; c++) {\n            var d = this.columns.records[c];\n\n            if (d.datatype) {\n              continue;\n            }\n\n            var e = \"\";\n            a.each(b, function () {\n              if (this.name == d.displayfield) {\n                if (this.type) {\n                  e = this.type;\n                }\n\n                return false;\n              }\n            });\n\n            if (e != \"\") {\n              d.datatype = e;\n            } else {\n              d.datatype = \"\";\n            }\n          }\n        }\n      }\n    },\n    _getcolumntypebydatafield: function (f) {\n      var g = this.that;\n      var e = \"string\";\n      var d = g.source.datafields || (g.source._source ? g.source._source.datafields : null);\n\n      if (d) {\n        var i = \"\";\n        a.each(d, function () {\n          if (this.name == f.displayfield) {\n            if (this.type) {\n              i = this.type;\n            }\n\n            return false;\n          }\n        });\n\n        if (i) {\n          return i;\n        }\n      }\n\n      if (f != null) {\n        if (this.dataview.cachedrecords == undefined) {\n          return e;\n        }\n\n        var b = null;\n\n        if (!this.virtualmode) {\n          if (this.dataview.cachedrecords.length == 0) {\n            return e;\n          }\n\n          b = this.dataview.cachedrecords[0][f.displayfield];\n\n          if (b != null && b.toString() == \"\") {\n            return \"string\";\n          }\n        } else {\n          a.each(this.dataview.cachedrecords, function () {\n            b = this[f.displayfield];\n            return false;\n          });\n        }\n\n        if (b != null) {\n          if (typeof b == \"boolean\") {\n            e = \"boolean\";\n          } else {\n            if (a.jqx.dataFormat.isNumber(b)) {\n              e = \"number\";\n            } else {\n              var h = new Date(b);\n\n              if (h.toString() == \"NaN\" || h.toString() == \"Invalid Date\") {\n                if (a.jqx.dataFormat) {\n                  h = a.jqx.dataFormat.tryparsedate(b);\n\n                  if (h != null) {\n                    if (h && h.getFullYear()) {\n                      if (h.getFullYear() == 1970 && h.getMonth() == 0 && h.getDate() == 1) {\n                        var c = new Number(b);\n\n                        if (!isNaN(c)) {\n                          return \"number\";\n                        }\n\n                        return \"string\";\n                      }\n                    }\n\n                    return \"date\";\n                  } else {\n                    e = \"string\";\n                  }\n                } else {\n                  e = \"string\";\n                }\n              } else {\n                e = \"date\";\n              }\n            }\n          }\n        }\n      }\n\n      return e;\n    },\n    _getfiltersbytype: function (b) {\n      var c = this.that;\n      var d = \"\";\n\n      switch (b) {\n        case \"number\":\n        case \"float\":\n        case \"int\":\n          d = c.gridlocalization.filternumericcomparisonoperators;\n          break;\n\n        case \"date\":\n          d = c.gridlocalization.filterdatecomparisonoperators;\n          break;\n\n        case \"boolean\":\n        case \"bool\":\n          d = c.gridlocalization.filterbooleancomparisonoperators;\n          break;\n\n        case \"string\":\n        default:\n          d = c.gridlocalization.filterstringcomparisonoperators;\n          break;\n      }\n\n      return d;\n    },\n    _getfiltertype: function (b) {\n      var c = \"stringfilter\";\n\n      switch (b) {\n        case \"number\":\n        case \"int\":\n        case \"float\":\n        case \"decimal\":\n          c = \"numericfilter\";\n          break;\n\n        case \"boolean\":\n        case \"bool\":\n          c = \"booleanfilter\";\n          break;\n\n        case \"date\":\n        case \"time\":\n        case \"range\":\n          c = \"datefilter\";\n          break;\n\n        case \"string\":\n        case \"input\":\n          c = \"stringfilter\";\n          break;\n      }\n\n      return c;\n    },\n    _buildfilter: function (r, l, F) {\n      var f = a(l).find(\".filter1\");\n      var G = a(l).find(\".filter2\");\n      var K = a(l).find(\".filter3\");\n      var k = a(l).find(\".filtertext1\" + r.element.id);\n      var j = a(l).find(\".filtertext2\" + r.element.id);\n      var A = k.val();\n      var z = j.val();\n\n      var M = r._getcolumntypebydatafield(F);\n\n      var t = r._getfiltersbytype(M);\n\n      var J = new a.jqx.filter();\n\n      var w = r._getfiltertype(M);\n\n      if (r.filtermode === \"default\" && F.filtertype !== \"list\" && F.filtertype !== \"checkedlist\") {\n        var E = f.jqxDropDownList(\"selectedIndex\");\n        var c = G.jqxDropDownList(\"selectedIndex\");\n        var D = K.jqxDropDownList(\"selectedIndex\");\n        var e = null;\n        var d = null;\n\n        if (r.updatefilterconditions) {\n          var p = r.updatefilterconditions(w, J.getoperatorsbyfiltertype(w));\n\n          if (p != undefined) {\n            J.setoperatorsbyfiltertype(w, p);\n          }\n        }\n\n        var q = false;\n        var L = J.getoperatorsbyfiltertype(w)[E];\n        var K = J.getoperatorsbyfiltertype(w)[D];\n        var v = L == \"NULL\" || L == \"NOT_NULL\";\n        var h = L == \"EMPTY\" || L == \"NOT_EMPTY\";\n\n        if (L == undefined) {\n          L = J.getoperatorsbyfiltertype(w)[0];\n        }\n\n        if (K == undefined) {\n          K = J.getoperatorsbyfiltertype(w)[0];\n        }\n\n        if (A.length > 0 || v || h) {\n          e = J.createfilter(w, A, L, null, F.cellsformat, r.gridlocalization);\n          J.addfilter(c, e);\n          q = true;\n        }\n\n        var u = K == \"NULL\" || K == \"NOT_NULL\";\n        var g = K == \"EMPTY\" || K == \"NOT_EMPTY\";\n\n        if (z.length > 0 || u || g) {\n          d = J.createfilter(w, z, K, null, F.cellsformat, r.gridlocalization);\n          J.addfilter(c, d);\n          q = true;\n        }\n\n        if (q) {\n          var C = F.displayfield;\n          this.addfilter(C, J, true);\n        } else {\n          this._clearfilter(r, l, F);\n        }\n      } else {\n        if (r.filtermode === \"excel\" || F.filtertype === \"list\" || F.filtertype === \"checkedlist\") {\n          var B = this;\n          var n = false;\n          var x = f.data().jqxListBox.instance;\n          var I = this.filtermode === \"excel\" || F.filtertype === \"checkedlist\";\n          var o = x.getCheckedItems();\n\n          if (!I) {\n            var o = x.getSelectedItems();\n          }\n\n          if (o.length == 0) {\n            for (var H = 1; H < x.items.length; H++) {\n              var m = x.items[H].value;\n\n              if (m === undefined) {\n                m = \"\";\n              }\n\n              var b = \"not_equal\";\n\n              if (m && m.indexOf) {\n                if (m.indexOf(\"|\") >= 0 || m.indexOf(\" AND \") >= 0 || m.indexOf(\" OR \") >= 0 || m.indexOf(\" and \") >= 0 || m.indexOf(\" or \") >= 0) {\n                  m = m.replace(\"|\", \"\");\n                  m = m.replace(\"AND\", \"\");\n                  m = m.replace(\"OR\", \"\");\n                  m = m.replace(\"and\", \"\");\n                  m = m.replace(\"or\", \"\");\n                  var b = \"equal\";\n                }\n              }\n\n              if (w == \"datefilter\") {\n                var y = J.createfilter(w, m, b, null, F.cellsformat, r.gridlocalization);\n              } else {\n                var y = J.createfilter(w, m, b, null);\n              }\n\n              J.addfilter(0, y);\n            }\n\n            n = true;\n          } else {\n            if (o.length != x.items.length) {\n              n = true;\n\n              for (var H = 0; H < o.length; H++) {\n                if (r.gridlocalization.filterselectallstring === o[H].value) {\n                  continue;\n                }\n\n                var m = o[H].value;\n\n                if (m === undefined) {\n                  m = \"\";\n                }\n\n                var b = \"equal\";\n\n                if (w == \"datefilter\") {\n                  var y = J.createfilter(w, m, b, null, F.cellsformat, r.gridlocalization);\n                } else {\n                  var y = J.createfilter(w, m, b, null);\n                }\n\n                var s = 1;\n                J.addfilter(s, y);\n              }\n            } else {\n              n = false;\n            }\n          }\n\n          if (n) {\n            var C = F.displayfield;\n            this.addfilter(C, J, true);\n          } else {\n            var C = F.displayfield;\n            this.removefilter(C, true);\n          }\n        }\n      }\n    },\n    _clearfilter: function (e, c, d) {\n      var b = d.displayfield;\n      this.removefilter(b, true);\n    },\n    addfilter: function (d, e, c) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      var f = this.getcolumn(d);\n\n      var b = this._getcolumn(d);\n\n      if (f == undefined || f == null) {\n        return;\n      }\n\n      f.filter = e;\n      b.filter = e;\n      this.dataview.addfilter(d, e);\n\n      if (c == true && c != undefined) {\n        this.applyfilters(\"add\");\n      }\n    },\n    removefilter: function (d, c) {\n      if (this._loading) {\n        throw new Error(\"jqxGrid: \" + this.loadingerrormessage);\n        return false;\n      }\n\n      var e = this.getcolumn(d);\n\n      var b = this._getcolumn(d);\n\n      if (e == undefined || e == null) {\n        return;\n      }\n\n      if (e.filter == null) {\n        return;\n      }\n\n      this.dataview.removefilter(d, e.filter);\n      e.filter = null;\n      b.filter = null;\n\n      if (this.showfilterrow) {\n        this.clearfilterrow(d);\n      }\n\n      if (c == true || c !== false) {\n        this.applyfilters(\"remove\");\n      }\n    },\n    applyfilters: function (f) {\n      var c = false;\n\n      if (this.dataview.filters.length >= 0 && (this.virtualmode || !this.source.localdata)) {\n        if (this.source != null && this.source.filter) {\n          var g = -1;\n\n          if (this.pageable) {\n            g = this.dataview.pagenum;\n            this.dataview.pagenum = 0;\n          } else {\n            this.vScrollInstance.setPosition(0);\n            this.loadondemand = true;\n\n            this._renderrows(this.virtualsizeinfo);\n          }\n\n          if (this.pageable && this.virtualmode) {\n            this.dataview.pagenum = 0;\n          }\n\n          this.source.filter(this.dataview.filters, this.dataview.records, this.dataview.records.length);\n\n          if (this.pageable && !this.virtualmode) {\n            this.dataview.pagenum = g;\n          }\n        }\n      }\n\n      this._cellscache = new Array();\n\n      if (this.dataview.clearsortdata) {\n        this.dataview.clearsortdata();\n      }\n\n      if (!this.virtualmode) {\n        var b = this.selectedrowindexes;\n        var d = this.that;\n        this.dataview.refresh();\n\n        if (this.dataview.clearsortdata) {\n          if (this.sortcolumn && this.sortdirection) {\n            var e = this.sortdirection.ascending ? \"asc\" : \"desc\";\n\n            if (!this._loading) {\n              this.sortby(this.sortcolumn, e, null, false);\n            } else {\n              this.sortby(this.sortcolumn, e, null, false, false);\n            }\n          }\n        }\n      } else {\n        if (this.pageable) {\n          this.dataview.updateview();\n\n          if (this.gotopage) {\n            this.gotopage(0);\n          }\n        }\n\n        this.rendergridcontent(false, false);\n\n        if (this.showfilterrow) {\n          if (typeof f != \"string\" && a.isEmptyObject(f)) {\n            this.refreshfilterrow();\n          }\n        }\n\n        this._postrender(\"filter\");\n\n        this._raiseEvent(13, {\n          filters: this.dataview.filters\n        });\n\n        return;\n      }\n\n      if (this.pageable) {\n        this.dataview.updateview();\n\n        if (this.gotopage) {\n          this.gotopage(0);\n          this.updatepagerdetails();\n        }\n      }\n\n      this._updaterowsproperties();\n\n      if (!this.groupable || this.groupable && this.groups.length == 0) {\n        this._rowdetailscache = new Array();\n        this.virtualsizeinfo = null;\n        this._pagescache = new Array();\n\n        if (this.columns && this.columns.records && this.columns.records.length > 0 && !this.columns.records[0].filtericon) {\n          this.prerenderrequired = true;\n        }\n\n        this.rendergridcontent(true, false);\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n\n        if (this.showaggregates && this._updatecolumnsaggregates) {\n          this._updatecolumnsaggregates();\n        }\n\n        this._postrender(\"filter\");\n      } else {\n        this.collapseallgroups();\n        this._rowdetailscache = new Array();\n\n        this._render(true, true, false, false, false);\n\n        if (this.showfilterrow) {\n          this._updatefocusedfilter();\n        }\n\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n\n        this._postrender(\"group\");\n      }\n\n      if (this.showfilterrow) {\n        if (typeof f != \"string\" && a.isEmptyObject(f)) {\n          this.refreshfilterrow();\n        }\n      }\n\n      this._raiseEvent(13, {\n        filters: this.dataview.filters\n      });\n    },\n    getfilterinformation: function () {\n      var d = new Array();\n\n      for (var b = 0; b < this.dataview.filters.length; b++) {\n        var c = this.getcolumn(this.dataview.filters[b].datafield);\n        d[b] = {\n          filter: this.dataview.filters[b].filter,\n          datafield: c.datafield,\n          displayfield: c.displayfield,\n          filtercolumn: c.datafield,\n          filtercolumntext: c.text\n        };\n      }\n\n      return d;\n    },\n    clearfilters: function (b) {\n      var d = this.that;\n\n      if (this.showfilterrow) {\n        this.clearfilterrow();\n      }\n\n      if (this.columns.records) {\n        var c = b == true || b !== false;\n        a.each(this.columns.records, function () {\n          d.removefilter(this.displayfield, !c);\n        });\n      }\n\n      if (b === false) {\n        return;\n      }\n\n      if (b == true || b !== false) {\n        this.applyfilters(\"clear\");\n      }\n    },\n    _destroyfilterpanel: function () {\n      var e = a(a.find(\"#filterclearbutton\" + this.element.id));\n      var d = a(a.find(\"#filterbutton\" + this.element.id));\n      var h = a(a.find(\"#filter1\" + this.element.id));\n      var c = a(a.find(\"#filter2\" + this.element.id));\n      var g = a(a.find(\"#filter3\" + this.element.id));\n      var f = a(a.find(\".filtertext1\" + this.element.id));\n      var b = a(a.find(\".filtertext2\" + this.element.id));\n\n      if (f.length > 0 && b.length > 0) {\n        f.removeClass();\n        b.removeClass();\n        f.remove();\n        b.remove();\n      }\n\n      if (e.length > 0) {\n        e.jqxButton(\"destroy\");\n        d.jqxButton(\"destroy\");\n        this.removeHandler(e, \"click\");\n        this.removeHandler(d, \"click\");\n      }\n\n      if (h.length > 0) {\n        h.jqxDropDownList(\"destroy\");\n      }\n\n      if (c.length > 0) {\n        c.jqxDropDownList(\"destroy\");\n      }\n\n      if (g.length > 0) {\n        g.jqxDropDownList(\"destroy\");\n      }\n\n      var h = a(a.find(\"#filter1\" + this.element.id + \"ex\"));\n      var c = a(a.find(\"#filter2\" + this.element.id + \"ex\"));\n      var g = a(a.find(\"#filter3\" + this.element.id + \"ex\"));\n\n      if (h.length > 0) {\n        h.jqxDropDownList(\"destroy\");\n      }\n\n      if (c.length > 0) {\n        c.jqxDropDownList(\"destroy\");\n      }\n\n      if (g.length > 0) {\n        g.jqxDropDownList(\"destroy\");\n      }\n    },\n    _updatefilterpanel: function (s, p, E) {\n      if (s == null || s == undefined) {\n        s = this;\n      }\n\n      var Q = s._getcolumntypebydatafield(E);\n\n      var u = s._getfiltersbytype(Q);\n\n      if (!s.host.jqxDropDownList) {\n        throw new Error(\"jqxGrid: Missing reference to jqxdropdownlist.js.\");\n        return;\n      }\n\n      s.filterpanel.detach();\n      s.excelfilterpanel.detach();\n\n      if (E.filterpanel) {\n        E.filterpanel.detach();\n      }\n\n      a(p).children().detach();\n      var k = a(s.menuitemsarray[6]);\n      a(k).css(\"height\", \"190px\");\n\n      if (E.createfilterpanel && !E.filterpanel) {\n        var K = a(\"<div class='filter' style='margin-left: 7px;'></div>\");\n        a(p).append(K);\n        E.createfilterpanel(E.displayfield, K);\n        E.filterpanel = K;\n      }\n\n      if (E.filtertype === \"list\" || E.filtertype === \"checkedlist\") {\n        a(p).append(s.excelfilterpanel);\n      } else {\n        if (E.filtertype !== \"custom\") {\n          a(p).append(s.filterpanel);\n        } else {\n          if (E.filterpanel) {\n            a(p).append(E.filterpanel);\n          }\n        }\n      }\n\n      this._showwhere = a(p).find(\".filter.showwhere\");\n      var g = a(p);\n      var N = g.find(\"#filterclearbutton\" + s.element.id);\n      var l = g.find(\"#filterbutton\" + s.element.id);\n      var f = g.find(\".filter1\");\n      var m = g.find(\".filter2\");\n      var P = g.find(\".filter3\");\n      var j = g.find(\".filtertext1\" + s.element.id);\n      var h = g.find(\".filtertext2\" + s.element.id);\n\n      if (this._hasdatefilter && E.filtertype !== \"list\" && E.filtertype !== \"checkedlist\" && E.filtertype !== \"custom\") {\n        var e = j.parent();\n        var d = h.parent();\n\n        if (E.filtertype == \"date\") {\n          j.jqxDateTimeInput(\"destroy\");\n          h.jqxDateTimeInput(\"destroy\");\n          e.children().remove();\n          d.children().remove();\n\n          s._showwhere.text(s.gridlocalization.filtershowrowdatestring);\n\n          var b = a(\"<div class='filtertext1\" + s.element.id + \"' style=''></div>\");\n          e.append(b);\n\n          var n = function (c) {\n            var i = {\n              calendar: s.gridlocalization,\n              todayString: s.gridlocalization.todaystring,\n              clearString: s.gridlocalization.clearstring\n            };\n            c.jqxDateTimeInput({\n              disabled: s.disabled,\n              firstDayOfWeek: s.gridlocalization.firstDay,\n              localization: i,\n              rtl: s.rtl,\n              width: s._filterpanelwidth - 10,\n              height: 24,\n              value: null,\n              formatString: E.cellsformat,\n              theme: s.theme\n            });\n          };\n\n          n(b);\n          var b = a(\"<div class='filtertext2\" + s.element.id + \"' style=''></div>\");\n          d.append(b);\n          n(b);\n        } else {\n          e.children().remove();\n          d.children().remove();\n\n          s._showwhere.text(s.gridlocalization.filtershowrowstring);\n\n          var b = a(\"<input autocomplete='off' class='filtertext1\" + s.element.id + \"' style='box-sizing: content-box; height: 16px; padding: 3px;' type='text'></input>\");\n          e.append(b);\n\n          var n = function (c) {\n            c.addClass(s.toThemeProperty(\"jqx-input\"));\n            c.addClass(s.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n            c.addClass(s.toThemeProperty(\"jqx-rc-all\"));\n            c.width(s._filterpanelwidth - 18);\n          };\n\n          n(b);\n          var b = a(\"<input autocomplete='off' class='filtertext2\" + s.element.id + \"' style='box-sizing: content-box; height: 16px; padding: 3px;' type='text'></input>\");\n          d.append(b);\n          n(b);\n        }\n\n        var j = g.find(\".filtertext1\" + s.element.id);\n        var h = g.find(\".filtertext2\" + s.element.id);\n      }\n\n      if (E.filtertype != \"date\") {\n        j.val(\"\");\n        h.val(\"\");\n      } else {\n        j.val(null);\n        h.val(null);\n      }\n\n      this.removeHandler(l, \"click\");\n      this.addHandler(l, \"click\", function () {\n        s._buildfilter(s, p, E);\n\n        s._closemenu();\n      });\n      this.removeHandler(N, \"click\");\n      this.addHandler(N, \"click\", function () {\n        s._clearfilter(s, p, E);\n\n        s._closemenu();\n      });\n      this.removeHandler(l, \"keydown\");\n      this.addHandler(l, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          s._buildfilter(s, p, E);\n\n          s._closemenu();\n        }\n      });\n      this.removeHandler(N, \"keydown\");\n      this.addHandler(N, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          s._clearfilter(s, p, E);\n\n          s._closemenu();\n        }\n      });\n      this.removeHandler(j, \"keydown\");\n      this.addHandler(j, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          l.trigger(\"click\");\n        }\n\n        if (c.keyCode === 27) {\n          s._closemenu();\n        }\n      });\n      this.removeHandler(h, \"keydown\");\n      this.addHandler(h, \"keydown\", function (c) {\n        if (c.keyCode === 13) {\n          l.trigger(\"click\");\n        }\n\n        if (c.keyCode === 27) {\n          s._closemenu();\n        }\n      });\n\n      if (this.filtermode === \"default\" && E.filtertype !== \"list\" && E.filtertype !== \"checkedlist\" && E.filtertype !== \"custom\") {\n        if (f.jqxDropDownList(\"source\") != u) {\n          f.jqxDropDownList({\n            enableBrowserBoundsDetection: false,\n            source: u\n          });\n          P.jqxDropDownList({\n            enableBrowserBoundsDetection: false,\n            source: u\n          });\n        }\n\n        if (Q == \"boolean\" || Q == \"bool\") {\n          f.jqxDropDownList({\n            autoDropDownHeight: true,\n            selectedIndex: 0\n          });\n          P.jqxDropDownList({\n            autoDropDownHeight: true,\n            selectedIndex: 0\n          });\n        } else {\n          var H = false;\n\n          if (u && u.length) {\n            if (u.length < 5) {\n              H = true;\n            }\n          }\n\n          f.jqxDropDownList({\n            autoDropDownHeight: H,\n            selectedIndex: 2\n          });\n          P.jqxDropDownList({\n            autoDropDownHeight: H,\n            selectedIndex: 2\n          });\n        }\n\n        m.jqxDropDownList({\n          selectedIndex: 0\n        });\n        var z = E.filter;\n        var M = new a.jqx.filter();\n        var x = \"\";\n\n        switch (Q) {\n          case \"number\":\n          case \"int\":\n          case \"float\":\n          case \"decimal\":\n            x = \"numericfilter\";\n            o = M.getoperatorsbyfiltertype(\"numericfilter\");\n            break;\n\n          case \"boolean\":\n          case \"bool\":\n            x = \"booleanfilter\";\n            o = M.getoperatorsbyfiltertype(\"booleanfilter\");\n            break;\n\n          case \"date\":\n          case \"time\":\n            x = \"datefilter\";\n            o = M.getoperatorsbyfiltertype(\"datefilter\");\n            break;\n\n          case \"string\":\n            x = \"stringfilter\";\n            o = M.getoperatorsbyfiltertype(\"stringfilter\");\n            break;\n        }\n\n        if (z != null) {\n          var e = z.getfilterat(0);\n          var d = z.getfilterat(1);\n          var I = z.getoperatorat(0);\n\n          if (s.updatefilterconditions) {\n            var o = [];\n            var r = s.updatefilterconditions(x, o);\n\n            if (r != undefined) {\n              for (var O = 0; O < r.length; O++) {\n                r[O] = r[O].toUpperCase();\n              }\n\n              z.setoperatorsbyfiltertype(x, r);\n              o = r;\n            }\n          }\n\n          var w = \"default\";\n\n          if (e != null) {\n            var D = o.indexOf(e.comparisonoperator);\n            var A = e.filtervalue;\n            j.val(A);\n            f.jqxDropDownList({\n              selectedIndex: D,\n              animationType: w\n            });\n          }\n\n          if (d != null) {\n            var C = o.indexOf(d.comparisonoperator);\n            var y = d.filtervalue;\n            h.val(y);\n            P.jqxDropDownList({\n              selectedIndex: C,\n              animationType: w\n            });\n          }\n\n          if (z.getoperatorat(0) == undefined) {\n            m.jqxDropDownList({\n              selectedIndex: 0,\n              animationType: w\n            });\n          } else {\n            if (z.getoperatorat(0) == \"and\" || z.getoperatorat(0) == 0) {\n              m.jqxDropDownList({\n                selectedIndex: 0\n              });\n            } else {\n              m.jqxDropDownList({\n                selectedIndex: 1\n              });\n            }\n          }\n        }\n\n        if (s.updatefilterpanel) {\n          s.updatefilterpanel(f, P, m, j, h, l, N, z, x, o);\n        }\n\n        if (!this._hasdatefilter || this._hasdatefilter && E.filtertype != \"date\") {\n          if (!this.touchdevice) {\n            j.focus();\n            setTimeout(function () {\n              j.focus();\n            }, 10);\n          }\n        }\n      } else {\n        if (this.filtermode === \"excel\" || E.filtertype === \"list\" || E.filtertype === \"checkedlist\") {\n          var v = s._getfilterdataadapter(E);\n\n          var x = s._getfiltertype(Q);\n\n          var L = this.filtermode === \"excel\" || E.filtertype === \"checkedlist\";\n          f.jqxListBox(\"focus\");\n          this.removeHandler(f, \"keyup\");\n          this.addHandler(f, \"keyup\", function (c) {\n            if (c.keyCode === 13) {\n              l.trigger(\"click\");\n            }\n\n            if (c.keyCode === 27) {\n              s._closemenu();\n            }\n          });\n\n          if (E.cellsformat) {\n            f.jqxListBox({\n              checkboxes: L,\n              displayMember: E.displayfield,\n              valueMember: E.displayfield + \"JQValue\",\n              source: v\n            });\n          } else {\n            f.jqxListBox({\n              checkboxes: L,\n              displayMember: E.displayfield,\n              valueMember: E.displayfield,\n              source: v\n            });\n          }\n\n          if (L) {\n            f.jqxListBox(\"insertAt\", {\n              label: s.gridlocalization.filterselectallstring\n            }, 0);\n            var F = f.data().jqxListBox.instance;\n            F.checkAll(false);\n            var B = this;\n\n            if (E.filter) {\n              F.uncheckAll(false);\n              var t = E.filter.getfilters();\n\n              for (var J = 0; J < F.items.length; J++) {\n                var G = F.items[J].value;\n                a.each(t, function () {\n                  if (this.condition == \"NOT_EQUAL\") {\n                    if (G != this.value) {\n                      F.uncheckIndex(J, false, false);\n                      return false;\n                    } else {\n                      if (G != null && this.value != null && G.toString() != this.value.toString()) {\n                        F.uncheckIndex(J, false, false);\n                        return false;\n                      }\n                    }\n                  } else {\n                    if (this.condition == \"EQUAL\") {\n                      if (G == this.value) {\n                        F.checkIndex(J, false, false);\n                        return false;\n                      } else {\n                        if (G != null && this.value != null && G.toString() == this.value.toString()) {\n                          F.checkIndex(J, false, false);\n                          return false;\n                        }\n                      }\n                    }\n                  }\n                });\n              }\n\n              F._updateCheckedItems();\n\n              var q = F.getCheckedItems().length;\n\n              if (F.items.length != q && q > 0) {\n                F.host.jqxListBox(\"indeterminateIndex\", 0, true, false);\n              }\n\n              if (q === F.items.length - 1) {\n                F.host.jqxListBox(\"checkIndex\", 0, true, false);\n              }\n            }\n          } else {\n            if (E.filter) {\n              var F = f.data().jqxListBox.instance;\n              F.clearSelection();\n              var t = E.filter.getfilters();\n\n              for (var J = 0; J < F.items.length; J++) {\n                var G = F.items[J].value;\n                a.each(t, function () {\n                  if (this.condition == \"NOT_EQUAL\") {\n                    if (G != this.value) {\n                      F.unselectIndex(J, false, false);\n                      return false;\n                    }\n                  } else {\n                    if (this.condition == \"EQUAL\") {\n                      if (G == this.value) {\n                        F.selectIndex(J, true, false);\n                        return false;\n                      }\n                    }\n                  }\n                });\n              }\n\n              F._renderItems();\n            }\n          }\n        }\n      }\n    },\n    _initfilterpanel: function (z, b, c, p, w) {\n      if (z == null || z == undefined) {\n        z = this;\n      }\n\n      b[0].innerHTML = \"\";\n      var t = a(\"<div class='filter' style='position: absolute; bottom: 3px; margin-left: 3px;'></div>\");\n      b.append(t);\n      var n = a(\"<div class='filter showwhere' style='height: 18px; margin-top: 3px; margin-bottom: 3px;'></div>\");\n      n.text(z.gridlocalization.filtershowrowstring);\n      this._showwhere = n;\n      var o = w ? \"ex\" : \"\";\n      var v = a(\"<div class='filter filter1' id='filter1\" + z.element.id + o + \"'></div>\");\n      var h = a(\"<div class='filter filter2' id='filter2\" + z.element.id + o + \"' style='margin-top: 3px; margin-bottom: 3px;'></div>\");\n      var s = a(\"<div class='filter filter3' id='filter3\" + z.element.id + o + \"'></div>\");\n\n      var e = z._getcolumntypebydatafield(c);\n\n      if (!v.jqxDropDownList) {\n        throw new Error(\"jqxGrid: jqxdropdownlist.js is not loaded.\");\n        return;\n      }\n\n      var q = z._getfiltersbytype(e);\n\n      this._hasdatefilter = false;\n      this._filterpanelwidth = p;\n\n      if (this.columns && this.columns.records) {\n        for (var u = 0; u < this.columns.records.length; u++) {\n          if (this.columns.records[u].filtertype == \"date\") {\n            this._hasdatefilter = true;\n            break;\n          }\n        }\n      } else {\n        if (this.columns && !this.columns.records) {\n          for (var u = 0; u < this.columns.length; u++) {\n            if (this.columns[u].filtertype == \"date\") {\n              this._hasdatefilter = true;\n              break;\n            }\n          }\n        }\n      }\n\n      this._hasdatefilter = true;\n      var k = a(\"<div style='margin-top:3px;' class='filter'><input autocomplete='off' class='filtertext1\" + z.element.id + \"' style='padding: 3px; height: 17px; margin-top: 3px; margin-bottom: 3px;' type='text'></input></div>\");\n      var m = k.find(\"input\");\n      m.addClass(this.toThemeProperty(\"jqx-input\"));\n      m.addClass(this.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n      m.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      m.width(p - 18);\n      var l = a(\"<div style='margin-top:3px;' class='filter'><input autocomplete='off' class='filtertext2\" + z.element.id + \"' style='padding: 3px; height: 17px; margin-top: 3px;' type='text'></input></div>\");\n      var j = l.find(\"input\");\n      j.addClass(this.toThemeProperty(\"jqx-input\"));\n      j.addClass(this.toThemeProperty(\"jqx-filter-input jqx-widget-content\"));\n      j.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      j.width(p - 18);\n\n      if (z.rtl) {\n        m.css(\"direction\", \"rtl\");\n        j.css(\"direction\", \"rtl\");\n      }\n\n      var g = a(\"<div class='filter' style='height: 25px; text-align:center; margin-top: 12px; margin-left:-2px;'></div>\");\n      var f = a('<span tabIndex=0 id=\"filterbutton' + z.element.id + '\" class=\"filterbutton\" style=\"padding: 4px 12px;\">' + z.gridlocalization.filterstring + \"</span>\");\n      g.append(f);\n      var x = a('<span tabIndex=0 id=\"filterclearbutton' + z.element.id + '\" class=\"filterclearbutton\" style=\"position: relative; left: 2px; padding: 4px 12px; margin-left: 7px;\">' + z.gridlocalization.filterclearstring + \"</span>\");\n      g.append(x);\n      f.jqxButton({\n        height: 20,\n        theme: z.theme\n      });\n      x.jqxButton({\n        height: 20,\n        theme: z.theme\n      });\n\n      var y = function (A) {\n        if (A) {\n          if (A.text().indexOf(\"case sensitive\") != -1) {\n            var i = A.text();\n            i = i.replace(\"case sensitive\", \"match case\");\n            A.text(i);\n          }\n\n          A.css(\"font-family\", z.host.css(\"font-family\"));\n          A.css(\"font-size\", z.host.css(\"font-size\"));\n          A.css(\"top\", \"2px\");\n          A.css(\"position\", \"relative\");\n          return A;\n        }\n\n        return \"\";\n      };\n\n      if (this.filtermode === \"default\" && !w) {\n        t.append(n);\n        t.append(v);\n        v.jqxDropDownList({\n          _checkForHiddenParent: false,\n          autoItemsHeight: true,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          selectedIndex: 2,\n          width: p - 10,\n          height: 24,\n          dropDownHeight: 150,\n          dropDownWidth: p - 10,\n          selectionRenderer: y,\n          source: q,\n          theme: z.theme\n        });\n        t.append(k);\n        var r = new Array();\n        r[0] = z.gridlocalization.filterandconditionstring;\n        r[1] = z.gridlocalization.filterorconditionstring;\n        h.jqxDropDownList({\n          _checkForHiddenParent: false,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          autoDropDownHeight: true,\n          selectedIndex: 0,\n          width: 60,\n          height: 24,\n          source: r,\n          selectionRenderer: y,\n          theme: z.theme\n        });\n        t.append(h);\n        s.jqxDropDownList({\n          _checkForHiddenParent: false,\n          autoItemsHeight: true,\n          rtl: z.rtl,\n          enableBrowserBoundsDetection: false,\n          selectedIndex: 2,\n          width: p - 10,\n          height: 24,\n          dropDownHeight: 150,\n          dropDownWidth: p - 10,\n          selectionRenderer: y,\n          source: q,\n          theme: z.theme\n        });\n        t.append(s);\n        t.append(l);\n      } else {\n        if (this.filtermode === \"excel\" || w) {\n          t.append(n);\n          t.append(v);\n          v.attr(\"tabindex\", 0);\n          v.jqxListBox({\n            rtl: z.rtl,\n            _checkForHiddenParent: false,\n            checkboxes: true,\n            selectedIndex: 2,\n            width: p - 10,\n            height: 130,\n            theme: z.theme\n          });\n          var d = true;\n          z.addHandler(v, \"checkChange\", function (B) {\n            if (!d) {\n              return;\n            }\n\n            if (B.args.label != z.gridlocalization.filterselectallstring) {\n              d = false;\n              v.jqxListBox(\"checkIndex\", 0, true, false);\n              var i = v.jqxListBox(\"getCheckedItems\");\n              var A = v.jqxListBox(\"getItems\");\n\n              if (i.length == 1) {\n                v.jqxListBox(\"uncheckIndex\", 0, true, false);\n              } else {\n                if (A.length != i.length) {\n                  v.jqxListBox(\"indeterminateIndex\", 0, true, false);\n                }\n              }\n\n              d = true;\n            } else {\n              d = false;\n\n              if (B.args.checked) {\n                v.jqxListBox(\"checkAll\", false);\n              } else {\n                v.jqxListBox(\"uncheckAll\", false);\n              }\n\n              d = true;\n            }\n          });\n        }\n      }\n\n      t.append(g);\n\n      if (z.updatefilterpanel) {\n        z.updatefilterpanel(v, s, h, k, l, f, x, null, null, q);\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}