{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.jqxWidget(\"jqxScrollBar\", \"\", {});\n  a.extend(a.jqx._jqxScrollBar.prototype, {\n    defineInstance: function () {\n      var b = {\n        height: null,\n        width: null,\n        vertical: false,\n        min: 0,\n        max: 1000,\n        value: 0,\n        step: 10,\n        largestep: 50,\n        thumbMinSize: 10,\n        thumbSize: 0,\n        thumbStep: \"auto\",\n        roundedCorners: \"all\",\n        showButtons: true,\n        disabled: false,\n        touchMode: \"auto\",\n        touchModeStyle: \"auto\",\n        thumbTouchSize: 0,\n        _triggervaluechanged: true,\n        rtl: false,\n        areaDownCapture: false,\n        areaUpCapture: false,\n        _initialLayout: false,\n        offset: 0,\n        reference: 0,\n        velocity: 0,\n        frame: 0,\n        timestamp: 0,\n        ticker: null,\n        amplitude: 0,\n        target: 0\n      };\n\n      if (this === a.jqx._jqxScrollBar.prototype) {\n        return b;\n      }\n\n      a.extend(true, this, b);\n      return b;\n    },\n    createInstance: function (b) {\n      this.render();\n    },\n    render: function () {\n      this._mouseup = new Date();\n      var c = this;\n      var d = \"<div id='jqxScrollOuterWrap' style='box-sizing: content-box; width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'><div id='jqxScrollWrap' style='box-sizing: content-box; width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'><div id='jqxScrollBtnUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div><div id='jqxScrollAreaUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollThumb' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollAreaDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollBtnDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div></div></div>\";\n\n      if (a.jqx.utilities && a.jqx.utilities.scrollBarButtonsVisibility == \"hidden\") {\n        this.showButtons = false;\n      }\n\n      if (c.WinJS) {\n        MSApp.execUnsafeLocalFunction(function () {\n          c.host.html(d);\n        });\n      } else {\n        this.element.innerHTML = d;\n      }\n\n      if (this.width != undefined && parseInt(this.width) > 0) {\n        this.host.width(parseInt(this.width));\n      }\n\n      if (this.height != undefined && parseInt(this.height) > 0) {\n        this.host.height(parseInt(this.height));\n      }\n\n      this.isPercentage = false;\n\n      if (this.width != null && this.width.toString().indexOf(\"%\") != -1) {\n        this.host.width(this.width);\n        this.isPercentage = true;\n      }\n\n      if (this.height != null && this.height.toString().indexOf(\"%\") != -1) {\n        this.host.height(this.height);\n        this.isPercentage = true;\n      }\n\n      if (this.isPercentage) {\n        var e = this;\n        a.jqx.utilities.resize(this.host, function () {\n          e._arrange();\n        }, false);\n      }\n\n      this.thumbCapture = false;\n      this.scrollOuterWrap = a(this.element.firstChild);\n      this.scrollWrap = a(this.scrollOuterWrap[0].firstChild);\n      this.btnUp = a(this.scrollWrap[0].firstChild);\n      this.areaUp = a(this.btnUp[0].nextSibling);\n      this.btnThumb = a(this.areaUp[0].nextSibling);\n      this.arrowUp = a(this.btnUp[0].firstChild);\n      this.areaDown = a(this.btnThumb[0].nextSibling);\n      this.btnDown = a(this.areaDown[0].nextSibling);\n      this.arrowDown = a(this.btnDown[0].firstChild);\n      var b = this.element.id;\n      this.btnUp[0].id = \"jqxScrollBtnUp\" + b;\n      this.btnDown[0].id = \"jqxScrollBtnDown\" + b;\n      this.btnThumb[0].id = \"jqxScrollThumb\" + b;\n      this.areaUp[0].id = \"jqxScrollAreaUp\" + b;\n      this.areaDown[0].id = \"jqxScrollAreaDown\" + b;\n      this.scrollWrap[0].id = \"jqxScrollWrap\" + b;\n      this.scrollOuterWrap[0].id = \"jqxScrollOuterWrap\" + b;\n\n      if (!this.host.jqxRepeatButton) {\n        throw new Error(\"jqxScrollBar: Missing reference to jqxbuttons.js.\");\n        return;\n      }\n\n      this.btnUp.jqxRepeatButton({\n        _ariaDisabled: true,\n        overrideTheme: true,\n        disabled: this.disabled\n      });\n      this.btnDown.jqxRepeatButton({\n        _ariaDisabled: true,\n        overrideTheme: true,\n        disabled: this.disabled\n      });\n      this.btnDownInstance = a.data(this.btnDown[0], \"jqxRepeatButton\").instance;\n      this.btnUpInstance = a.data(this.btnUp[0], \"jqxRepeatButton\").instance;\n      this.areaUp.jqxRepeatButton({\n        _scrollAreaButton: true,\n        _ariaDisabled: true,\n        overrideTheme: true\n      });\n      this.areaDown.jqxRepeatButton({\n        _scrollAreaButton: true,\n        _ariaDisabled: true,\n        overrideTheme: true\n      });\n      this.btnThumb.jqxButton({\n        _ariaDisabled: true,\n        overrideTheme: true,\n        disabled: this.disabled\n      });\n\n      this.propertyChangeMap.value = function (f, h, g, i) {\n        if (!isNaN(i)) {\n          if (g != i) {\n            f.setPosition(parseFloat(i), true);\n          }\n        }\n      };\n\n      this.propertyChangeMap.width = function (f, h, g, i) {\n        if (f.width != undefined && parseInt(f.width) > 0) {\n          f.host.width(parseInt(f.width));\n\n          f._arrange();\n        }\n      };\n\n      this.propertyChangeMap.height = function (f, h, g, i) {\n        if (f.height != undefined && parseInt(f.height) > 0) {\n          f.host.height(parseInt(f.height));\n\n          f._arrange();\n        }\n      };\n\n      this.propertyChangeMap.theme = function (f, h, g, i) {\n        f.setTheme();\n      };\n\n      this.propertyChangeMap.max = function (f, h, g, i) {\n        if (!isNaN(i)) {\n          if (g != i) {\n            f.max = parseInt(i);\n\n            if (f.min > f.max) {\n              f.max = f.min + 1;\n            }\n\n            f._arrange();\n\n            f.setPosition(f.value);\n          }\n        }\n      };\n\n      this.propertyChangeMap.min = function (f, h, g, i) {\n        if (!isNaN(i)) {\n          if (g != i) {\n            f.min = parseInt(i);\n\n            if (f.min > f.max) {\n              f.max = f.min + 1;\n            }\n\n            f._arrange();\n\n            f.setPosition(f.value);\n          }\n        }\n      };\n\n      this.propertyChangeMap.disabled = function (f, h, g, i) {\n        if (g != i) {\n          if (i) {\n            f.host.addClass(f.toThemeProperty(\"jqx-fill-state-disabled\"));\n          } else {\n            f.host.removeClass(f.toThemeProperty(\"jqx-fill-state-disabled\"));\n          }\n\n          f.btnUp.jqxRepeatButton(\"disabled\", f.disabled);\n          f.btnDown.jqxRepeatButton(\"disabled\", f.disabled);\n          f.btnThumb.jqxButton(\"disabled\", f.disabled);\n        }\n      };\n\n      this.propertyChangeMap.touchMode = function (f, h, g, i) {\n        if (g != i) {\n          f._updateTouchBehavior();\n\n          if (i === true) {\n            f.showButtons = false;\n            f.refresh();\n          } else {\n            if (i === false) {\n              f.showButtons = true;\n              f.refresh();\n            }\n          }\n        }\n      };\n\n      this.propertyChangeMap.rtl = function (f, h, g, i) {\n        if (g != i) {\n          f.refresh();\n        }\n      };\n\n      this.buttonUpCapture = false;\n      this.buttonDownCapture = false;\n\n      this._updateTouchBehavior();\n\n      this.setPosition(this.value);\n\n      this._addHandlers();\n\n      this.setTheme();\n    },\n    resize: function (c, b) {\n      this.width = c;\n      this.height = b;\n\n      this._arrange();\n    },\n    _updateTouchBehavior: function () {\n      this.isTouchDevice = a.jqx.mobile.isTouchDevice();\n\n      if (this.touchMode == true) {\n        if (a.jqx.browser.msie && a.jqx.browser.version < 9) {\n          this.setTheme();\n          return;\n        }\n\n        this.isTouchDevice = true;\n        a.jqx.mobile.setMobileSimulator(this.btnThumb[0]);\n\n        this._removeHandlers();\n\n        this._addHandlers();\n\n        this.setTheme();\n      } else {\n        if (this.touchMode == false) {\n          this.isTouchDevice = false;\n        }\n      }\n    },\n    _addHandlers: function () {\n      var j = this;\n      var e = false;\n\n      try {\n        if (\"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch) {\n          e = true;\n          this._touchSupport = true;\n        }\n      } catch (f) {}\n\n      if (j.isTouchDevice || e) {\n        this.addHandler(this.btnThumb, a.jqx.mobile.getTouchEventName(\"touchend\"), function (k) {\n          var l = j.vertical ? j.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\") : j.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\");\n          var m = j.toThemeProperty(\"jqx-fill-state-pressed\");\n          j.btnThumb.removeClass(l);\n          j.btnThumb.removeClass(m);\n\n          if (!j.disabled) {\n            j.handlemouseup(j, k);\n          }\n\n          return false;\n        });\n        this.addHandler(this.btnThumb, a.jqx.mobile.getTouchEventName(\"touchstart\"), function (k) {\n          if (!j.disabled) {\n            if (j.touchMode == true) {\n              k.clientX = k.originalEvent.clientX;\n              k.clientY = k.originalEvent.clientY;\n            } else {\n              var l = k;\n\n              if (l.originalEvent.touches && l.originalEvent.touches.length) {\n                k.clientX = l.originalEvent.touches[0].clientX;\n                k.clientY = l.originalEvent.touches[0].clientY;\n              } else {\n                k.clientX = k.originalEvent.clientX;\n                k.clientY = k.originalEvent.clientY;\n              }\n            }\n\n            j.handlemousedown(k);\n\n            if (k.preventDefault) {\n              k.preventDefault();\n            }\n          }\n        });\n        a.jqx.mobile.touchScroll(this.element, j.max, function (q, p, l, k, m) {\n          if (j.host.css(\"visibility\") == \"visible\") {\n            if (j.touchMode == true) {\n              m.clientX = m.originalEvent.clientX;\n              m.clientY = m.originalEvent.clientY;\n            } else {\n              var o = m;\n\n              if (o.originalEvent.touches && o.originalEvent.touches.length) {\n                m.clientX = o.originalEvent.touches[0].clientX;\n                m.clientY = o.originalEvent.touches[0].clientY;\n              } else {\n                m.clientX = m.originalEvent.clientX;\n                m.clientY = m.originalEvent.clientY;\n              }\n            }\n\n            var n = j.vertical ? j.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\") : j.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\");\n            j.btnThumb.addClass(n);\n            j.btnThumb.addClass(j.toThemeProperty(\"jqx-fill-state-pressed\"));\n            j.thumbCapture = true;\n            j.handlemousemove(m);\n          }\n        }, j.element.id, j.host, j.host);\n      }\n\n      if (!this.isTouchDevice) {\n        try {\n          if (document.referrer != \"\" || window.frameElement) {\n            if (window.top != null && window.top != window.self) {\n              var b = null;\n\n              if (window.parent && document.referrer) {\n                b = document.referrer;\n              }\n\n              if (b && b.indexOf(document.location.host) != -1) {\n                var g = function (k) {\n                  if (!j.disabled) {\n                    j.handlemouseup(j, k);\n                  }\n                };\n\n                if (window.top.document.addEventListener) {\n                  window.top.document.addEventListener(\"mouseup\", g, false);\n                } else {\n                  if (window.top.document.attachEvent) {\n                    window.top.document.attachEvent(\"onmouseup\", g);\n                  }\n                }\n              }\n            }\n          }\n        } catch (i) {}\n\n        var c = \"click mouseup mousedown\";\n        this.addHandler(this.btnDown, c, function (l) {\n          var k = j.step;\n\n          if (Math.abs(j.max - j.min) <= k) {\n            k = 1;\n          }\n\n          if (j.rtl && !j.vertical) {\n            k = -j.step;\n          }\n\n          switch (l.type) {\n            case \"click\":\n              if (j.buttonDownCapture && !j.isTouchDevice) {\n                if (!j.disabled) {\n                  j.setPosition(j.value + k);\n                }\n              } else {\n                if (!j.disabled && j.isTouchDevice) {\n                  j.setPosition(j.value + k);\n                }\n              }\n\n              break;\n\n            case \"mouseup\":\n              if (!j.btnDownInstance.base.disabled && j.buttonDownCapture) {\n                j.buttonDownCapture = false;\n                j.btnDown.removeClass(j.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n                j.btnDown.removeClass(j.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n                j._removeArrowClasses(\"pressed\", \"down\");\n\n                j.handlemouseup(j, l);\n                j.setPosition(j.value + k);\n                return false;\n              }\n\n              break;\n\n            case \"mousedown\":\n              if (!j.btnDownInstance.base.disabled) {\n                j.buttonDownCapture = true;\n                j.btnDown.addClass(j.toThemeProperty(\"jqx-fill-state-pressed\"));\n                j.btnDown.addClass(j.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n\n                j._addArrowClasses(\"pressed\", \"down\");\n\n                return false;\n              }\n\n              break;\n          }\n        });\n        this.addHandler(this.btnUp, c, function (l) {\n          var k = j.step;\n\n          if (Math.abs(j.max - j.min) <= k) {\n            k = 1;\n          }\n\n          if (j.rtl && !j.vertical) {\n            k = -j.step;\n          }\n\n          switch (l.type) {\n            case \"click\":\n              if (j.buttonUpCapture && !j.isTouchDevice) {\n                if (!j.disabled) {\n                  j.setPosition(j.value - k);\n                }\n              } else {\n                if (!j.disabled && j.isTouchDevice) {\n                  j.setPosition(j.value - k);\n                }\n              }\n\n              break;\n\n            case \"mouseup\":\n              if (!j.btnUpInstance.base.disabled && j.buttonUpCapture) {\n                j.buttonUpCapture = false;\n                j.btnUp.removeClass(j.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n                j.btnUp.removeClass(j.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n                j._removeArrowClasses(\"pressed\", \"up\");\n\n                j.handlemouseup(j, l);\n                j.setPosition(j.value - k);\n                return false;\n              }\n\n              break;\n\n            case \"mousedown\":\n              if (!j.btnUpInstance.base.disabled) {\n                j.buttonUpCapture = true;\n                j.btnUp.addClass(j.toThemeProperty(\"jqx-fill-state-pressed\"));\n                j.btnUp.addClass(j.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n\n                j._addArrowClasses(\"pressed\", \"up\");\n\n                return false;\n              }\n\n              break;\n          }\n        });\n      }\n\n      var h = \"click\";\n\n      if (this.isTouchDevice) {\n        h = a.jqx.mobile.getTouchEventName(\"touchend\");\n      }\n\n      this.addHandler(this.areaUp, h, function (l) {\n        if (!j.disabled) {\n          var k = j.largestep;\n\n          if (j.rtl && !j.vertical) {\n            k = -j.largestep;\n          }\n\n          j.setPosition(j.value - k);\n          return false;\n        }\n      });\n      this.addHandler(this.areaDown, h, function (l) {\n        if (!j.disabled) {\n          var k = j.largestep;\n\n          if (j.rtl && !j.vertical) {\n            k = -j.largestep;\n          }\n\n          j.setPosition(j.value + k);\n          return false;\n        }\n      });\n      this.addHandler(this.areaUp, \"mousedown\", function (k) {\n        if (!j.disabled) {\n          j.areaUpCapture = true;\n          return false;\n        }\n      });\n      this.addHandler(this.areaDown, \"mousedown\", function (k) {\n        if (!j.disabled) {\n          j.areaDownCapture = true;\n          return false;\n        }\n      });\n      this.addHandler(this.btnThumb, \"mousedown dragstart\", function (k) {\n        if (k.type === \"dragstart\") {\n          return false;\n        }\n\n        if (!j.disabled) {\n          j.handlemousedown(k);\n        }\n\n        if (k.preventDefault) {\n          k.preventDefault();\n        }\n      });\n      this.addHandler(a(document), \"mouseup.\" + this.element.id, function (k) {\n        if (!j.disabled) {\n          j.handlemouseup(j, k);\n        }\n      });\n\n      if (!this.isTouchDevice) {\n        this.mousemoveFunc = function (k) {\n          if (!j.disabled) {\n            j.handlemousemove(k);\n          }\n        };\n\n        this.addHandler(a(document), \"mousemove.\" + this.element.id, this.mousemoveFunc);\n        this.addHandler(a(document), \"mouseleave.\" + this.element.id, function (k) {\n          if (!j.disabled) {\n            j.handlemouseleave(k);\n          }\n        });\n        this.addHandler(a(document), \"mouseenter.\" + this.element.id, function (k) {\n          if (!j.disabled) {\n            j.handlemouseenter(k);\n          }\n        });\n\n        if (!j.disabled) {\n          this.addHandler(this.btnUp, \"mouseenter mouseleave\", function (k) {\n            if (k.type === \"mouseenter\") {\n              if (!j.disabled && !j.btnUpInstance.base.disabled && j.touchMode != true) {\n                j.btnUp.addClass(j.toThemeProperty(\"jqx-scrollbar-button-state-hover\"));\n                j.btnUp.addClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                j._addArrowClasses(\"hover\", \"up\");\n              }\n            } else {\n              if (!j.disabled && !j.btnUpInstance.base.disabled && j.touchMode != true) {\n                j.btnUp.removeClass(j.toThemeProperty(\"jqx-scrollbar-button-state-hover\"));\n                j.btnUp.removeClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                j._removeArrowClasses(\"hover\", \"up\");\n              }\n            }\n          });\n          var d = j.toThemeProperty(\"jqx-scrollbar-thumb-state-hover\");\n\n          if (!j.vertical) {\n            d = j.toThemeProperty(\"jqx-scrollbar-thumb-state-hover-horizontal\");\n          }\n\n          this.addHandler(this.btnThumb, \"mouseenter mouseleave\", function (k) {\n            if (k.type === \"mouseenter\") {\n              if (!j.disabled && j.touchMode != true) {\n                j.btnThumb.addClass(d);\n                j.btnThumb.addClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n              }\n            } else {\n              if (!j.disabled && j.touchMode != true) {\n                j.btnThumb.removeClass(d);\n                j.btnThumb.removeClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n              }\n            }\n          });\n          this.addHandler(this.btnDown, \"mouseenter mouseleave\", function (k) {\n            if (k.type === \"mouseenter\") {\n              if (!j.disabled && !j.btnDownInstance.base.disabled && j.touchMode != true) {\n                j.btnDown.addClass(j.toThemeProperty(\"jqx-scrollbar-button-state-hover\"));\n                j.btnDown.addClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                j._addArrowClasses(\"hover\", \"down\");\n              }\n            } else {\n              if (!j.disabled && !j.btnDownInstance.base.disabled && j.touchMode != true) {\n                j.btnDown.removeClass(j.toThemeProperty(\"jqx-scrollbar-button-state-hover\"));\n                j.btnDown.removeClass(j.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                j._removeArrowClasses(\"hover\", \"down\");\n              }\n            }\n          });\n        }\n      }\n    },\n    destroy: function () {\n      var b = this.btnUp;\n      var f = this.btnDown;\n      var d = this.btnThumb;\n      var c = this.scrollWrap;\n      var h = this.areaUp;\n      var e = this.areaDown;\n      this.arrowUp.remove();\n      delete this.arrowUp;\n      this.arrowDown.remove();\n      delete this.arrowDown;\n      e.removeClass();\n      h.removeClass();\n      f.removeClass();\n      b.removeClass();\n      d.removeClass();\n      b.jqxRepeatButton(\"destroy\");\n      f.jqxRepeatButton(\"destroy\");\n      h.jqxRepeatButton(\"destroy\");\n      e.jqxRepeatButton(\"destroy\");\n      d.jqxButton(\"destroy\");\n      var g = a.data(this.element, \"jqxScrollBar\");\n\n      this._removeHandlers();\n\n      this.btnUp = null;\n      this.btnDown = null;\n      this.scrollWrap = null;\n      this.areaUp = null;\n      this.areaDown = null;\n      this.scrollOuterWrap = null;\n      delete this.mousemoveFunc;\n      delete this.btnDownInstance;\n      delete this.btnUpInstance;\n      delete this.scrollOuterWrap;\n      delete this.scrollWrap;\n      delete this.btnDown;\n      delete this.areaDown;\n      delete this.areaUp;\n      delete this.btnDown;\n      delete this.btnUp;\n      delete this.btnThumb;\n      delete this.propertyChangeMap.value;\n      delete this.propertyChangeMap.min;\n      delete this.propertyChangeMap.max;\n      delete this.propertyChangeMap.touchMode;\n      delete this.propertyChangeMap.disabled;\n      delete this.propertyChangeMap.theme;\n      delete this.propertyChangeMap;\n\n      if (g) {\n        delete g.instance;\n      }\n\n      this.host.removeData();\n      this.host.remove();\n      delete this.host;\n      delete this.set;\n      delete this.get;\n      delete this.call;\n      delete this.element;\n    },\n    _removeHandlers: function () {\n      this.removeHandler(this.btnUp, \"mouseenter\");\n      this.removeHandler(this.btnDown, \"mouseenter\");\n      this.removeHandler(this.btnThumb, \"mouseenter\");\n      this.removeHandler(this.btnUp, \"mouseleave\");\n      this.removeHandler(this.btnDown, \"mouseleave\");\n      this.removeHandler(this.btnThumb, \"mouseleave\");\n      this.removeHandler(this.btnUp, \"click\");\n      this.removeHandler(this.btnDown, \"click\");\n      this.removeHandler(this.btnDown, \"mouseup\");\n      this.removeHandler(this.btnUp, \"mouseup\");\n      this.removeHandler(this.btnDown, \"mousedown\");\n      this.removeHandler(this.btnUp, \"mousedown\");\n      this.removeHandler(this.areaUp, \"mousedown\");\n      this.removeHandler(this.areaDown, \"mousedown\");\n      this.removeHandler(this.areaUp, \"click\");\n      this.removeHandler(this.areaDown, \"click\");\n      this.removeHandler(this.btnThumb, \"mousedown\");\n      this.removeHandler(this.btnThumb, \"dragstart\");\n      this.removeHandler(a(document), \"mouseup.\" + this.element.id);\n\n      if (!this.mousemoveFunc) {\n        this.removeHandler(a(document), \"mousemove.\" + this.element.id);\n      } else {\n        this.removeHandler(a(document), \"mousemove.\" + this.element.id, this.mousemoveFunc);\n      }\n\n      this.removeHandler(a(document), \"mouseleave.\" + this.element.id);\n      this.removeHandler(a(document), \"mouseenter.\" + this.element.id);\n      var b = this;\n    },\n    _addArrowClasses: function (c, b) {\n      if (c == \"pressed\") {\n        c = \"selected\";\n      }\n\n      if (c != \"\") {\n        c = \"-\" + c;\n      }\n\n      if (this.vertical) {\n        if (b == \"up\" || b == undefined) {\n          this.arrowUp.addClass(this.toThemeProperty(\"jqx-icon-arrow-up\" + c));\n        }\n\n        if (b == \"down\" || b == undefined) {\n          this.arrowDown.addClass(this.toThemeProperty(\"jqx-icon-arrow-down\" + c));\n        }\n      } else {\n        if (b == \"up\" || b == undefined) {\n          this.arrowUp.addClass(this.toThemeProperty(\"jqx-icon-arrow-left\" + c));\n        }\n\n        if (b == \"down\" || b == undefined) {\n          this.arrowDown.addClass(this.toThemeProperty(\"jqx-icon-arrow-right\" + c));\n        }\n      }\n    },\n    _removeArrowClasses: function (c, b) {\n      if (c == \"pressed\") {\n        c = \"selected\";\n      }\n\n      if (c != \"\") {\n        c = \"-\" + c;\n      }\n\n      if (this.vertical) {\n        if (b == \"up\" || b == undefined) {\n          this.arrowUp.removeClass(this.toThemeProperty(\"jqx-icon-arrow-up\" + c));\n        }\n\n        if (b == \"down\" || b == undefined) {\n          this.arrowDown.removeClass(this.toThemeProperty(\"jqx-icon-arrow-down\" + c));\n        }\n      } else {\n        if (b == \"up\" || b == undefined) {\n          this.arrowUp.removeClass(this.toThemeProperty(\"jqx-icon-arrow-left\" + c));\n        }\n\n        if (b == \"down\" || b == undefined) {\n          this.arrowDown.removeClass(this.toThemeProperty(\"jqx-icon-arrow-right\" + c));\n        }\n      }\n    },\n    setTheme: function () {\n      var o = this.btnUp;\n      var m = this.btnDown;\n      var p = this.btnThumb;\n      var e = this.scrollWrap;\n      var g = this.areaUp;\n      var h = this.areaDown;\n      var f = this.arrowUp;\n      var i = this.arrowDown;\n      this.scrollWrap[0].className = this.toThemeProperty(\"jqx-reset\");\n      this.scrollOuterWrap[0].className = this.toThemeProperty(\"jqx-reset\");\n      var k = this.toThemeProperty(\"jqx-reset\");\n      this.areaDown[0].className = k;\n      this.areaUp[0].className = k;\n      var d = this.toThemeProperty(\"jqx-scrollbar\") + \" \" + this.toThemeProperty(\"jqx-widget\") + \" \" + this.toThemeProperty(\"jqx-widget-content\");\n      this.host.addClass(d);\n\n      if (this.isTouchDevice) {\n        this.host.addClass(this.toThemeProperty(\"jqx-scrollbar-mobile\"));\n      }\n\n      m[0].className = this.toThemeProperty(\"jqx-scrollbar-button-state-normal\");\n      o[0].className = this.toThemeProperty(\"jqx-scrollbar-button-state-normal\");\n      var q = \"\";\n\n      if (this.vertical) {\n        f[0].className = k + \" \" + this.toThemeProperty(\"jqx-icon-arrow-up\");\n        i[0].className = k + \" \" + this.toThemeProperty(\"jqx-icon-arrow-down\");\n        q = this.toThemeProperty(\"jqx-scrollbar-thumb-state-normal\");\n      } else {\n        f[0].className = k + \" \" + this.toThemeProperty(\"jqx-icon-arrow-left\");\n        i[0].className = k + \" \" + this.toThemeProperty(\"jqx-icon-arrow-right\");\n        q = this.toThemeProperty(\"jqx-scrollbar-thumb-state-normal-horizontal\");\n      }\n\n      q += \" \" + this.toThemeProperty(\"jqx-fill-state-normal\");\n      p[0].className = q;\n\n      if (this.disabled) {\n        e.addClass(this.toThemeProperty(\"jqx-fill-state-disabled\"));\n        e.removeClass(this.toThemeProperty(\"jqx-scrollbar-state-normal\"));\n      } else {\n        e.addClass(this.toThemeProperty(\"jqx-scrollbar-state-normal\"));\n        e.removeClass(this.toThemeProperty(\"jqx-fill-state-disabled\"));\n      }\n\n      if (this.roundedCorners == \"all\") {\n        this.host.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n\n        if (this.vertical) {\n          var j = a.jqx.cssroundedcorners(\"top\");\n          j = this.toThemeProperty(j);\n          o.addClass(j);\n          var c = a.jqx.cssroundedcorners(\"bottom\");\n          c = this.toThemeProperty(c);\n          m.addClass(c);\n        } else {\n          var n = a.jqx.cssroundedcorners(\"left\");\n          n = this.toThemeProperty(n);\n          o.addClass(n);\n          var l = a.jqx.cssroundedcorners(\"right\");\n          l = this.toThemeProperty(l);\n          m.addClass(l);\n        }\n      } else {\n        var b = a.jqx.cssroundedcorners(this.roundedCorners);\n        b = this.toThemeProperty(b);\n        o.addClass(b);\n        m.addClass(b);\n      }\n\n      var b = a.jqx.cssroundedcorners(this.roundedCorners);\n      b = this.toThemeProperty(b);\n\n      if (!p.hasClass(b)) {\n        p.addClass(b);\n      }\n\n      if (o.css(\"display\") === \"none\") {\n        this.showButtons = false;\n        this.touchModeStyle = true;\n        p.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-normal-touch\"));\n      }\n\n      if (this.isTouchDevice && this.touchModeStyle != false) {\n        this.showButtons = false;\n        p.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-normal-touch\"));\n      }\n    },\n    isScrolling: function () {\n      if (this.thumbCapture == undefined || this.buttonDownCapture == undefined || this.buttonUpCapture == undefined || this.areaDownCapture == undefined || this.areaUpCapture == undefined) {\n        return false;\n      }\n\n      return this.thumbCapture || this.buttonDownCapture || this.buttonUpCapture || this.areaDownCapture || this.areaUpCapture;\n    },\n    track: function () {\n      var d, b, e, c;\n      d = Date.now();\n      b = d - this.timestamp;\n      this.timestamp = d;\n      e = this.offset - this.frame;\n      this.frame = this.offset;\n      c = 1000 * e / (1 + b);\n      this.velocity = 0.2 * c + 0.2 * this.velocity;\n    },\n    handlemousedown: function (e) {\n      if (this.thumbCapture == undefined || this.thumbCapture == false) {\n        this.thumbCapture = true;\n        var c = this.btnThumb;\n\n        if (c != null) {\n          c.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n          if (this.vertical) {\n            c.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\"));\n          } else {\n            c.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\"));\n          }\n        }\n      }\n\n      var d = this;\n\n      function b(f) {\n        d.reference = parseInt(d.btnThumb[0].style.top);\n        d.offset = parseInt(d.btnThumb[0].style.top);\n\n        if (!d.vertical) {\n          d.reference = parseInt(d.btnThumb[0].style.left);\n          d.offset = parseInt(d.btnThumb[0].style.left);\n        }\n\n        d.velocity = d.amplitude = 0;\n        d.frame = d.offset;\n        d.timestamp = Date.now();\n        clearInterval(d.ticker);\n        d.ticker = setInterval(function () {\n          d.track();\n        }, 100);\n      }\n\n      if (this.thumbCapture && a.jqx.scrollAnimation) {\n        b(e);\n      }\n\n      this.dragStartX = e.clientX;\n      this.dragStartY = e.clientY;\n      this.dragStartValue = this.value;\n    },\n    toggleHover: function (c, b) {},\n    refresh: function () {\n      this._arrange();\n    },\n    _setElementPosition: function (c, b, d) {\n      if (!isNaN(b)) {\n        if (parseInt(c[0].style.left) != parseInt(b)) {\n          c[0].style.left = b + \"px\";\n        }\n      }\n\n      if (!isNaN(d)) {\n        if (parseInt(c[0].style.top) != parseInt(d)) {\n          c[0].style.top = d + \"px\";\n        }\n      }\n    },\n    _setElementTopPosition: function (b, c) {\n      if (!isNaN(c)) {\n        b[0].style.top = c + \"px\";\n      }\n    },\n    _setElementLeftPosition: function (c, b) {\n      if (!isNaN(b)) {\n        c[0].style.left = b + \"px\";\n      }\n    },\n    handlemouseleave: function (e) {\n      var b = this.btnUp;\n      var d = this.btnDown;\n\n      if (this.buttonDownCapture || this.buttonUpCapture) {\n        b.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n        d.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n\n        this._removeArrowClasses(\"pressed\");\n      }\n\n      if (this.thumbCapture != true) {\n        return;\n      }\n\n      var c = this.btnThumb;\n      var f = this.vertical ? this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\") : this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\");\n      c.removeClass(f);\n      c.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n    },\n    handlemouseenter: function (e) {\n      var b = this.btnUp;\n      var d = this.btnDown;\n\n      if (this.buttonUpCapture) {\n        b.addClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n        b.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n        this._addArrowClasses(\"pressed\", \"up\");\n      }\n\n      if (this.buttonDownCapture) {\n        d.addClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n        d.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n        this._addArrowClasses(\"pressed\", \"down\");\n      }\n\n      if (this.thumbCapture != true) {\n        return;\n      }\n\n      var c = this.btnThumb;\n\n      if (this.vertical) {\n        c.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\"));\n      } else {\n        c.addClass(this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\"));\n      }\n\n      c.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n    },\n    handlemousemove: function (b) {\n      var i = this.btnUp;\n      var e = this.btnDown;\n      var d = 0;\n\n      if (e == null || i == null) {\n        return;\n      }\n\n      if (i != null && e != null && this.buttonDownCapture != undefined && this.buttonUpCapture != undefined) {\n        if (this.buttonDownCapture && b.which == d) {\n          e.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n          e.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n          this._removeArrowClasses(\"pressed\", \"down\");\n\n          this.buttonDownCapture = false;\n        } else {\n          if (this.buttonUpCapture && b.which == d) {\n            i.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n            i.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n            this._removeArrowClasses(\"pressed\", \"up\");\n\n            this.buttonUpCapture = false;\n          }\n        }\n      }\n\n      if (this.thumbCapture != true) {\n        return false;\n      }\n\n      var k = this.btnThumb;\n\n      if (b.which == d && !this.isTouchDevice && !this._touchSupport) {\n        this.thumbCapture = false;\n\n        this._arrange();\n\n        var j = this.vertical ? this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\") : this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\");\n        k.removeClass(j);\n        k.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n        return true;\n      }\n\n      if (b.preventDefault != undefined) {\n        b.preventDefault();\n      }\n\n      if (b.originalEvent != null) {\n        b.originalEvent.mouseHandled = true;\n      }\n\n      if (b.stopPropagation != undefined) {\n        b.stopPropagation();\n      }\n\n      var l = 0;\n\n      try {\n        if (!this.vertical) {\n          l = b.clientX - this.dragStartX;\n        } else {\n          l = b.clientY - this.dragStartY;\n        }\n\n        var f = this._btnAndThumbSize;\n\n        if (!this._btnAndThumbSize) {\n          f = this.vertical ? i.height() + e.height() + k.height() : i.width() + e.width() + k.width();\n        }\n\n        var g = (this.max - this.min) / (this.scrollBarSize - f);\n\n        if (this.thumbStep == \"auto\") {\n          l *= g;\n        } else {\n          l *= g;\n\n          if (Math.abs(this.dragStartValue + l - this.value) >= parseInt(this.thumbStep)) {\n            var c = Math.round(parseInt(l) / this.thumbStep) * this.thumbStep;\n\n            if (this.rtl && !this.vertical) {\n              this.setPosition(this.dragStartValue - c);\n            } else {\n              this.setPosition(this.dragStartValue + c);\n            }\n\n            return false;\n          } else {\n            return false;\n          }\n        }\n\n        var c = l;\n\n        if (this.rtl && !this.vertical) {\n          c = -l;\n        }\n\n        this.setPosition(this.dragStartValue + c);\n        this.offset = parseInt(k[0].style.left);\n\n        if (this.vertical) {\n          this.offset = parseInt(k[0].style.top);\n        }\n      } catch (h) {\n        alert(h);\n      }\n\n      return false;\n    },\n    handlemouseup: function (j, b) {\n      var g = false;\n\n      if (this.thumbCapture) {\n        this.thumbCapture = false;\n        var i = this.btnThumb;\n        var h = this.vertical ? this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed\") : this.toThemeProperty(\"jqx-scrollbar-thumb-state-pressed-horizontal\");\n        i.removeClass(h);\n        i.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n        g = true;\n        this._mouseup = new Date();\n\n        if (a.jqx.scrollAnimation) {\n          var d = this;\n\n          function f() {\n            var k, o;\n\n            if (d.amplitude) {\n              k = Date.now() - d.timestamp;\n              o = -d.amplitude * Math.exp(-k / 325);\n\n              if (o > 0.5 || o < -0.5) {\n                var l = (d.max - d.min) / (d.scrollBarSize - d._btnAndThumbSize);\n                var n = l * (d.target + o);\n                var m = n;\n\n                if (d.rtl && !d.vertical) {\n                  m = -n;\n                }\n\n                d.setPosition(d.dragStartValue + m);\n                requestAnimationFrame(f);\n              } else {\n                var l = (d.max - d.min) / (d.scrollBarSize - d._btnAndThumbSize);\n                var n = l * (d.target + o);\n                var m = n;\n\n                if (d.rtl && !d.vertical) {\n                  m = -n;\n                }\n\n                d.setPosition(d.dragStartValue + m);\n              }\n            }\n          }\n\n          clearInterval(this.ticker);\n\n          if (this.velocity > 25 || this.velocity < -25) {\n            this.amplitude = 0.8 * this.velocity;\n            this.target = Math.round(this.offset + this.amplitude);\n\n            if (!this.vertical) {\n              this.target -= this.reference;\n            } else {\n              this.target -= this.reference;\n            }\n\n            this.timestamp = Date.now();\n            requestAnimationFrame(f);\n          }\n        }\n      }\n\n      this.areaDownCapture = this.areaUpCapture = false;\n\n      if (this.buttonUpCapture || this.buttonDownCapture) {\n        var e = this.btnUp;\n        var c = this.btnDown;\n        this.buttonUpCapture = false;\n        this.buttonDownCapture = false;\n        e.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n        c.removeClass(this.toThemeProperty(\"jqx-scrollbar-button-state-pressed\"));\n        e.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n        c.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n        this._removeArrowClasses(\"pressed\");\n\n        g = true;\n        this._mouseup = new Date();\n      }\n\n      if (g) {\n        if (b.preventDefault != undefined) {\n          b.preventDefault();\n        }\n\n        if (b.originalEvent != null) {\n          b.originalEvent.mouseHandled = true;\n        }\n\n        if (b.stopPropagation != undefined) {\n          b.stopPropagation();\n        }\n      }\n    },\n    setPosition: function (b, g) {\n      var d = this.element;\n\n      if (b == undefined || b == NaN) {\n        b = this.min;\n      }\n\n      if (b >= this.max) {\n        b = this.max;\n      }\n\n      if (b < this.min) {\n        b = this.min;\n      }\n\n      if (this.value !== b || g == true) {\n        if (b == this.max) {\n          var c = new a.Event(\"complete\");\n          this.host.trigger(c);\n        }\n\n        var f = this.value;\n\n        if (this._triggervaluechanged) {\n          var e = new a.Event(\"valueChanged\");\n          e.previousValue = this.value;\n          e.currentValue = b;\n        }\n\n        this.value = b;\n\n        this._positionelements();\n\n        if (this._triggervaluechanged) {\n          this.host.trigger(e);\n        }\n\n        if (this.valueChanged) {\n          this.valueChanged({\n            currentValue: this.value,\n            previousvalue: f\n          });\n        }\n      }\n\n      return b;\n    },\n    val: function (b) {\n      var c = function (e) {\n        for (var d in e) {\n          if (e.hasOwnProperty(d)) {\n            return false;\n          }\n        }\n\n        if (typeof b == \"number\") {\n          return false;\n        }\n\n        if (typeof b == \"date\") {\n          return false;\n        }\n\n        if (typeof b == \"boolean\") {\n          return false;\n        }\n\n        if (typeof b == \"string\") {\n          return false;\n        }\n\n        return true;\n      };\n\n      if (c(b) || arguments.length == 0) {\n        return this.value;\n      } else {\n        this.setPosition(b);\n        return b;\n      }\n    },\n    _getThumbSize: function (c) {\n      var b = this.max - this.min;\n      var d = 0;\n\n      if (b > 1) {\n        d = c / (b + c) * c;\n      } else {\n        if (b == 1) {\n          d = c - 1;\n        } else {\n          if (b == 0) {\n            d = c;\n          }\n        }\n      }\n\n      if (this.thumbSize > 0) {\n        d = this.thumbSize;\n      }\n\n      if (d < this.thumbMinSize) {\n        d = this.thumbMinSize;\n      }\n\n      return Math.min(d, c);\n    },\n    _positionelements: function () {\n      var g = this.element;\n      var n = this.areaUp;\n      var e = this.areaDown;\n      var h = this.btnUp;\n      var f = this.btnDown;\n      var o = this.btnThumb;\n      var b = this.scrollWrap;\n      var p = this._height ? this._height : this.host.height();\n      var c = this._width ? this._width : this.host.width();\n      var l = !this.vertical ? p : c;\n\n      if (!this.showButtons) {\n        l = 0;\n      }\n\n      var m = !this.vertical ? c : p;\n      this.scrollBarSize = m;\n\n      var d = this._getThumbSize(m - 2 * l);\n\n      d = Math.floor(d);\n\n      if (d < this.thumbMinSize) {\n        d = this.thumbMinSize;\n      }\n\n      if (p == NaN || p < 10) {\n        p = 10;\n      }\n\n      if (c == NaN || c < 10) {\n        c = 10;\n      }\n\n      l += 2;\n      this.btnSize = l;\n      var i = this._btnAndThumbSize;\n\n      if (!this._btnAndThumbSize) {\n        var i = this.vertical ? 2 * this.btnSize + o.outerHeight() : 2 * this.btnSize + o.outerWidth();\n        i = Math.round(i);\n      }\n\n      var k = (m - i) / (this.max - this.min) * (this.value - this.min);\n\n      if (this.rtl && !this.vertical) {\n        k = (m - i) / (this.max - this.min) * (this.max - this.value - this.min);\n      }\n\n      k = Math.round(k);\n\n      if (k < 0) {\n        k = 0;\n      }\n\n      if (this.vertical) {\n        var j = m - k - i;\n\n        if (j < 0) {\n          j = 0;\n        }\n\n        e[0].style.height = j + \"px\";\n        n[0].style.height = k + \"px\";\n\n        this._setElementTopPosition(n, l);\n\n        this._setElementTopPosition(o, l + k);\n\n        this._setElementTopPosition(e, l + k + d);\n      } else {\n        n[0].style.width = k + \"px\";\n\n        if (m - k - i >= 0) {\n          e[0].style.width = m - k - i + \"px\";\n        } else {\n          e[0].style.width = \"0px\";\n        }\n\n        this._setElementLeftPosition(n, l);\n\n        this._setElementLeftPosition(o, l + k);\n\n        this._setElementLeftPosition(e, 2 + l + k + d);\n      }\n    },\n    _arrange: function () {\n      var m = this;\n\n      if (m._initialLayout) {\n        m._initialLayout = false;\n        return;\n      }\n\n      if (m.min > m.max) {\n        var x = m.min;\n        m.min = m.max;\n        m.max = x;\n      }\n\n      if (m.min < 0) {\n        var k = m.max - m.min;\n        m.min = 0;\n        m.max = k;\n      }\n\n      var d = m.element;\n      var g = m.areaUp;\n      var t = m.areaDown;\n      var c = m.btnUp;\n      var l = m.btnDown;\n      var u = m.btnThumb;\n      var p = m.scrollWrap;\n      var n = parseInt(m.element.style.height);\n      var q = parseInt(m.element.style.width);\n\n      if (m.isPercentage) {\n        var n = m.host.height();\n        var q = m.host.width();\n      }\n\n      if (isNaN(n)) {\n        n = 0;\n      }\n\n      if (isNaN(q)) {\n        q = 0;\n      }\n\n      m._width = q;\n      m._height = n;\n      var b = !m.vertical ? n : q;\n\n      if (!m.showButtons) {\n        b = 0;\n      }\n\n      c[0].style.width = b + \"px\";\n      c[0].style.height = b + \"px\";\n      l[0].style.width = b + \"px\";\n      l[0].style.height = b + \"px\";\n\n      if (m.vertical) {\n        p[0].style.width = q + 2 + \"px\";\n      } else {\n        p[0].style.height = n + 2 + \"px\";\n      }\n\n      m._setElementPosition(c, 0, 0);\n\n      var s = b + 2;\n\n      if (m.vertical) {\n        m._setElementPosition(l, 0, n - s);\n      } else {\n        m._setElementPosition(l, q - s, 0);\n      }\n\n      var f = !m.vertical ? q : n;\n      m.scrollBarSize = f;\n\n      var h = m._getThumbSize(f - 2 * s);\n\n      h = Math.floor(h - 2);\n\n      if (h < m.thumbMinSize) {\n        h = m.thumbMinSize;\n      }\n\n      var o = false;\n\n      if (m.isTouchDevice && m.touchModeStyle != false) {\n        o = true;\n      }\n\n      if (!m.vertical) {\n        u[0].style.width = h + \"px\";\n        u[0].style.height = n + \"px\";\n\n        if (o && m.thumbTouchSize !== 0) {\n          u.css({\n            height: m.thumbTouchSize + \"px\"\n          });\n          u.css(\"margin-top\", (m.host.height() - m.thumbTouchSize) / 2);\n        }\n      } else {\n        u[0].style.width = q + \"px\";\n        u[0].style.height = h + \"px\";\n\n        if (o && m.thumbTouchSize !== 0) {\n          u.css({\n            width: m.thumbTouchSize + \"px\"\n          });\n          u.css(\"margin-left\", (m.host.width() - m.thumbTouchSize) / 2);\n        }\n      }\n\n      if (n == NaN || n < 10) {\n        n = 10;\n      }\n\n      if (q == NaN || q < 10) {\n        q = 10;\n      }\n\n      m.btnSize = b;\n      var e = m.vertical ? 2 * s + (2 + parseInt(u[0].style.height)) : 2 * s + (2 + parseInt(u[0].style.width));\n      e = Math.round(e);\n      m._btnAndThumbSize = e;\n      var w = (f - e) / (m.max - m.min) * (m.value - m.min);\n\n      if (m.rtl && !m.vertical) {\n        w = (f - e) / (m.max - m.min) * (m.max - m.value - m.min);\n      }\n\n      w = Math.round(w);\n\n      if (isNaN(w) || w < 0 || w === -Infinity || w === Infinity) {\n        w = 0;\n      }\n\n      if (m.vertical) {\n        var v = f - w - e;\n\n        if (v < 0) {\n          v = 0;\n        }\n\n        t[0].style.height = v + \"px\";\n        t[0].style.width = q + \"px\";\n        g[0].style.height = w + \"px\";\n        g[0].style.width = q + \"px\";\n        var i = parseInt(m.element.style.height);\n\n        if (m.isPercentage) {\n          i = m.host.height();\n        }\n\n        u[0].style.visibility = \"inherit\";\n\n        if (i - 3 * parseInt(b) < 0 || i < e) {\n          u[0].style.visibility = \"hidden\";\n        }\n\n        m._setElementPosition(g, 0, s);\n\n        m._setElementPosition(u, 0, s + w);\n\n        m._setElementPosition(t, 0, s + w + h);\n      } else {\n        if (w > 0) {\n          g[0].style.width = w + \"px\";\n        }\n\n        if (n > 0) {\n          g[0].style.height = n + \"px\";\n        }\n\n        var j = f - w - e;\n\n        if (j < 0) {\n          j = 0;\n        }\n\n        t[0].style.width = j + \"px\";\n        t[0].style.height = n + \"px\";\n        var r = parseInt(m.element.style.width);\n\n        if (m.isPercentage) {\n          r = m.host.width();\n        }\n\n        u[0].style.visibility = \"inherit\";\n\n        if (r - 3 * parseInt(b) < 0 || r < e) {\n          u[0].style.visibility = \"hidden\";\n        }\n\n        m._setElementPosition(g, s, 0);\n\n        m._setElementPosition(u, s + w, 0);\n\n        m._setElementPosition(t, s + w + h, 0);\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}