{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.dataview.grouping = function () {\n    this.loadgrouprecords = function (B, E, p, C, G, e, P, D, v) {\n      var K = B;\n      var h = this;\n      var O = new Array();\n\n      for (var l = 0; l < h.groups.length; l++) {\n        O[l] = h.generatekey();\n      }\n\n      var I = new Array();\n      var b = 0;\n      var O = O;\n      var y = new Array();\n      var N = E;\n      var d = E;\n      var z = h.groups.length;\n      this.loadedrecords = new Array();\n      this.bounditems = new Array();\n      this.loadedrecords = new Array();\n      this.loadedrootgroups = new Array();\n      this.loadedgroups = new Array();\n      this.loadedgroupsByKey = new Array();\n      this.sortedgroups = new Array();\n      var M = this.sortdata != null;\n      var Q = M ? this.sortdata : this.records;\n\n      if (this.pageable) {\n        var s = new Array();\n        var A = 0;\n\n        if (!Q[E]) {\n          a.each(Q, function (i, q) {\n            s[E + i++] = this;\n          });\n          Q = s;\n        }\n      }\n\n      if (this.virtualmode) {\n        var s = new Array();\n        var A = 0;\n\n        for (var N = 0; N < p - E; N++) {\n          if (Q[N]) {\n            s[E + A++] = Q[N];\n          } else {\n            if (Q[E + A]) {\n              s[E + A] = Q[E + A];\n              A++;\n            }\n          }\n        }\n\n        N = 0;\n        Q = s;\n      }\n\n      for (var c = E; c < p; c++) {\n        var w = {};\n\n        if (!M) {\n          w = a.extend({}, Q[c]);\n        } else {\n          w = a.extend({}, Q[c].value);\n        }\n\n        var F = w[h.uniqueId];\n\n        if (G >= D || F != P[G][h.uniqueId] || e && e[F]) {\n          v[v.length] = G;\n        }\n\n        var J = new Array();\n        var u = 0;\n\n        for (var l = 0; l < z; l++) {\n          var r = h.groups[l];\n          var H = w[r];\n\n          if (H == null) {\n            H = \"\";\n          }\n\n          J[u++] = {\n            value: H,\n            hash: O[l]\n          };\n        }\n\n        if (J.length != z) {\n          break;\n        }\n\n        var j = null;\n        var k = \"\";\n        var f = -1;\n\n        for (var L = 0; L < J.length; L++) {\n          f++;\n          var n = J[L].value;\n          var t = J[L].hash;\n          k = k + \"_\" + t + \"_\" + n;\n\n          if (y[k] != undefined && y[k] != null) {\n            j = y[k];\n            continue;\n          }\n\n          if (j == null) {\n            j = {\n              group: n,\n              subItems: new Array(),\n              subGroups: new Array(),\n              level: 0\n            };\n            I[b++] = j;\n            j.uniqueid = h.generatekey();\n            h.loadedgroupsByKey[n] = j;\n          } else {\n            var m = {\n              group: n,\n              subItems: new Array(),\n              subGroups: new Array(),\n              parentItem: j,\n              level: j.level + 1\n            };\n            h.loadedgroupsByKey[j.uniqueid + \"_\" + n] = m;\n            m.uniqueid = h.generatekey();\n            j.subGroups[j.subGroups.length++] = m;\n            j = m;\n          }\n\n          y[k] = j;\n        }\n\n        if (j != null) {\n          if (undefined == w.uid) {\n            w.uid = this.getid(this.source.id, w, N);\n          }\n\n          if (!M) {\n            w.boundindex = N;\n            this.recordsbyid[\"id\" + w.uid] = Q[c];\n          } else {\n            w.boundindex = Q[c].index;\n            this.recordsbyid[\"id\" + w.uid] = Q[c].value;\n          }\n\n          this.bounditems[w.boundindex] = w;\n          this.sortedgroups[N] = w;\n          w.uniqueid = h.generatekey();\n          w.parentItem = j;\n          w.level = j.level + 1;\n          j.subItems[j.subItems.length++] = w;\n        } else {\n          if (undefined == w.uid) {\n            w.uid = this.getid(this.source.id, w, N);\n          }\n\n          if (!M) {\n            w.boundindex = N;\n            this.recordsbyid[\"id\" + w.uid] = Q[c];\n          } else {\n            w.boundindex = Q[c].index;\n            this.recordsbyid[\"id\" + w.uid] = Q[c].value;\n          }\n\n          this.sortedgroups[N] = w;\n          this.bounditems[w.boundindex] = w;\n          w.uniqueid = h.generatekey();\n        }\n\n        G++;\n        N++;\n        d++;\n      }\n\n      var g = function (q, R, S) {\n        for (var i = 0; i < R.subItems.length; i++) {\n          R.subItems[i].visibleindex = B + S;\n          q.rows[S] = R.subItems[i];\n          q.loadedrecords[S] = R.subItems[i];\n          S++;\n        }\n\n        return S;\n      };\n\n      var o = function (Y, W, S) {\n        var V = 1;\n        var R = Y.grid.columns.records ? Y.grid.columns.records : Y.grid.columns;\n\n        if (Y.aggregates == true) {\n          for (var T = 0; T < R.length; T++) {\n            if (R[T].aggregates) {\n              V = Math.max(V, R[T].aggregates.length);\n            }\n          }\n        }\n\n        var q = function (aa) {\n          if (Y.aggregates == true) {\n            var Z = function (ad) {\n              var ab = aa;\n              var af = {};\n\n              var ag = function (ai) {\n                for (var ah = 0; ah < R.length; ah++) {\n                  if (R[ah].aggregates) {\n                    var ao = Y.grid.getcolumnaggregateddata(R[ah].datafield, R[ah].aggregates, true, ai);\n\n                    for (var al = 0; al < R[ah].aggregates.length; al++) {\n                      if (R[ah].aggregates[ad]) {\n                        var am = R[ah];\n                        var ak = R[ah].aggregates[ad];\n                        var aj = ak;\n                        aj = Y.grid._getaggregatename(aj);\n                        var an = aj + \":\" + ao[ak];\n\n                        if (ao[ak]) {\n                          af[am.datafield] = an;\n                        } else {\n                          af[am.datafield] = aj + \":\" + ao[aj];\n                        }\n                      }\n                    }\n                  }\n                }\n              };\n\n              if (ab != null) {\n                af.level = ab.level;\n                af.visibleindex = B + S;\n                af.uniqueid = Y.generatekey();\n                Y.rows[S] = af;\n                Y.loadedrecords[S++] = af;\n                af.totalsrow = true;\n\n                if (aa.subItems.length > 0) {\n                  ab = aa.subItems[aa.subItems.length - 1];\n                  af.parentItem = ab.parentItem;\n\n                  if (af.parentItem.subItems) {\n                    af.parentItem.subItems[af.parentItem.subItems.length] = af;\n                  }\n\n                  var ac = [];\n\n                  var ae = function () {\n                    for (var ah = 0; ah < aa.subItems.length; ah++) {\n                      if (aa.subItems[ah].totalsrow) {\n                        continue;\n                      }\n\n                      ac[ac.length] = aa.subItems[ah];\n                    }\n                  };\n\n                  ae(aa);\n                  ag(ac);\n                } else {\n                  if (aa.subGroups.length > 0) {\n                    ab = aa.subGroups[aa.subGroups.length - 1];\n                    af.level = ab.level;\n                    af.parentItem = aa;\n                    aa.subGroups[aa.subGroups.length] = af;\n                    var ac = [];\n\n                    var ae = function (ai) {\n                      if (ai.totalsrow) {\n                        return;\n                      }\n\n                      for (var ah = 0; ah < ai.subItems.length; ah++) {\n                        if (ai.subItems[ah].totalsrow) {\n                          continue;\n                        }\n\n                        ac[ac.length] = ai.subItems[ah];\n                      }\n\n                      for (var ah = 0; ah < ai.subGroups.length; ah++) {\n                        ae(ai.subGroups[ah]);\n                      }\n                    };\n\n                    ae(aa);\n                    ag(ac);\n                  }\n                }\n              }\n            };\n\n            for (var i = 0; i < V; i++) {\n              Z(i);\n            }\n          }\n        };\n\n        for (var U in W.subGroups) {\n          var X = W.subGroups[U];\n\n          if (X.subGroups) {\n            Y.loadedgroups[Y.loadedgroups.length] = X;\n            X.visibleindex = B + S;\n            Y.rows[S] = X;\n            Y.loadedrecords[S] = X;\n            S++;\n\n            if (X.subGroups.length > 0) {\n              S = o(Y, X, S);\n            } else {\n              if (X.subItems.length > 0) {\n                S = g(Y, X, S);\n              }\n            }\n          }\n        }\n\n        if (W.subItems.length > 0) {\n          S = g(Y, W, S);\n        }\n\n        q(W);\n        return S;\n      };\n\n      var x = I.length;\n      this.loadedgroups = new Array();\n      this.rows = new Array();\n      var K = 0;\n\n      for (var N = 0; N < x; N++) {\n        var r = I[N];\n        this.loadedrootgroups[N] = r;\n        this.loadedgroups[this.loadedgroups.length] = r;\n        r.visibleindex = B + K;\n        this.rows[K] = r;\n        this.loadedrecords[K] = r;\n        K++;\n        K = o(this, r, K);\n      }\n\n      return K;\n    };\n\n    this._updategroupsinpage = function (C, r, L, d, u, j, f) {\n      var p = new Array();\n      var w = [];\n\n      if (this.groupable && this.groups.length > 0) {\n        var B = 0;\n        var h = new Array();\n        var g = new Array();\n\n        for (var m = 0; m < C.groups.length; m++) {\n          g[m] = C.generatekey();\n        }\n\n        var G = 0;\n        var o = new Array();\n        var k = 0;\n\n        if (f > this.totalrecords) {\n          f = this.totalrecords;\n        }\n\n        for (var v = j; v < f; v++) {\n          var I = a.extend({}, C.sortedgroups[v]);\n          var D = I[C.uniqueId];\n\n          if (!C.pagesize || L >= C.pagesize * C.pagenum && L < C.pagesize * (C.pagenum + 1)) {\n            if (d >= u || D != p[d][C.uniqueId] || updated && updated[D]) {\n              w[w.length] = d;\n            }\n\n            var e = new Array();\n            var y = 0;\n\n            for (var m = 0; m < C.groups.length; m++) {\n              var n = C.groups[m];\n              var E = I[n];\n\n              if (null == E) {\n                E = \"\";\n              }\n\n              e[y++] = {\n                value: E,\n                hash: g[m]\n              };\n            }\n\n            if (e.length != C.groups.length) {\n              break;\n            }\n\n            var z = null;\n            var s = \"\";\n            var c = -1;\n\n            for (var A = 0; A < e.length; A++) {\n              c++;\n              var H = e[A].value;\n              var l = e[A].hash;\n              s = s + \"_\" + l + \"_\" + H;\n\n              if (h[s] != undefined && h[s] != null) {\n                z = h[s];\n                continue;\n              }\n\n              if (z == null) {\n                z = {\n                  group: H,\n                  subItems: new Array(),\n                  subGroups: new Array(),\n                  level: 0\n                };\n                o[k++] = z;\n                var F = C.loadedgroupsByKey[H];\n\n                if (F != undefined) {\n                  z.visibleindex = F.visibleindex;\n                  z.uniqueid = F.uniqueid;\n                }\n              } else {\n                var t = {\n                  group: H,\n                  subItems: new Array(),\n                  subGroups: new Array(),\n                  parentItem: z,\n                  level: z.level + 1\n                };\n                var F = C.loadedgroupsByKey[z.uniqueid + \"_\" + H];\n                t.visibleindex = F.visibleindex;\n                t.uniqueid = F.uniqueid;\n                z.subGroups[z.subGroups.length++] = t;\n                z = t;\n              }\n\n              h[s] = z;\n            }\n\n            if (z != null) {\n              I.parentItem = z;\n              I.level = z.level + 1;\n              z.subItems[z.subItems.length++] = I;\n            }\n\n            d++;\n          }\n\n          G++;\n          L++;\n        }\n\n        var x = function (M, N, q) {\n          for (var i = 0; i < N.subItems.length; i++) {\n            p[q] = a.extend({}, N.subItems[i]);\n            q++;\n          }\n\n          return q;\n        };\n\n        var J = function (O) {\n          var q = false;\n\n          for (var N in O.subGroups) {\n            var M = O.subGroups[N];\n\n            if (M.subGroups) {\n              if (M.subGroups.length > 0) {\n                var i = J(M);\n\n                if (i) {\n                  q = true;\n                  return true;\n                }\n              }\n\n              if (M.subItems.length > 0) {\n                q = true;\n                return true;\n              }\n            }\n          }\n\n          if (O.subItems.length > 0) {\n            q = true;\n            return true;\n          }\n\n          return q;\n        };\n\n        var b = function (S, Q, T) {\n          var P = 1;\n          var M = S.grid.columns.records ? S.grid.columns.records : S.grid.columns;\n\n          if (S.aggregates == true) {\n            for (var N = 0; N < M.length; N++) {\n              if (M[N].aggregates) {\n                P = Math.max(P, M[N].aggregates.length);\n              }\n            }\n          }\n\n          var q = function (V) {\n            if (S.aggregates == true) {\n              var U = function (Y) {\n                var W = V;\n                var aa = {};\n\n                var ab = function (ad) {\n                  for (var ac = 0; ac < M.length; ac++) {\n                    if (M[ac].aggregates) {\n                      var aj = S.grid.getcolumnaggregateddata(M[ac].datafield, M[ac].aggregates, true, ad);\n\n                      for (var ag = 0; ag < M[ac].aggregates.length; ag++) {\n                        if (M[ac].aggregates[Y]) {\n                          var ah = M[ac];\n                          var af = M[ac].aggregates[Y];\n                          var ae = af;\n                          ae = S.grid._getaggregatename(ae);\n                          var ai = ae + \":\" + aj[af];\n                          aa[ah.datafield] = ai;\n                        }\n                      }\n                    }\n                  }\n                };\n\n                if (W != null) {\n                  aa.level = W.level;\n                  aa.visibleindex = T;\n                  aa.uniqueid = S.generatekey();\n                  p[T] = aa;\n                  S.loadedrecords[T++] = aa;\n                  aa.totalsrow = true;\n\n                  if (V.subItems.length > 0) {\n                    W = V.subItems[V.subItems.length - 1];\n                    aa.parentItem = W.parentItem;\n\n                    if (aa.parentItem.subItems) {\n                      aa.parentItem.subItems[aa.parentItem.subItems.length] = aa;\n                    }\n\n                    var X = [];\n\n                    var Z = function () {\n                      for (var ac = 0; ac < V.subItems.length; ac++) {\n                        if (V.subItems[ac].totalsrow) {\n                          continue;\n                        }\n\n                        X[X.length] = V.subItems[ac];\n                      }\n                    };\n\n                    Z(V);\n                    ab(X);\n                  } else {\n                    if (V.subGroups.length > 0) {\n                      W = V.subGroups[V.subGroups.length - 1];\n                      aa.level = W.level;\n                      aa.parentItem = V;\n                      V.subGroups[V.subGroups.length] = aa;\n                      var X = [];\n\n                      var Z = function (ad) {\n                        if (ad.totalsrow) {\n                          return;\n                        }\n\n                        for (var ac = 0; ac < ad.subItems.length; ac++) {\n                          if (ad.subItems[ac].totalsrow) {\n                            continue;\n                          }\n\n                          X[X.length] = ad.subItems[ac];\n                        }\n\n                        for (var ac = 0; ac < ad.subGroups.length; ac++) {\n                          Z(ad.subGroups[ac]);\n                        }\n                      };\n\n                      Z(V);\n                      ab(X);\n                    }\n                  }\n                }\n              };\n\n              for (var i = 0; i < P; i++) {\n                U(i);\n              }\n            }\n          };\n\n          for (var O in Q.subGroups) {\n            var R = Q.subGroups[O];\n\n            if (R.subGroups) {\n              if (J(R)) {\n                p[T] = R;\n                T++;\n\n                if (R.subGroups.length > 0) {\n                  T = b(S, R, T);\n                } else {\n                  if (R.subItems.length > 0) {\n                    T = x(S, R, T);\n                  }\n                }\n\n                q(R);\n              }\n            }\n          }\n\n          if (Q.subItems.length > 0) {\n            T = x(S, Q, T);\n          }\n\n          q(Q);\n          return T;\n        };\n\n        var K = 0;\n\n        for (var G = 0; G < o.length; G++) {\n          var n = o[G];\n\n          if (J(n)) {\n            p[B] = n;\n            B++;\n            B = b(this, n, B);\n          }\n        }\n      }\n\n      return p;\n    };\n  };\n\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _initgroupsheader: function () {\n      this.groupsheader.css(\"visibility\", \"hidden\");\n\n      if (this._groupsheader()) {\n        this.groupsheader.css(\"visibility\", \"inherit\");\n        var e = this;\n        var c = this.gridlocalization.groupsheaderstring;\n        this.groupsheaderdiv = this.groupsheaderdiv || a('<div style=\"width: 100%; position: relative;\"></div>');\n        this.groupsheaderdiv.height(this.groupsheaderheight);\n        this.groupsheaderdiv.css(\"top\", 0);\n        this.groupsheader.append(this.groupsheaderdiv);\n        this.groupheadersbounds = new Array();\n        var d = this.groups.length;\n        this.groupsheaderdiv.children().remove();\n        this.groupsheaderdiv[0].innerHTML = \"\";\n        var b = new Array();\n\n        if (d > 0) {\n          a.each(this.groups, function (i) {\n            var n = this;\n\n            var m = e._getColumnText(this);\n\n            var l = m.label;\n\n            var k = e._rendergroupcolumn(l, n);\n\n            k.addClass(e.toThemeProperty(\"jqx-grid-group-column\"));\n            e.groupsheaderdiv.append(k);\n\n            if (e.closeablegroups) {\n              var j = a(k.find(\".jqx-icon-close\"));\n\n              if (e.isTouchDevice() && e.touchmode !== true) {\n                e.addHandler(j, \"touchstart\", function () {\n                  e.removegroupat(i);\n                  return false;\n                });\n              } else {\n                e.addHandler(j, \"click\", function () {\n                  e.removegroupat(i);\n                  return false;\n                });\n              }\n            }\n\n            if (e.sortable) {\n              e.addHandler(k, \"click\", function () {\n                var o = e.getcolumn(n);\n\n                if (o != null) {\n                  e._togglesort(o);\n                }\n\n                return false;\n              });\n            }\n\n            b[b.length] = k;\n\n            e._handlegroupstocolumnsdragdrop(this, k);\n\n            if (i < d - 1) {\n              var g = k.height();\n              var h = a('<div style=\"float: left; position: relative;\"></div>');\n\n              if (e.rtl) {\n                h.css(\"float\", \"right\");\n              }\n\n              h.width(e.groupindentwidth / 3);\n              h.height(1);\n              h.css(\"top\", g / 2);\n              h.addClass(e.toThemeProperty(\"jqx-grid-group-column-line\"));\n              e.groupsheaderdiv.append(h);\n            }\n          });\n        } else {\n          var f = a('<div style=\"position: relative;\">' + c + \"</div>\");\n          this.groupsheaderdiv.append(f);\n\n          if (this.rtl) {\n            f.addClass(this.toThemeProperty(\"jqx-rtl\"));\n          }\n        }\n\n        this._groupheaders = b;\n\n        this._updategroupheadersbounds();\n      }\n    },\n    _updategroupheadersbounds: function () {\n      var c = this;\n      var b = this.groupsheaderdiv.children().outerHeight();\n      var d = (this.groupsheader.height() - b) / 2;\n      this.groupsheaderdiv.css(\"top\", d);\n\n      if (!this.rtl) {\n        this.groupsheaderdiv.css(\"left\", d);\n        this.groupsheaderdiv.css(\"right\", \"\");\n      } else {\n        this.groupsheaderdiv.css(\"left\", \"\");\n        this.groupsheaderdiv.css(\"right\", d);\n      }\n\n      if (this.rtl) {\n        this._groupheaders.reverse();\n      }\n\n      a.each(this._groupheaders, function (f) {\n        var e = this.coord();\n        c.groupheadersbounds[f] = {\n          left: e.left,\n          top: e.top,\n          width: this.outerWidth(),\n          height: this.outerHeight(),\n          index: f\n        };\n      });\n    },\n    addgroup: function (c) {\n      if (c) {\n        var b = this;\n\n        if (b.groups !== b.dataview.groups) {\n          b.dataview.groups = b.groups;\n        }\n\n        b.groups[b.groups.length] = c;\n        b.refreshgroups();\n\n        this._raiseEvent(12, {\n          type: \"Add\",\n          index: b.groups[b.groups.length],\n          groups: b.groups\n        });\n      }\n    },\n    insertgroup: function (d, c) {\n      if (d != undefined && d != null && d >= 0 && d <= this.groups.length) {\n        if (c) {\n          var b = this;\n\n          if (b.groups !== b.dataview.groups) {\n            b.dataview.groups = b.groups;\n          }\n\n          b.groups.splice(d, 0, c.toString());\n          b.refreshgroups();\n\n          this._raiseEvent(12, {\n            type: \"Insert\",\n            index: d,\n            groups: b.groups\n          });\n        }\n      }\n    },\n    refreshgroups: function () {\n      this._refreshdataview();\n\n      this._render(true, true, true, false);\n\n      this._postrender(\"group\");\n    },\n    _insertaftergroup: function (d, c) {\n      var b = this._getGroupIndexByDataField(d);\n\n      this.insertgroup(b + 1, c);\n    },\n    _insertbeforegroup: function (d, c) {\n      var b = this._getGroupIndexByDataField(d);\n\n      this.insertgroup(b, c);\n    },\n    removegroupat: function (c) {\n      if (c >= 0 && c != null && c != undefined) {\n        var b = this;\n\n        if (b.groups !== b.dataview.groups) {\n          b.dataview.groups = b.groups;\n        }\n\n        b.groups.splice(c, 1);\n        b.refreshgroups();\n\n        if (b.virtualmode) {\n          b.updatebounddata();\n        }\n\n        this._raiseEvent(12, {\n          type: \"Remove\",\n          index: c,\n          groups: b.groups\n        });\n\n        return true;\n      }\n\n      return false;\n    },\n    cleargroups: function () {\n      var b = this;\n      b.groups = [];\n      b.dataview.groups = b.groups;\n      b.refreshgroups();\n\n      this._raiseEvent(12, {\n        type: \"Clear\",\n        index: -1,\n        groups: b.groups\n      });\n\n      return true;\n    },\n    removegroup: function (c) {\n      if (c == null) {\n        return false;\n      }\n\n      var b = this.groups.indexOf(c.toString());\n      return this.removegroupat(b);\n    },\n    getrootgroupscount: function () {\n      var b = this.dataview.loadedrootgroups.length;\n      return b;\n    },\n    collapsegroup: function (c) {\n      if (c >= 0 && c.toString().indexOf(\".\") === -1) {\n        return this._setrootgroupstate(c, false);\n      }\n\n      var b = c.toString().split(\".\");\n      var f = null;\n\n      if (!this.groupsVisibility) {\n        this.groupsVisibility = new Array();\n      }\n\n      for (var d = 0; d < b.length; d++) {\n        var c = parseInt(b[d]);\n\n        if (d == 0) {\n          var f = this.dataview.loadedrootgroups[c];\n          this.groupsVisibility[f.group] = null;\n        } else {\n          var e = f.subGroups[c];\n\n          if (e) {\n            f = e;\n\n            if (d == b.length - 1) {\n              this._setgroupstate(f, false, true);\n\n              this.groupsVisibility[f.group] = null;\n            }\n          }\n        }\n      }\n    },\n    expandgroup: function (c) {\n      if (c >= 0 && c.toString().indexOf(\".\") === -1) {\n        return this._setrootgroupstate(c, true);\n      }\n\n      var b = c.toString().split(\".\");\n      var f = null;\n\n      for (var d = 0; d < b.length; d++) {\n        var c = parseInt(b[d]);\n\n        if (d == 0) {\n          var f = this.dataview.loadedrootgroups[c];\n\n          this._setrootgroupstate(c, true);\n\n          if (!this.groupsVisibility) {\n            this.groupsVisibility = new Array();\n          }\n\n          this.groupsVisibility[f.group] = f;\n        } else {\n          var e = f.subGroups[c];\n\n          if (e) {\n            f = e;\n\n            this._setgroupstate(f, true, true);\n\n            if (!this.groupsVisibility) {\n              this.groupsVisibility = new Array();\n            }\n\n            this.groupsVisibility[f.group] = f;\n          }\n        }\n      }\n    },\n    collapseallgroups: function (b) {\n      this._setbatchgroupstate(false, b);\n    },\n    expandallgroups: function (b) {\n      this._setbatchgroupstate(true, b);\n    },\n    isgroupexpanded: function (c) {\n      var d = this.dataview.loadedrootgroups[c];\n\n      if (d == null) {\n        return null;\n      }\n\n      var b = this.expandedgroups[d.uniqueid].expanded;\n      return b;\n    },\n    getgroup: function (e) {\n      var j = this.dataview.loadedrootgroups[e];\n\n      if (j == null) {\n        return null;\n      }\n\n      var f = this.expandedgroups[j.uniqueid].expanded;\n      var g = j.group;\n      var b = j.level;\n      var c = new Array();\n\n      this._getsubgroups(c, j);\n\n      var i = this;\n      var d = {\n        group: g,\n        level: b,\n        expanded: f,\n        subgroups: c\n      };\n\n      if (j.subItems) {\n        var h = new Array();\n        a.each(j.subItems, function () {\n          var k = this.boundindex;\n          h[h.length] = i.getrowdata(k);\n        });\n\n        if (h.length > 0) {\n          d.subrows = h;\n        }\n      }\n\n      return d;\n    },\n    getrootgroups: function () {\n      var d = this.dataview.loadedrootgroups.length;\n      var c = new Array();\n\n      for (var b = 0; b < d; b++) {\n        c[b] = this.getgroup(b);\n      }\n\n      return c;\n    },\n    _getsubgroups: function (c, k) {\n      var j = this;\n\n      for (var e in k.subGroups) {\n        var i = k.subGroups[e];\n        var f = j.expandedgroups[i.uniqueid].expanded;\n        var g = i.group;\n        var b = i.level;\n        c[c.length] = {\n          group: g,\n          level: b,\n          expanded: f\n        };\n\n        if (i.subItems) {\n          var h = new Array();\n          a.each(i.subItems, function () {\n            var l = this.boundindex;\n            h[h.length] = j.getrowdata(l);\n          });\n          c[c.length - 1].subrows = h;\n        }\n\n        if (i.subGroups) {\n          var d = new Array();\n\n          j._getsubgroups(d, i);\n        }\n      }\n\n      return c;\n    },\n    _setbatchgroupstate: function (b, f) {\n      var c = this;\n\n      for (var d in this.dataview.loadedrootgroups) {\n        c._setrootgroupstate(d, b, false, true);\n      }\n\n      if (f == false) {\n        c._requiresupdate = true;\n\n        c._renderrows(c.virtualsizeinfo);\n\n        return true;\n      }\n\n      var e = this.vScrollBar[0].style.visibility;\n      this.rendergridcontent(true, false);\n\n      if (e != this.vScrollBar[0].style.visibility || this._hiddencolumns) {\n        this._updatecolumnwidths();\n\n        this._updatecellwidths();\n\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      return true;\n    },\n    _setrootgroupstate: function (d, b, f, c) {\n      if (d == undefined || d == null || d < 0) {\n        return false;\n      }\n\n      if (!this.groupable || this.groups.length == 0) {\n        return false;\n      }\n\n      var j = f != undefined ? f : true;\n\n      if (d >= 0 && d < this.dataview.loadedrootgroups.length) {\n        var h = this.dataview.loadedrootgroups[d];\n\n        if (this.pageable) {\n          var g = new Array();\n\n          for (var e = 0; e < this.dataview.rows.length; e++) {\n            if (this.dataview.rows[e].group != null && this.dataview.rows[e].level === 0) {\n              g.push(this.dataview.rows[e]);\n            }\n          }\n\n          h = g[d];\n\n          if (!h) {\n            return;\n          }\n        }\n\n        return this._setgroupstate(h, b, j, c);\n      }\n\n      return false;\n    },\n    _togglegroupstate: function (e, f) {\n      if (e == null || e == undefined) {\n        return false;\n      }\n\n      var c = this.vScrollInstance.value;\n      var d = this.expandedgroups[e.uniqueid];\n\n      if (d == undefined) {\n        d = false;\n      } else {\n        d = d.expanded;\n      }\n\n      d = !d;\n\n      if (!this.groupsVisibility) {\n        this.groupsVisibility = new Array();\n      }\n\n      if (d) {\n        this.groupsVisibility[e.group] = e;\n      } else {\n        this.groupsVisibility[e.group] = null;\n      }\n\n      var b = this._setgroupstate(e, d, f);\n\n      this._newmax = null;\n\n      if (c !== 0 && this.vScrollBar.css(\"visibility\") !== \"hidden\") {\n        if (c <= this.vScrollInstance.max) {\n          this.vScrollInstance.setPosition(c);\n        } else {\n          this.vScrollInstance.setPosition(this.vScrollInstance.max);\n        }\n      }\n\n      return b;\n    },\n    _setgroupstate: function (f, b, h, c) {\n      if (f == null || f == undefined) {\n        return false;\n      }\n\n      var e = false;\n\n      if (this.editable && this.editcell) {\n        this.endcelledit(this.editcell.row, this.editcell.column, false, false);\n      }\n\n      var d = this.expandedgroups[f.uniqueid];\n\n      if (d == undefined) {\n        d = {\n          expanded: false\n        };\n        e = true;\n      }\n\n      if (d.expanded != b) {\n        e = true;\n      }\n\n      if (e) {\n        this.expandedgroups[f.uniqueid] = {\n          expanded: b,\n          group: f\n        };\n\n        this._setsubgroupsvisibility(this, f, !b, c);\n\n        if (h) {\n          var g = this.vScrollBar[0].style.visibility;\n          this.rendergridcontent(true, false);\n\n          if (g != this.vScrollBar[0].style.visibility || this._hiddencolumns) {\n            this._updatecolumnwidths();\n\n            this._updatecellwidths();\n\n            this._renderrows(this.virtualsizeinfo);\n          }\n        }\n\n        if (undefined == this.suspendgroupevents || this.suspendgroupevents == false) {\n          if (b) {\n            this._raiseEvent(4, {\n              group: f.group,\n              parentgroup: f.parentItem ? f.parentItem.group : null,\n              level: f.level,\n              visibleindex: f.visibleindex\n            });\n          } else {\n            this._raiseEvent(5, {\n              group: f.group,\n              parentgroup: f.parentItem ? f.parentItem.group : null,\n              level: f.level,\n              visibleindex: f.visibleindex\n            });\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n    _setgroupitemsvisibility: function (c, e, d) {\n      for (var b = 0; b < e.subItems.length; b++) {\n        c._setrowvisibility(e.subItems[b].visibleindex, d, false);\n      }\n    },\n    _setsubgroupsvisibility: function (c, h, f, d) {\n      if (h.parentItem != null) {\n        if (this.hiddens[h.parentItem.visibleindex]) {\n          return;\n        }\n      } else {\n        if (h.parentItem == null) {\n          if (this.hiddens[h.visibleindex]) {\n            return;\n          }\n        }\n      }\n\n      for (var g in h.subGroups) {\n        var e = h.subGroups[g];\n\n        if (!f) {\n          c._setrowvisibility(e.visibleindex, f, false);\n        }\n\n        var b = !f;\n\n        if (!d) {\n          if (c.expandedgroups[e.uniqueid] == undefined) {\n            b = false;\n          } else {\n            b = c.expandedgroups[e.uniqueid].expanded;\n          }\n        } else {\n          this.expandedgroups[e.uniqueid] = {\n            expanded: b,\n            group: e\n          };\n        }\n\n        if (e.subGroups) {\n          if (e.subGroups.length > 0) {\n            c._setsubgroupsvisibility(c, e, !b || f, d);\n          } else {\n            if (e.subItems.length > 0) {\n              c._setgroupitemsvisibility(c, e, !b || f);\n            }\n          }\n        }\n\n        if (f) {\n          c._setrowvisibility(e.visibleindex, f, false);\n        }\n      }\n\n      if (h.subItems && h.subItems.length > 0) {\n        c._setgroupitemsvisibility(c, h, f);\n      }\n    },\n    _handlecolumnsdragdrop: function () {\n      var d = this;\n      var g = -1;\n      var c = false;\n\n      if (!d.groupable) {\n        return;\n      }\n\n      var f = \"mousemove.grouping\" + this.element.id;\n      var e = \"mousedown.grouping\" + this.element.id;\n      var h = \"mouseup.grouping\" + this.element.id;\n      var b = false;\n\n      if (this.isTouchDevice() && this.touchmode !== true) {\n        b = true;\n        f = a.jqx.mobile.getTouchEventName(\"touchmove\") + \".grouping\" + this.element.id;\n        e = a.jqx.mobile.getTouchEventName(\"touchstart\") + \".grouping\" + this.element.id;\n        h = a.jqx.mobile.getTouchEventName(\"touchend\") + \".grouping\" + this.element.id;\n      }\n\n      this.removeHandler(a(document), f);\n      this.addHandler(a(document), f, function (j) {\n        if (!d.showgroupsheader) {\n          return true;\n        }\n\n        if (d.dragcolumn != null) {\n          var l = parseInt(j.pageX);\n          var u = parseInt(j.pageY);\n\n          if (b) {\n            var r = d.getTouches(j);\n            var p = r[0];\n            l = parseInt(p.pageX);\n            u = parseInt(p.pageY);\n          }\n\n          var n = d.host.coord();\n          var v = parseInt(n.left);\n          var w = parseInt(n.top);\n\n          if (d.dragmousedownoffset == undefined || d.dragmousedownoffset == null) {\n            d.dragmousedownoffset = {\n              left: 0,\n              top: 0\n            };\n          }\n\n          var t = parseInt(l) - parseInt(d.dragmousedownoffset.left);\n          var i = parseInt(u) - parseInt(d.dragmousedownoffset.top);\n          d.dragcolumn.css({\n            left: t + \"px\",\n            top: i + \"px\"\n          });\n          c = false;\n\n          if (l >= v && l <= v + d.host.width()) {\n            if (u >= w && u <= w + d.host.height()) {\n              c = true;\n            }\n          }\n\n          g = -1;\n\n          if (c) {\n            d.dragcolumnicon.removeClass(d.toThemeProperty(\"jqx-grid-dragcancel-icon\"));\n            d.dragcolumnicon.addClass(d.toThemeProperty(\"jqx-grid-drag-icon\"));\n            var s = d.groupsheader.coord();\n            var m = s.top + d.groupsheader.height();\n            var q = a.data(d.dragcolumn[0], \"datarecord\");\n\n            if (q) {\n              var k = d.groups.indexOf(q.toString());\n            } else {\n              var k = -1;\n            }\n\n            var o = k == -1 || d.groups.length > 1 && k > -1;\n\n            if (d.dropline != null) {\n              if (u >= s.top && u <= m) {\n                if (o) {\n                  g = d._handlegroupdroplines(l);\n                }\n              } else {\n                d.dropline.fadeOut(\"slow\");\n              }\n            }\n          } else {\n            if (d.dropline != null) {\n              d.dropline.fadeOut(\"slow\");\n            }\n\n            d.dragcolumnicon.removeClass(d.toThemeProperty(\"jqx-grid-drag-icon\"));\n            d.dragcolumnicon.addClass(d.toThemeProperty(\"jqx-grid-dragcancel-icon\"));\n          }\n\n          if (b) {\n            j.preventDefault();\n            j.stopPropagation();\n            return false;\n          }\n        }\n      });\n      this.removeHandler(a(document), h);\n      this.addHandler(a(document), h, function (i) {\n        if (!d.showgroupsheader) {\n          return true;\n        }\n\n        d.__drag = false;\n        a(document.body).removeClass(\"jqx-disableselect\");\n        var m = parseInt(i.pageX);\n        var s = parseInt(i.pageY);\n\n        if (b) {\n          var p = d.getTouches(i);\n          var o = p[0];\n          m = parseInt(o.pageX);\n          s = parseInt(o.pageY);\n        }\n\n        var n = d.host.coord();\n        var t = parseInt(n.left);\n        var u = parseInt(n.top);\n        var k = d.groupsheader.height();\n\n        if (d.showtoolbar) {\n          u += d.toolbarheight;\n        }\n\n        d.dragstarted = false;\n        d.dragmousedown = null;\n\n        if (d.dragcolumn != null) {\n          var l = a.data(d.dragcolumn[0], \"datarecord\");\n          d.dragcolumn.remove();\n          d.dragcolumn = null;\n\n          if (l != null) {\n            if (!d.getcolumn(l).groupable) {\n              if (d.dropline != null) {\n                d.dropline.remove();\n                d.dropline = null;\n              }\n\n              return;\n            }\n\n            if (c) {\n              if (g != -1) {\n                var q = g.index;\n                var r = d.groups[q];\n\n                var j = d._getGroupIndexByDataField(l);\n\n                if (j != q) {\n                  if (j != undefined && j >= 0) {\n                    d.groups.splice(j, 1);\n                  }\n\n                  if (g.position == \"before\") {\n                    if (!d.rtl) {\n                      d._insertbeforegroup(r, l);\n                    } else {\n                      d._insertaftergroup(r, l);\n                    }\n                  } else {\n                    if (!d.rtl) {\n                      d._insertaftergroup(r, l);\n                    } else {\n                      d._insertbeforegroup(r, l);\n                    }\n                  }\n                }\n              } else {\n                if (d.groups.length == 0) {\n                  if (s > u && s <= u + k) {\n                    d.addgroup(l);\n                  }\n                } else {\n                  if (s > u + k) {\n                    var j = d._getGroupIndexByDataField(l);\n\n                    d.removegroupat(j);\n                  }\n                }\n              }\n            }\n\n            if (d.dropline != null) {\n              d.dropline.remove();\n              d.dropline = null;\n            }\n          }\n        }\n      });\n    },\n    _getGroupIndexByDataField: function (b) {\n      for (var c = 0; c < this.groups.length; c++) {\n        if (this.groups[c] == b) {\n          return c;\n        }\n      }\n\n      return -1;\n    },\n    _isColumnInGroups: function (c) {\n      for (var b = 0; b < this.groups.length; b++) {\n        if (this.groups[b] == c) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    _handlegroupdroplines: function (d) {\n      var b = this;\n      var c = -1;\n      a.each(b.groupheadersbounds, function (e) {\n        if (d <= this.left + this.width / 2) {\n          var f = this.left - 3;\n\n          if (e > 0) {\n            f = this.left - 1 - b.groupindentwidth / 6;\n          }\n\n          b.dropline.css(\"left\", f);\n          b.dropline.css(\"top\", this.top);\n          b.dropline.height(this.height);\n          b.dropline.fadeIn(\"slow\");\n          c = {\n            index: e,\n            position: \"before\"\n          };\n\n          if (b.rtl) {\n            c = {\n              index: b.groupheadersbounds.length - 1 - e,\n              position: \"before\"\n            };\n          }\n\n          return false;\n        } else {\n          if (d >= this.left + this.width / 2) {\n            b.dropline.css(\"left\", 1 + this.left + this.width);\n            b.dropline.css(\"top\", this.top);\n            b.dropline.height(this.height);\n            b.dropline.fadeIn(\"slow\");\n            c = {\n              index: e,\n              position: \"after\"\n            };\n\n            if (b.rtl) {\n              c = {\n                index: b.groupheadersbounds.length - 1 - e,\n                position: \"after\"\n              };\n            }\n          }\n        }\n      });\n      return c;\n    },\n    _handlegroupstocolumnsdragdrop: function (c, e) {\n      this.dragmousedown = null;\n      this.dragmousedownoffset = null;\n      this.dragstarted = false;\n      this.dragcolumn = null;\n      var f = this;\n      var d;\n      var h = \"mousedown\";\n      var g = \"mousemove\";\n      var b = false;\n\n      if (this.isTouchDevice() && this.touchmode !== true) {\n        b = true;\n        h = a.jqx.mobile.getTouchEventName(\"touchstart\");\n        g = a.jqx.mobile.getTouchEventName(\"touchmove\");\n      }\n\n      this.addHandler(e, \"dragstart\", function (i) {\n        return false;\n      });\n      this.addHandler(e, h, function (i) {\n        if (!f.showgroupsheader) {\n          return true;\n        }\n\n        var l = i.pageX;\n        var k = i.pageY;\n        f.__drag = true;\n        f.dragmousedown = {\n          left: l,\n          top: k\n        };\n\n        if (b) {\n          var j = f.getTouches(i);\n          var n = j[0];\n          l = n.pageX;\n          k = n.pageY;\n          f.dragmousedown = {\n            left: l,\n            top: k\n          };\n\n          if (i.preventDefault) {\n            i.preventDefault();\n          }\n        }\n\n        var m = a(i.target).coord();\n        f.dragmousedownoffset = {\n          left: parseInt(l) - parseInt(m.left),\n          top: parseInt(k - m.top)\n        };\n      });\n      this.addHandler(e, g, function (i) {\n        if (!f.showgroupsheader) {\n          return true;\n        }\n\n        if (f.dragmousedown) {\n          d = {\n            left: i.pageX,\n            top: i.pageY\n          };\n\n          if (b) {\n            var k = f.getTouches(i);\n            var m = k[0];\n            d = {\n              left: m.pageX,\n              top: m.pageY\n            };\n          }\n\n          if (!f.dragstarted && f.dragcolumn == null) {\n            var j = Math.abs(d.left - f.dragmousedown.left);\n            var l = Math.abs(d.top - f.dragmousedown.top);\n\n            if (j > 3 || l > 3) {\n              f._createdragcolumn(e, d, true);\n\n              a(document.body).addClass(\"jqx-disableselect\");\n              a.data(f.dragcolumn[0], \"datarecord\", c);\n\n              if (i.preventDefault) {\n                i.preventDefault();\n              }\n            }\n          }\n        }\n      });\n    },\n    _createdragcolumn: function (c, e, g) {\n      var h = this;\n      var f = e;\n      h.dragcolumn = a(\"<div></div>\");\n      var j = c.clone();\n      h.dragcolumn.css(\"z-index\", 999999);\n      j.css(\"border-width\", \"1px\");\n      j.css(\"opacity\", \"0.4\");\n      var i = a(j.find(\".\" + h.toThemeProperty(\"jqx-grid-column-menubutton\")));\n\n      if (i.length > 0) {\n        i.css(\"display\", \"none\");\n      }\n\n      var b = a(j.find(\".jqx-icon-close\"));\n\n      if (b.length > 0) {\n        b.css(\"display\", \"none\");\n      }\n\n      h.dragcolumnicon = a('<div style=\"z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;\"></div>');\n      h.dragcolumnicon.addClass(h.toThemeProperty(\"jqx-grid-drag-icon\"));\n      h.dragcolumn.css(\"float\", \"left\");\n      h.dragcolumn.css(\"position\", \"absolute\");\n      var d = h.host.coord();\n      j.width(c.width() + 16);\n      h.dragcolumn.append(j);\n      h.dragcolumn.height(c.height());\n      h.dragcolumn.width(j.width());\n      h.dragcolumn.append(h.dragcolumnicon);\n      a(document.body).append(h.dragcolumn);\n      j.css(\"margin-left\", 0);\n      j.css(\"left\", 0);\n      j.css(\"top\", 0);\n      h.dragcolumn.css(\"left\", f.left + h.dragmousedown.left);\n      h.dragcolumn.css(\"top\", f.top + h.dragmousedown.top);\n\n      if (g != undefined && g) {\n        h.dropline = a('<div style=\"display: none; position: absolute;\"></div>');\n        h.dropline.width(2);\n        h.dropline.addClass(h.toThemeProperty(\"jqx-grid-group-drag-line\"));\n        a(document.body).append(h.dropline);\n      }\n    },\n    iscolumngroupable: function (b) {\n      return this._getcolumnproperty(b, \"groupable\");\n    },\n    _handlecolumnstogroupsdragdrop: function (c, f) {\n      this.dragmousedown = null;\n      this.dragmousedownoffset = null;\n      this.dragstarted = false;\n      this.dragcolumn = null;\n      var g = this;\n      var e;\n      var b = false;\n\n      if (this.isTouchDevice() && this.touchmode !== true) {\n        b = true;\n      }\n\n      var d = \"mousedown.drag\";\n      var e = \"mousemove.drag\";\n\n      if (b) {\n        d = a.jqx.mobile.getTouchEventName(\"touchstart\") + \".drag\";\n        e = a.jqx.mobile.getTouchEventName(\"touchmove\") + \".drag\";\n      } else {\n        this.addHandler(f, \"dragstart\", function (h) {\n          return false;\n        });\n      }\n\n      this.addHandler(f, d, function (j) {\n        if (!g.showgroupsheader) {\n          return true;\n        }\n\n        g.__drag = true;\n\n        if (g._isColumnInGroups(c.displayfield)) {\n          if (f.css(\"cursor\") != \"col-resize\") {\n            return true;\n          } else {\n            return true;\n          }\n        }\n\n        if (false == c.groupable) {\n          return true;\n        }\n\n        var i = j.pageX;\n        var h = j.pageY;\n\n        if (b) {\n          var k = g.getTouches(j);\n          var m = k[0];\n          i = m.pageX;\n          h = m.pageY;\n        }\n\n        g.dragmousedown = {\n          left: i,\n          top: h\n        };\n\n        if (b) {\n          if (j.preventDefault) {\n            j.preventDefault();\n          }\n        }\n\n        var l = a(j.target).coord();\n        g.dragmousedownoffset = {\n          left: parseInt(i) - parseInt(l.left),\n          top: parseInt(h - l.top)\n        };\n      });\n      this.addHandler(f, e, function (j) {\n        if (!g.showgroupsheader) {\n          return true;\n        }\n\n        if (g._isColumnInGroups(c.displayfield)) {\n          if (f.css(\"cursor\") != \"col-resize\") {\n            return true;\n          } else {\n            return true;\n          }\n        }\n\n        if (g.dragmousedown) {\n          var i = j.pageX;\n          var h = j.pageY;\n\n          if (b) {\n            var l = g.getTouches(j);\n            var n = l[0];\n            i = n.pageX;\n            h = n.pageY;\n          }\n\n          e = {\n            left: i,\n            top: h\n          };\n\n          if (!g.dragstarted && g.dragcolumn == null) {\n            var k = Math.abs(e.left - g.dragmousedown.left);\n            var m = Math.abs(e.top - g.dragmousedown.top);\n\n            if (k > 3 || m > 3) {\n              g._createdragcolumn(f, e, true);\n\n              a.data(g.dragcolumn[0], \"datarecord\", c.displayfield);\n\n              if (j.preventDefault) {\n                j.preventDefault();\n              }\n            }\n          }\n        }\n      });\n    },\n    _rendergroupcolumn: function (g, h) {\n      var e = a('<div style=\"float: left; position: relative;\"></div>');\n\n      if (this.rtl) {\n        e.css(\"float\", \"right\");\n      }\n\n      if (this.groupcolumnrenderer != null) {\n        e[0].innerHTML = this.groupcolumnrenderer(g);\n        e.addClass(this.toThemeProperty(\"jqx-grid-group-column\"));\n        e.addClass(this.toThemeProperty(\"jqx-fill-state-normal\"));\n      }\n\n      if (this.closeablegroups) {\n        if (e[0].innerHTML == \"\") {\n          e[0].innerHTML = '<a style=\"float: left;\" href=\"#\">' + g + \"</a>\";\n        }\n\n        if (this.rtl) {\n          e[0].innerHTML = '<a style=\"float: right;\" href=\"#\">' + g + \"</a>\";\n        }\n\n        var d = !this.rtl ? \"right\" : \"left\";\n        var c = '<div style=\"float: ' + d + '; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-icon-close\") + '\"></div></div>';\n\n        if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n          c = '<div style=\"float: left; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-icon-close\") + '\"></div></div>';\n        }\n\n        if (this.rtl) {\n          var c = '<div style=\"float: ' + d + '; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-icon-close\") + '\"></div></div>';\n\n          if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n            c = '<div style=\"float: left; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-icon-close\") + '\"></div></div>';\n          }\n        }\n\n        e[0].innerHTML += c;\n      } else {\n        if (e[0].innerHTML == \"\") {\n          e[0].innerHTML = '<a href=\"#\">' + g + \"</a>\";\n        }\n      }\n\n      if (this.sortable) {\n        var f = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortascbutton\") + '\"></div></div>');\n        var b = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortdescbutton\") + '\"></div></div>');\n\n        if (this.closeablegroups) {\n          var f = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortascbutton\") + '\"></div></div>');\n          var b = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortdescbutton\") + '\"></div></div>');\n        }\n\n        if (this.rtl) {\n          var f = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-left: 0px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortascbutton\") + '\"></div></div>');\n          var b = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-left: 0px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortdescbutton\") + '\"></div></div>');\n\n          if (this.closeablegroups) {\n            var f = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-left: 16px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortascbutton\") + '\"></div></div>');\n            var b = a('<div style=\"float: right; min-height: 16px; min-width: 18px;\"><div style=\"position: absolute; left: 0px; top: 50%; margin-left: 16px; margin-top: -8px; float: none; width: 16px; height: 16px;\" class=\"' + this.toThemeProperty(\"jqx-grid-column-sortdescbutton\") + '\"></div></div>');\n          }\n        }\n\n        f.css(\"display\", \"none\");\n        b.css(\"display\", \"none\");\n\n        if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n          f.css(\"float\", \"left\");\n          b.css(\"float\", \"left\");\n        }\n\n        e.append(f);\n        e.append(b);\n        a.data(document.body, \"groupsortelements\" + h, {\n          sortasc: f,\n          sortdesc: b\n        });\n      }\n\n      e.addClass(this.toThemeProperty(\"jqx-fill-state-normal\"));\n      e.addClass(this.toThemeProperty(\"jqx-grid-group-column\"));\n      return e;\n    },\n    _rendergroup: function (p, x, b, v, k, B, u) {\n      var H = x;\n      var c = x.cells[b.level];\n\n      if (this.rtl) {\n        c = x.cells[x.cells.length - 1 - b.level];\n      }\n\n      var F = this._findgroupstate(b.uniqueid);\n\n      if (b.bounddata.subGroups.length > 0 || b.bounddata.subItems.length > 0) {\n        var i = this.rtl ? \"-rtl\" : \"\";\n        var C = this.toThemeProperty(\"jqx-icon-arrow-right\");\n\n        if (i) {\n          C = this.toThemeProperty(\"jqx-icon-arrow-left\");\n        }\n\n        if (F) {\n          c.className += \" \" + this.toThemeProperty(\"jqx-grid-group-expand\" + i) + \" \" + this.toThemeProperty(\"jqx-icon-arrow-down\");\n        } else {\n          c.className += \" \" + this.toThemeProperty(\"jqx-grid-group-collapse\" + i) + \" \" + C;\n        }\n      }\n\n      var t = this._getColumnText(this.groups[b.level]).label;\n\n      var d = this.groupindentwidth;\n      var r = this.rowdetails && this.showrowdetailscolumn ? (1 + p) * d : p * d;\n      var y = u - r;\n      var g = b.level + 1;\n\n      if (this.rtl) {\n        g = 0;\n      }\n\n      var n = H.cells[g];\n      var A = 2;\n\n      while (n != undefined && n.style.display == \"none\" && A < H.cells.length - 1) {\n        n = H.cells[g + A - 1];\n        A++;\n      }\n\n      var f = a(n);\n\n      if (!n) {\n        return;\n      }\n\n      n.style.width = parseInt(y) + \"px\";\n\n      if (n.className.indexOf(\"jqx-grid-cell-filter\") != -1) {\n        f.removeClass(this.toThemeProperty(\"jqx-grid-cell-filter\"));\n      }\n\n      if (n.className.indexOf(\"jqx-grid-cell-sort\") != -1) {\n        f.removeClass(this.toThemeProperty(\"jqx-grid-cell-sort\"));\n      }\n\n      if (n.className.indexOf(\"jqx-grid-cell-pinned\") != -1) {\n        f.removeClass(this.toThemeProperty(\"jqx-grid-cell-pinned\"));\n      }\n\n      if (this.groupsrenderer != null) {\n        var h = {\n          group: b.group,\n          level: b.level,\n          parent: b.bounddata.parentItem,\n          subGroups: b.bounddata.subGroups,\n          subItems: b.bounddata.subItems,\n          groupcolumn: this._getColumnText(this.groups[b.level]).column\n        };\n        var q = this.groupsrenderer(t + \": \" + b.group, b.group, F, h);\n\n        if (q) {\n          n.innerHTML = q;\n        } else {\n          var l = b.bounddata.subItems.length > 0 ? b.bounddata.subItems.length : b.bounddata.subGroups.length;\n\n          if (this.showgroupaggregates) {\n            var I = b.bounddata.subItems.length > 0 ? b.bounddata.subItems : b.bounddata.subGroups;\n            l = 0;\n\n            for (var G = 0; G < I.length; G++) {\n              if (I[G].totalsrow) {\n                continue;\n              }\n\n              l++;\n            }\n          }\n\n          n.innerHTML = '<div class=\"' + this.toThemeProperty(\"jqx-grid-groups-row\") + '\" style=\"position: absolute;\"><span>' + t + ': </span><span class=\"' + this.toThemeProperty(\"jqx-grid-groups-row-details\") + '\">' + b.group + \" (\" + l + \")</span></div>\";\n        }\n      } else {\n        var e = this._getcolumnbydatafield(this.groups[b.level]);\n\n        var z = b.group;\n\n        if (e != null) {\n          if (e.cellsformat) {\n            if (a.jqx.dataFormat) {\n              if (a.jqx.dataFormat.isDate(z)) {\n                z = a.jqx.dataFormat.formatdate(z, e.cellsformat, this.gridlocalization);\n              } else {\n                if (a.jqx.dataFormat.isNumber(z)) {\n                  z = a.jqx.dataFormat.formatnumber(z, e.cellsformat, this.gridlocalization);\n                }\n              }\n            }\n          }\n\n          var l = b.bounddata.subItems.length > 0 ? b.bounddata.subItems.length : b.bounddata.subGroups.length;\n\n          if (this.showgroupaggregates) {\n            var I = b.bounddata.subItems.length > 0 ? b.bounddata.subItems : b.bounddata.subGroups;\n            l = 0;\n\n            for (var G = 0; G < I.length; G++) {\n              if (I[G].totalsrow) {\n                continue;\n              }\n\n              l++;\n            }\n          }\n\n          n.innerHTML = '<div class=\"' + this.toThemeProperty(\"jqx-grid-groups-row\") + '\" style=\"position: absolute;\"><span>' + t + ': </span><span class=\"' + this.toThemeProperty(\"jqx-grid-groups-row-details\") + '\">' + z + \" (\" + l + \")</span></div>\";\n        } else {\n          throw new Error(\"jqxGrid: Unable to find '\" + this.groups[b.level] + \"' group in the Grid's columns collection.\");\n        }\n      }\n\n      if (this.rtl) {\n        if (!e) {\n          e = this._getcolumnbydatafield(this.groups[b.level]);\n        }\n\n        var s = this.hScrollBar.css(\"visibility\") == \"hidden\" ? 0 : this.hScrollInstance.max - this.hScrollInstance.value;\n        var D = this.vScrollBar.css(\"visibility\") == \"hidden\" ? 0 : this.scrollbarsize + 6;\n        var r = this.rowdetails && this.showrowdetailscolumn ? (2 + b.level) * d : (1 + b.level) * d;\n        n.style.width = u + parseInt(s) - r - D + \"px\";\n        f.addClass(this.toThemeProperty(\"jqx-rtl\"));\n        var w = a(x.cells[x.cells.length - 1]).css(\"z-index\");\n        f.css(\"z-index\", w);\n        var E = f.find(\"div\");\n        var y = E.width();\n        E.css(\"left\", \"100%\");\n        var o = this.columns.records[x.cells.length - 2 - b.level] != null ? this.columns.records[x.cells.length - 2 - b.level].pinned : false;\n\n        if (this.table.width() < u) {\n          u = this.table.width();\n\n          if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n            u += this.vScrollBar.outerWidth();\n          }\n        }\n\n        if (e.pinned || o) {\n          if (this.rowdetails && this.showrowdetailscolumn) {\n            u += 30;\n          }\n\n          E.css(\"margin-left\", -y);\n          n.style.width = u + s - r - D + \"px\";\n        } else {\n          var s = this.hScrollBar.css(\"visibility\") == \"hidden\" ? 0 : this.hScrollInstance.max;\n          n.style.width = u + s - r - D + \"px\";\n          var y = E.width();\n          E.css(\"margin-left\", -y);\n        }\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}