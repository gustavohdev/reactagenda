{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _calculateaggregate: function (g, j, h, c) {\n      var f = g.aggregates;\n\n      if (!f) {\n        f = j;\n      }\n\n      if (f) {\n        var e = new Array();\n\n        for (var d = 0; d < f.length; d++) {\n          if (f[d] == \"count\") {\n            continue;\n          }\n\n          e[e.length] = g.cellsformat;\n        }\n\n        if (this.source && this.source.getAggregatedData) {\n          if (c == undefined) {\n            c = this.getrows();\n          }\n\n          if (this.virtualmode) {\n            var c = new Array();\n            a.each(this.source._source.records, function () {\n              c.push(this);\n            });\n          }\n\n          if (h == undefined || h == true) {\n            var b = this.source.getAggregatedData([{\n              name: g.datafield,\n              aggregates: f,\n              formatStrings: e\n            }], this.gridlocalization, c);\n            return b;\n          } else {\n            var b = this.source.getAggregatedData([{\n              name: g.datafield,\n              aggregates: f\n            }], this.gridlocalization, c);\n            return b;\n          }\n        }\n      }\n\n      return null;\n    },\n    getcolumnaggregateddata: function (c, g, h, d) {\n      var e = this.getcolumn(c);\n      var j = h == undefined || h == false ? false : h;\n\n      if (g == null) {\n        return \"\";\n      }\n\n      var b = e.aggregates;\n      e.aggregates = null;\n\n      var i = this._calculateaggregate(e, g, j, d);\n\n      var f = {};\n\n      if (i) {\n        f = i[c];\n      }\n\n      e.aggregates = b;\n      return f;\n    },\n    refreshaggregates: function () {\n      this._updatecolumnsaggregates();\n    },\n    renderaggregates: function () {\n      this._updateaggregates();\n    },\n    _updatecolumnaggregates: function (d, g, b) {\n      var e = this;\n\n      if (!g) {\n        b.children().remove();\n        b.html(\"\");\n\n        if (d.aggregatesrenderer) {\n          var f = {};\n\n          if (d.aggregates) {\n            f = this.getcolumnaggregateddata(d.datafield, d.aggregates);\n          }\n\n          var c = d.aggregatesrenderer({}, d, b, null);\n          b.html(c);\n        }\n\n        return;\n      }\n\n      b.children().remove();\n      b.html(\"\");\n\n      if (d.aggregatesrenderer) {\n        if (g) {\n          var c = d.aggregatesrenderer(g[d.datafield], d, b, this.getcolumnaggregateddata(d.datafield, g[d.datafield]));\n          b.html(c);\n        }\n      } else {\n        a.each(g, function () {\n          var i = this;\n\n          for (f in i) {\n            var j = a('<div style=\"position: relative; margin: 4px; overflow: hidden;\"></div>');\n            var h = f;\n            h = e._getaggregatename(h);\n            j.html(h + \":\" + i[f]);\n\n            if (e.rtl) {\n              j.addClass(e.toThemeProperty(\"jqx-rtl\"));\n            }\n\n            b.append(j);\n          }\n        });\n      }\n    },\n    _getaggregatetype: function (c) {\n      switch (c) {\n        case \"min\":\n        case \"max\":\n        case \"count\":\n        case \"avg\":\n        case \"product\":\n        case \"var\":\n        case \"varp\":\n        case \"stdev\":\n        case \"stdevp\":\n        case \"sum\":\n          return c;\n      }\n\n      var b = c;\n\n      for (var d in c) {\n        b = d;\n        break;\n      }\n\n      return b;\n    },\n    _getaggregatename: function (c) {\n      var b = c;\n\n      switch (c) {\n        case \"min\":\n          b = \"Min\";\n          break;\n\n        case \"max\":\n          b = \"Max\";\n          break;\n\n        case \"count\":\n          b = \"Count\";\n          break;\n\n        case \"avg\":\n          b = \"Avg\";\n          break;\n\n        case \"product\":\n          b = \"Product\";\n          break;\n\n        case \"var\":\n          b = \"Var\";\n          break;\n\n        case \"stdevp\":\n          b = \"StDevP\";\n          break;\n\n        case \"stdev\":\n          b = \"StDev\";\n          break;\n\n        case \"varp\":\n          b = \"VarP\";\n\n        case \"sum\":\n          b = \"Sum\";\n          break;\n      }\n\n      if (c === b && typeof b != \"string\") {\n        for (var d in c) {\n          b = d;\n          break;\n        }\n      }\n\n      return b;\n    },\n    _updatecolumnsaggregates: function () {\n      var f = this.getrows();\n      var b = this.columns.records.length;\n\n      if (undefined != this.statusbar[0].cells) {\n        for (var e = 0; e < b; e++) {\n          var g = a(this.statusbar[0].cells[e]);\n          var d = this.columns.records[e];\n\n          var c = this._calculateaggregate(d, null, true, f);\n\n          this._updatecolumnaggregates(d, c, g);\n        }\n      }\n    },\n    _updateaggregates: function () {\n      var b = a('<div style=\"position: relative;\" id=\"statusrow' + this.element.id + '\"></div>');\n      var f = 0;\n      var l = this.columns.records.length;\n      var k = this.toThemeProperty(\"jqx-grid-cell\");\n\n      if (this.rtl) {\n        k += \" \" + this.toThemeProperty(\"jqx-grid-cell-rtl\");\n        f = -1;\n      }\n\n      k += \" \" + this.toThemeProperty(\"jqx-grid-cell-pinned\");\n      var m = l + 10;\n      var n = new Array();\n      this.statusbar[0].cells = n;\n      var o = this.getrows();\n\n      for (var g = 0; g < l; g++) {\n        var e = this.columns.records[g];\n\n        var h = this._calculateaggregate(e, e.aggregates, true, o);\n\n        var c = e.width;\n\n        if (c < e.minwidth) {\n          c = e.minwidth;\n        }\n\n        if (c > e.maxwidth) {\n          c = e.maxwidth;\n        }\n\n        var d = k;\n\n        if (e.cellsalign) {\n          d += \" \" + this.toThemeProperty(\"jqx-\" + e.cellsalign + \"-align\");\n        }\n\n        var i = a('<div style=\"overflow: hidden; position: absolute; height: 100%;\" class=\"' + d + '\"></div>');\n        b.append(i);\n        i.css(\"left\", f);\n\n        if (!this.rtl) {\n          i.css(\"z-index\", m--);\n        } else {\n          i.css(\"z-index\", m++);\n        }\n\n        i.width(c);\n        i[0].left = f;\n\n        if (!(e.hidden && e.hideable)) {\n          f += c;\n        } else {\n          i.css(\"display\", \"none\");\n        }\n\n        n[n.length] = i[0];\n\n        this._updatecolumnaggregates(e, h, i);\n      }\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n        b.css(\"z-index\", m--);\n      }\n\n      b.width(parseFloat(f) + 2);\n      b.height(this.statusbarheight);\n      this.statusbar.children().remove();\n      this.statusbar.append(b);\n      this.statusbar.removeClass(this.toThemeProperty(\"jqx-widget-header\"));\n      this.statusbar.addClass(k);\n      this.statusbar.css(\"border-bottom-color\", \"transparent\");\n      this.statusbar.css(\"border-top-width\", \"1px\");\n\n      if (this.rtl && this.hScrollBar.css(\"visibility\") != \"hidden\") {\n        this._renderhorizontalscroll();\n      }\n\n      this._arrange();\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}