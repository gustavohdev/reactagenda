{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (f) {\n  f.jqx.timeSpan = function () {\n    var q = {\n      ticksPerMillisecond: 10000,\n      millisecondsPerTick: 1 / 10000,\n      ticksPerSecond: 1000 * 10000,\n      secondsPerTick: 1 / (1000 * 10000),\n      ticksPerMinute: 1000 * 10000 * 60,\n      minutesPerTick: 1 / (1000 * 10000 * 60),\n      ticksPerHour: 1000 * 10000 * 3600,\n      hoursPerTick: 1 / (1000 * 10000 * 3600),\n      ticksPerDay: 1000 * 10000 * 3600 * 24,\n      daysPerTick: 1 / (1000 * 10000 * 3600 * 24),\n      millisPerSecond: 1000,\n      millisPerMinute: 1000 * 60,\n      millisPerHour: 1000 * 60 * 60,\n      millisPerDay: 1000 * 60 * 60 * 24,\n      _ticks: 0\n    };\n    f.extend(true, this, q);\n    var r = this;\n\n    r.ticks = function () {\n      return r._ticks;\n    };\n\n    r.days = function () {\n      return parseInt(r._ticks / r.ticksPerDay);\n    };\n\n    r.timeToMS = function (v, z, x, w) {\n      var y = v * 3600 + z * 60 + x + w / 1000;\n      return parseInt(y * r.ticksPerSecond);\n    };\n\n    r.hours = function () {\n      return parseInt(r._ticks / r.ticksPerHour) % 24;\n    };\n\n    r.milliseconds = function () {\n      return parseInt(r._ticks / r.ticksPerMillisecond) % 1000;\n    };\n\n    r.minutes = function () {\n      return parseInt(r._ticks / r.ticksPerMinute) % 60;\n    };\n\n    r.seconds = function () {\n      return parseInt(r._ticks / r.ticksPerSecond) % 60;\n    };\n\n    r.totalDays = function () {\n      return parseInt(r._ticks * r.daysPerTick);\n    };\n\n    r.totalHours = function () {\n      return parseInt(r._ticks * r.hoursPerTick);\n    };\n\n    r.totalMilliseconds = function () {\n      var v = r._ticks * r.millisecondsPerTick;\n      return parseInt(v);\n    };\n\n    r.totalMinutes = function () {\n      return parseInt(r._ticks * r.minutesPerTick);\n    };\n\n    r.totalSeconds = function () {\n      return parseInt(r._ticks * r.secondsPerTick);\n    };\n\n    if (arguments.length === 1) {\n      r._ticks = arguments[0];\n    } else {\n      if (arguments.length === 3) {\n        r._ticks = r.timeToMS(arguments[0], arguments[1], arguments[2]);\n      } else {\n        if (arguments.length === 4) {\n          var u = arguments[0];\n          var n = arguments[1];\n          var p = arguments[2];\n          var t = arguments[3];\n          var o = 0;\n          var s = (u * 3600 * 24 + n * 3600 + p * 60 + t) * 1000 + o;\n          r._ticks = s * r.ticksPerMillisecond;\n        } else {\n          if (arguments.length === 5) {\n            var u = arguments[0];\n            var n = arguments[1];\n            var p = arguments[2];\n            var t = arguments[3];\n            var o = arguments[4];\n            var s = (u * 3600 * 24 + n * 3600 + p * 60 + t) * 1000 + o;\n            r._ticks = s * r.ticksPerMillisecond;\n          }\n        }\n      }\n    }\n\n    r.add = function (w) {\n      var v = r._ticks + w._ticks;\n      var x = new f.jqx.timeSpan(v);\n      return x;\n    };\n\n    r.substract = function (w) {\n      var v = r._ticks - w._ticks;\n      return new f.jqx.timeSpan(v);\n    };\n\n    r.duration = function () {\n      if (r._ticks >= 0) {\n        return new f.jqx.timeSpan(r._ticks);\n      } else {\n        return new f.jqx.timeSpan(-r._ticks);\n      }\n    };\n\n    r.equals = function (v) {\n      return r._ticks == v._ticks;\n    };\n\n    r.valueOf = function () {\n      return r._ticks;\n    };\n\n    r.compare = function (w, v) {\n      if (w._ticks > v._ticks) {\n        return 1;\n      }\n\n      if (w._ticks < v._ticks) {\n        return -1;\n      }\n\n      return 0;\n    };\n\n    r.interval = function (x, y) {\n      var w = x * y;\n      var v = w + (x >= 0 ? 0.5 : -0.5);\n      return new f.jqx.timeSpan(v * r.ticksPerMillisecond);\n    };\n\n    r.fromDays = function (v) {\n      return r.interval(v, r.millisPerDay);\n    };\n\n    r.fromHours = function (v) {\n      return r.interval(v, r.millisPerHour);\n    };\n\n    r.fromMilliseconds = function (v) {\n      return r.interval(v, 1);\n    };\n\n    r.fromMinutes = function (v) {\n      return r.interval(v, r.millisPerMinute);\n    };\n\n    r.fromSeconds = function (v) {\n      return r.interval(v, r.millisPerSecond);\n    };\n\n    r.fromTicks = function (v) {\n      return new f.jqx.timeSpan(v);\n    };\n\n    return r;\n  };\n\n  var g = [{\n    id: \"Local\",\n    offset: 0,\n    offsetHours: 0,\n    displayName: \"\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Dateline Standard Time\",\n    offset: -720,\n    offsetHours: -12,\n    displayName: \"(UTC-12:00) International Date Line West\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"UTC-11\",\n    offset: -660,\n    offsetHours: -11,\n    displayName: \"(UTC-11:00) Coordinated Universal Time-11\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Hawaiteratoran Standard Time\",\n    offset: -600,\n    offsetHours: -10,\n    displayName: \"(UTC-10:00) Hawaiterator\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Alaskan Standard Time\",\n    offset: -540,\n    offsetHours: -9,\n    displayName: \"(UTC-09:00) Alaska\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Pacific Standard Time (Mexico)\",\n    offset: -480,\n    offsetHours: -8,\n    displayName: \"(UTC-08:00) Baja California\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Pacific Standard Time\",\n    offset: -480,\n    offsetHours: -8,\n    displayName: \"(UTC-08:00) Pacific Time (US & Canada)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"US Mountain Standard Time\",\n    offset: -420,\n    offsetHours: -7,\n    displayName: \"(UTC-07:00) Arizona\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Mountain Standard Time (Mexico)\",\n    offset: -420,\n    offsetHours: -7,\n    displayName: \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Mountain Standard Time\",\n    offset: -420,\n    offsetHours: -7,\n    displayName: \"(UTC-07:00) Mountain Time (US & Canada)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Central Standard Time\",\n    offset: -360,\n    offsetHours: -6,\n    displayName: \"(UTC-06:00) Central Time (US & Canada)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Central America Standard Time\",\n    offset: -360,\n    offsetHours: -6,\n    displayName: \"(UTC-06:00) Central America\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Canada Central Standard Time\",\n    offset: -360,\n    offsetHours: -6,\n    displayName: \"(UTC-06:00) Saskatchewan\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Central Standard Time (Mexico)\",\n    offset: -360,\n    offsetHours: -6,\n    displayName: \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"SA Pacific Standard Time\",\n    offset: -300,\n    offsetHours: -5,\n    displayName: \"(UTC-05:00) Bogota, Lima, Quito, Rio Branco\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Eastern Standard Time\",\n    offset: -300,\n    offsetHours: -5,\n    displayName: \"(UTC-05:00) Eastern Time (US & Canada)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"US Eastern Standard Time\",\n    offset: -300,\n    offsetHours: -5,\n    displayName: \"(UTC-05:00) Indiana (East)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Venezuela Standard Time\",\n    offset: -270,\n    offsetHours: -4.5,\n    displayName: \"(UTC-04:30) Caracas\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Atlantic Standard Time\",\n    offset: -240,\n    offsetHours: -4,\n    displayName: \"(UTC-04:00) Atlantic Time (Canada)\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Paraguay Standard Time\",\n    offset: -240,\n    offsetHours: -4,\n    displayName: \"(UTC-04:00) Asuncion\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Central Brazilian Standard Time\",\n    offset: -240,\n    offsetHours: -4,\n    displayName: \"(UTC-04:00) Cuiaba\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Pacific SA Standard Time\",\n    offset: -240,\n    offsetHours: -4,\n    displayName: \"(UTC-04:00) Santiago\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"SA Western Standard Time\",\n    offset: -240,\n    offsetHours: -4,\n    displayName: \"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Newfoundland Standard Time\",\n    offset: -210,\n    offsetHours: -3.5,\n    displayName: \"(UTC-03:30) Newfoundland\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"SA Eastern Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Cayenne, Fortaleza\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Argentina Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Buenos Aires\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"E. South America Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Brasilia\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Bahia Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Salvador\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Montevideo Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Montevideo\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Greenland Standard Time\",\n    offset: -180,\n    offsetHours: -3,\n    displayName: \"(UTC-03:00) Greenland\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"UTC-02\",\n    offset: -120,\n    offsetHours: -2,\n    displayName: \"(UTC-02:00) Coordinated Universal Time-02\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Mid-Atlantic Standard Time\",\n    offset: -120,\n    offsetHours: -2,\n    displayName: \"(UTC-02:00) Mid-Atlantic - Old\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Azores Standard Time\",\n    offset: -60,\n    offsetHours: -1,\n    displayName: \"(UTC-01:00) Azores\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Cape Verde Standard Time\",\n    offset: -60,\n    offsetHours: -1,\n    displayName: \"(UTC-01:00) Cape Verde Is.\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Morocco Standard Time\",\n    offset: 0,\n    offsetHours: 0,\n    displayName: \"(UTC) Casablanca\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"UTC\",\n    offset: 0,\n    offsetHours: 0,\n    displayName: \"(UTC) Coordinated Universal Time\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"GMT Standard Time\",\n    offset: 0,\n    offsetHours: 0,\n    displayName: \"(UTC) Dublin, Edinburgh, Lisbon, London\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Greenwich Standard Time\",\n    offset: 0,\n    offsetHours: 0,\n    displayName: \"(UTC) Monrovia, Reykjavik\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Central European Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Namibia Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) Windhoek\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"W. Central Africa Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) West Central Africa\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"W. Europe Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Central Europe Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Romance Standard Time\",\n    offset: 60,\n    offsetHours: 1,\n    displayName: \"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"FLE Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"South Africa Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Harare, Pretoria\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Turkey Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Istanbul\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"GTB Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Athens, Bucharest\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Libya Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Tripoli\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"E. Europe Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) E. Europe\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Jordan Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Amman\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Middle East Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Beirut\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Egypt Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Cairo\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Syria Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Damascus\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Israel Standard Time\",\n    offset: 120,\n    offsetHours: 2,\n    displayName: \"(UTC+02:00) Jerusalem\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Arab Standard Time\",\n    offset: 180,\n    offsetHours: 3,\n    displayName: \"(UTC+03:00) Kuwait, Riyadh\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"E. Africa Standard Time\",\n    offset: 180,\n    offsetHours: 3,\n    displayName: \"(UTC+03:00) Nairobi\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Arabic Standard Time\",\n    offset: 180,\n    offsetHours: 3,\n    displayName: \"(UTC+03:00) Baghdad\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Kaliningrad Standard Time\",\n    offset: 180,\n    offsetHours: 3,\n    displayName: \"(UTC+03:00) Kaliningrad, Minsk\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Iran Standard Time\",\n    offset: 210,\n    offsetHours: 3.5,\n    displayName: \"(UTC+03:30) Tehran\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Mauritius Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Port Louis\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Georgian Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Tbilisi\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Caucasus Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Yerevan\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Arabian Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Abu Dhabi, Muscat\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Azerbaijan Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Baku\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Russian Standard Time\",\n    offset: 240,\n    offsetHours: 4,\n    displayName: \"(UTC+04:00) Moscow, St. Petersburg, Volgograd\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Afghanistan Standard Time\",\n    offset: 270,\n    offsetHours: 4.5,\n    displayName: \"(UTC+04:30) Kabul\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Pakistan Standard Time\",\n    offset: 300,\n    offsetHours: 5,\n    displayName: \"(UTC+05:00) Islamabad, Karachi\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"West Asia Standard Time\",\n    offset: 300,\n    offsetHours: 5,\n    displayName: \"(UTC+05:00) Ashgabat, Tashkent\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"India Standard Time\",\n    offset: 330,\n    offsetHours: 5.5,\n    displayName: \"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Sri Lanka Standard Time\",\n    offset: 330,\n    offsetHours: 5.5,\n    displayName: \"(UTC+05:30) Sri Jayawardenepura\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Nepal Standard Time\",\n    offset: 345,\n    offsetHours: 5.75,\n    displayName: \"(UTC+05:45) Kathmandu\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Central Asia Standard Time\",\n    offset: 360,\n    offsetHours: 6,\n    displayName: \"(UTC+06:00) Astana\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Bangladesh Standard Time\",\n    offset: 360,\n    offsetHours: 6,\n    displayName: \"(UTC+06:00) Dhaka\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Ekaterinburg Standard Time\",\n    offset: 360,\n    offsetHours: 6,\n    displayName: \"(UTC+06:00) Ekaterinburg\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Myanmar Standard Time\",\n    offset: 390,\n    offsetHours: 6.5,\n    displayName: \"(UTC+06:30) Yangon (Rangoon)\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"SE Asia Standard Time\",\n    offset: 420,\n    offsetHours: 7,\n    displayName: \"(UTC+07:00) Bangkok, Hanoi, Jakarta\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"N. Central Asia Standard Time\",\n    offset: 420,\n    offsetHours: 7,\n    displayName: \"(UTC+07:00) Novosibirsk\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Ulaanbaatar Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Ulaanbaatar\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"China Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Singapore Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Kuala Lumpur, Singapore\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"North Asia Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Krasnoyarsk\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Taipei Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Taipei\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"W. Australia Standard Time\",\n    offset: 480,\n    offsetHours: 8,\n    displayName: \"(UTC+08:00) Perth\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Korea Standard Time\",\n    offset: 540,\n    offsetHours: 9,\n    displayName: \"(UTC+09:00) Seoul\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"North Asia East Standard Time\",\n    offset: 540,\n    offsetHours: 9,\n    displayName: \"(UTC+09:00) Irkutsk\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Tokyo Standard Time\",\n    offset: 540,\n    offsetHours: 9,\n    displayName: \"(UTC+09:00) Osaka, Sapporo, Tokyo\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"AUS Central Standard Time\",\n    offset: 570,\n    offsetHours: 9.5,\n    displayName: \"(UTC+09:30) Darwin\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Cen. Australia Standard Time\",\n    offset: 570,\n    offsetHours: 9.5,\n    displayName: \"(UTC+09:30) Adelaide\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"West Pacific Standard Time\",\n    offset: 600,\n    offsetHours: 10,\n    displayName: \"(UTC+10:00) Guam, Port Moresby\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Tasmania Standard Time\",\n    offset: 600,\n    offsetHours: 10,\n    displayName: \"(UTC+10:00) Hobart\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"E. Australia Standard Time\",\n    offset: 600,\n    offsetHours: 10,\n    displayName: \"(UTC+10:00) Brisbane\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"AUS Eastern Standard Time\",\n    offset: 600,\n    offsetHours: 10,\n    displayName: \"(UTC+10:00) Canberra, Melbourne, Sydney\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Yakutsk Standard Time\",\n    offset: 600,\n    offsetHours: 10,\n    displayName: \"(UTC+10:00) Yakutsk\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Vladivostok Standard Time\",\n    offset: 660,\n    offsetHours: 11,\n    displayName: \"(UTC+11:00) Vladivostok\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Central Pacific Standard Time\",\n    offset: 660,\n    offsetHours: 11,\n    displayName: \"(UTC+11:00) Solomon Is., New Caledonia\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Magadan Standard Time\",\n    offset: 720,\n    offsetHours: 12,\n    displayName: \"(UTC+12:00) Magadan\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Kamchatka Standard Time\",\n    offset: 720,\n    offsetHours: 12,\n    displayName: \"(UTC+12:00) Petropavlovsk-Kamchatsky - Old\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"Fiji Standard Time\",\n    offset: 720,\n    offsetHours: 12,\n    displayName: \"(UTC+12:00) Fiji\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"New Zealand Standard Time\",\n    offset: 720,\n    offsetHours: 12,\n    displayName: \"(UTC+12:00) Auckland, Wellington\",\n    supportsDaylightSavingTime: true\n  }, {\n    id: \"UTC+12\",\n    offset: 720,\n    offsetHours: 12,\n    displayName: \"(UTC+12:00) Coordinated Universal Time+12\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Tonga Standard Time\",\n    offset: 780,\n    offsetHours: 13,\n    displayName: \"(UTC+13:00) Nuku'alofa\",\n    supportsDaylightSavingTime: false\n  }, {\n    id: \"Samoa Standard Time\",\n    offset: 780,\n    offsetHours: 13,\n    displayName: \"(UTC+13:00) Samoa\",\n    supportsDaylightSavingTime: true\n  }];\n  var a = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n  var m = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n  var j = 365 * 4 + 1;\n  var c = (365 * 4 + 1) * 25 - 1;\n  var h = ((365 * 4 + 1) * 25 - 1) * 4 + 1;\n  var d = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4;\n  var b = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n  var l = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366;\n  var k = 0;\n  var i = ((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 10000 * 3600 * 24) - 1;\n  var e = ((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 60 * 60 * 24);\n\n  f.jqx.date = function () {\n    var r = this;\n    r.ticksPerMillisecond = 10000;\n    r.millisecondsPerTick = 1 / 10000;\n    r.ticksPerSecond = 1000 * 10000;\n    r.secondsPerTick = 1 / (1000 * 10000);\n    r.ticksPerMinute = 1000 * 10000 * 60;\n    r.minutesPerTick = 1 / (1000 * 10000 * 60);\n    r.ticksPerHour = 1000 * 10000 * 3600;\n    r.hoursPerTick = 1 / (1000 * 10000 * 3600);\n    r.ticksPerDay = 1000 * 10000 * 3600 * 24;\n    r.daysPerTick = 1 / (1000 * 10000 * 3600 * 24);\n    r.millisPerSecond = 1000;\n    r.millisPerMinute = 1000 * 60;\n    r.millisPerHour = 1000 * 60 * 60;\n    r.millisPerDay = 1000 * 60 * 60 * 24;\n    r.daysPerYear = 365;\n    r.daysPer4Years = j;\n    r.daysPer100Years = c;\n    r.daysPer400Years = h;\n    r.daysTo1601 = d;\n    r.daysTo1899 = b;\n    r.daysTo10000 = l;\n    r.minTicks = 0;\n    r.maxTicks = i;\n    r.maxMillis = e;\n    r.datePartYear = 0;\n    r.datePartDayOfYear = 1;\n    r.datePartMonth = 2;\n    r.datePartDay = 3;\n    r.daysToMonth365 = a;\n    r.daysToMonth366 = m;\n    r.minValue = new Date(0);\n    r.maxValue = new Date(((((365 * 4 + 1) * 25 - 1) * 4 + 1) * 25 - 366) * (1000 * 10000 * 3600 * 24) - 1);\n    r.ticksMask = 4611686018427388000;\n    r.flagsMask = 13835058055282164000;\n    r.localMask = 9223372036854776000;\n    r.ticksCeiling = 4611686018427388000;\n    r.kindUnspecified = 0;\n    r.kindUtc = 4611686018427388000;\n    r.kindLocal = 9223372036854776000;\n    r.kindLocalAmbiguousDst = 13835058055282164000;\n    r.kindShift = 62;\n    r.regexTrim = /^\\s+|\\s+$/g;\n    r.regexInfinity = /^[+-]?infinity$/i;\n    r.regexHex = /^0x[a-f0-9]+$/i;\n    r.regexParseFloat = /^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/;\n    r.calendar = {\n      \"/\": \"/\",\n      \":\": \":\",\n      firstDay: 0,\n      days: {\n        names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n        namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n      },\n      months: {\n        names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n      },\n      AM: [\"AM\", \"am\", \"AM\"],\n      PM: [\"PM\", \"pm\", \"PM\"],\n      eras: [{\n        name: \"A.D.\",\n        start: null,\n        offset: 0\n      }],\n      twoDigitYearMax: 2029,\n      patterns: {\n        d: \"M/d/yyyy\",\n        D: \"dddd, MMMM dd, yyyy\",\n        t: \"h:mm tt\",\n        T: \"h:mm:ss tt\",\n        f: \"dddd, MMMM dd, yyyy h:mm tt\",\n        F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n        M: \"MMMM dd\",\n        Y: \"yyyy MMMM\",\n        S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n        ISO: \"yyyy-MM-dd hh:mm:ss\",\n        ISO2: \"yyyy-MM-dd HH:mm:ss\",\n        d1: \"dd.MM.yyyy\",\n        d2: \"dd-MM-yyyy\",\n        zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n        zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n        custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n        custom2: \"yyyy-MM-dd HH:mm:ss.fff\"\n      },\n      percentsymbol: \"%\",\n      currencysymbol: \"$\",\n      currencysymbolposition: \"before\",\n      decimalseparator: \".\",\n      thousandsseparator: \",\"\n    };\n    r.dateData = 0;\n    r.timeZone = null;\n    r.timeZones = g;\n\n    r.internalMS = function () {\n      return r.dateData;\n    };\n\n    r.getDatePart = function (y) {\n      var x = r.internalMS();\n      var z = parseInt(x / r.millisPerDay);\n      var G = parseInt(z / r.daysPer400Years);\n      z -= G * r.daysPer400Years;\n      var B = parseInt(z / r.daysPer100Years);\n\n      if (B == 4) {\n        B = 3;\n      }\n\n      z -= B * r.daysPer100Years;\n      var D = parseInt(z / r.daysPer4Years);\n      z -= D * r.daysPer4Years;\n      var E = parseInt(z / r.daysPerYear);\n\n      if (E == 4) {\n        E = 3;\n      }\n\n      if (y == r.datePartYear) {\n        return parseInt(G * 400 + B * 100 + D * 4 + E + 1);\n      }\n\n      z -= E * r.daysPerYear;\n\n      if (y == r.datePartDayOfYear) {\n        return parseInt(z + 1);\n      }\n\n      var C = E == 3 && (D != 24 || B == 3);\n      var F = C ? r.daysToMonth366 : r.daysToMonth365;\n      var A = z >> 5 + 1;\n\n      while (z >= F[A]) {\n        A++;\n      }\n\n      if (y == r.datePartMonth) {\n        return parseInt(A);\n      }\n\n      return parseInt(z - F[A - 1] + 1);\n    };\n\n    r.dayOfWeek = function () {\n      var y = r.dateData;\n      var x = parseInt(y / r.millisPerDay + 1) % 7;\n      return x;\n    }, r.dayOfYear = function () {\n      return r.getDatePart(r.datePartDayOfYear);\n    };\n\n    r.weekOfYear = function (y) {\n      var F = r.toDate();\n      var D = y || r.calendar.firstDay;\n      var A = new Date(F.getFullYear(), 0, 1);\n      var E = A.getDay() - D;\n      E = E >= 0 ? E : E + 7;\n      var z = Math.floor((F.getTime() - A.getTime() - (F.getTimezoneOffset() - A.getTimezoneOffset()) * 60000) / 86400000) + 1;\n      var B;\n\n      if (E < 4) {\n        B = Math.floor((z + E - 1) / 7) + 1;\n\n        if (B > 52) {\n          var C = new Date(F.getFullYear() + 1, 0, 1);\n          var x = C.getDay() - D;\n          x = x >= 0 ? x : x + 7;\n          B = x < 4 ? 1 : 53;\n        }\n      } else {\n        B = Math.floor((z + E - 1) / 7);\n      }\n\n      return B;\n    };\n\n    r.subtract = function (x) {\n      return new f.jqx.timeSpan(r.dateData * r.ticksPerMillisecond - x.dateData * r.ticksPerMillisecond);\n    };\n\n    r.dateToMS = function (z, A, x) {\n      if (z >= 1 && z <= 9999 && A >= 1 && A <= 12) {\n        z = parseInt(z);\n        var D = r.isLeapYear(z) ? r.daysToMonth366 : r.daysToMonth365;\n\n        if (x >= 1 && x <= D[A] - D[A - 1]) {\n          var C = z - 1;\n          var B = C * 365 + parseInt(C / 4) - parseInt(C / 100) + parseInt(C / 400) + D[A - 1] + x - 1;\n          return B * r.millisPerDay;\n        }\n      }\n    };\n\n    r.isLeapYear = function (x) {\n      if (x < 1 || x > 9999) {\n        throw new Error(\"Year out of Range\");\n      }\n\n      return x % 4 == 0 && (x % 100 != 0 || x % 400 == 0);\n    };\n\n    r.timeToMS = function (x, B, z, y) {\n      if (x >= 0 && x < 24 && B >= 0 && B < 60 && z >= 0 && z < 60) {\n        var A = parseInt(x * 3600 + B * 60 + z);\n\n        if (y > 0 && y < 1000) {\n          return A * r.millisPerSecond + y;\n        }\n\n        return A * r.millisPerSecond;\n      }\n    };\n\n    r.daysInMonth = function (x, y) {\n      if (y < 1 || y > 12) {\n        throw new Error(\"Month out of Range\");\n      }\n\n      var z = r.isLeapYear(x) ? r.daysToMonth366 : r.daysToMonth365;\n      return z[y] - z[y - 1];\n    };\n\n    r.arrayIndexOf = function (A, z) {\n      if (A.indexOf) {\n        return A.indexOf(z);\n      }\n\n      for (var x = 0, y = A.length; x < y; x++) {\n        if (A[x] === z) {\n          return x;\n        }\n      }\n\n      return -1;\n    };\n\n    r.startsWith = function (y, x) {\n      return y.indexOf(x) === 0;\n    };\n\n    r.endsWith = function (y, x) {\n      return y.substr(y.length - x.length) === x;\n    }, r.trim = function (x) {\n      return (x + \"\").replace(r.regexTrim, \"\");\n    };\n\n    r.expandFormat = function (B, A) {\n      A = A || \"F\";\n      var z,\n          y = B.patterns,\n          x = A.length;\n\n      if (x === 1) {\n        z = y[A];\n\n        if (!z) {\n          throw \"Invalid date format string '\" + A + \"'.\";\n        }\n\n        A = z;\n      } else {\n        if (x === 2 && A.charAt(0) === \"%\") {\n          A = A.charAt(1);\n        }\n      }\n\n      return A;\n    };\n\n    r.getEra = function (z, y) {\n      if (!y) {\n        return 0;\n      }\n\n      if (typeof z === \"string\") {\n        return 0;\n      }\n\n      var C,\n          B = z.getTime();\n\n      for (var A = 0, x = y.length; A < x; A++) {\n        C = y[A].start;\n\n        if (C === null || B >= C) {\n          return A;\n        }\n      }\n\n      return 0;\n    };\n\n    r.toUpper = function (x) {\n      return x.split(\"\\u00A0\").join(\" \").toUpperCase();\n    };\n\n    r.toUpperArray = function (x) {\n      var A = [];\n\n      for (var z = 0, y = x.length; z < y; z++) {\n        A[z] = r.toUpper(x[z]);\n      }\n\n      return A;\n    };\n\n    r.getEraYear = function (y, A, x, B) {\n      var z = y.getFullYear();\n\n      if (!B && A.eras) {\n        z -= A.eras[x].offset;\n      }\n\n      return z;\n    };\n\n    r.getDayIndex = function (B, A, y) {\n      var x,\n          C = B.days,\n          z = B._upperDays;\n\n      if (!z) {\n        B._upperDays = z = [r.toUpperArray(C.names), r.toUpperArray(C.namesAbbr), r.toUpperArray(C.namesShort)];\n      }\n\n      A = A.toUpperCase();\n\n      if (y) {\n        x = r.arrayIndexOf(z[1], A);\n\n        if (x === -1) {\n          x = r.arrayIndexOf(z[2], A);\n        }\n      } else {\n        x = r.arrayIndexOf(z[0], A);\n      }\n\n      return x;\n    };\n\n    r.getMonthIndex = function (E, D, z) {\n      var x = E.months,\n          y = E.monthsGenitive || E.months,\n          B = E._upperMonths,\n          C = E._upperMonthsGen;\n\n      if (!B) {\n        E._upperMonths = B = [r.toUpperArray(x.names), r.toUpperArray(x.namesAbbr)];\n        E._upperMonthsGen = C = [r.toUpperArray(y.names), r.toUpperArray(y.namesAbbr)];\n      }\n\n      D = r.toUpper(D);\n      var A = r.arrayIndexOf(z ? B[1] : B[0], D);\n\n      if (A < 0) {\n        A = r.arrayIndexOf(z ? C[1] : C[0], D);\n      }\n\n      return A;\n    };\n\n    r.appendPreOrPostMatch = function (A, x) {\n      var z = 0,\n          C = false;\n\n      for (var B = 0, y = A.length; B < y; B++) {\n        var D = A.charAt(B);\n\n        switch (D) {\n          case \"'\":\n            if (C) {\n              x.push(\"'\");\n            } else {\n              z++;\n            }\n\n            C = false;\n            break;\n\n          case \"\\\\\":\n            if (C) {\n              x.push(\"\\\\\");\n            }\n\n            C = !C;\n            break;\n\n          default:\n            x.push(D);\n            C = false;\n            break;\n        }\n      }\n\n      return z;\n    };\n\n    r.getTokenRegExp = function () {\n      return /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;\n    };\n\n    r.tryparseDate = function (ad, ae, U) {\n      if (ae == undefined || ae == null) {\n        ae = r.calendar;\n      } else {\n        if (ae != null) {\n          if (ae && f.type(ae) === \"string\" && Globalize) {\n            var aj = Globalize.cultures[ae];\n\n            if (aj) {\n              ae = aj.calendar;\n            }\n          }\n        }\n      }\n\n      if (U != undefined) {\n        if (f.type(U) === \"array\") {\n          for (var ak = 0; ak < U.length; ak++) {\n            var am = r.parseDate(ad, U[ak], ae);\n\n            if (am) {\n              return am;\n            }\n          }\n        }\n\n        var am = r.parseDate(ad, U, ae);\n\n        if (am) {\n          return am;\n        }\n      }\n\n      var I = this;\n\n      if (ad == \"\") {\n        return null;\n      }\n\n      if (ad != null && !ad.substring) {\n        ad = ad.toString();\n      }\n\n      if (ad != null && ad.substring(0, 6) == \"/Date(\") {\n        var ao = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\n        var al = new Date(+ad.replace(/\\/Date\\((\\d+)\\)\\//, \"$1\"));\n\n        if (al == \"Invalid Date\") {\n          var ag = ad.match(/^\\/Date\\((\\d+)([-+]\\d\\d)(\\d\\d)\\)\\/$/);\n          var al = null;\n\n          if (ag) {\n            al = new Date(1 * ag[1] + 3600000 * ag[2] + 60000 * ag[3]);\n          }\n        }\n\n        if (al == null || al == \"Invalid Date\" || isNaN(al)) {\n          var J = ao.exec(ad);\n\n          if (J) {\n            var M = new Date(parseInt(J[1]));\n\n            if (J[2]) {\n              var S = parseInt(J[3]);\n\n              if (J[2] === \"-\") {\n                S = -S;\n              }\n\n              var O = M.getUTCMinutes();\n              M.setUTCMinutes(O - S);\n            }\n\n            if (!isNaN(M.valueOf())) {\n              return M;\n            }\n          }\n        }\n\n        return al;\n      }\n\n      var G = {\n        jqxdate: \"yyyy-MM-dd HH:mm:ss\",\n        d: \"M/d/yyyy\",\n        D: \"dddd, MMMM dd, yyyy\",\n        t: \"h:mm tt\",\n        T: \"h:mm:ss tt\",\n        f: \"dddd, MMMM dd, yyyy h:mm tt\",\n        F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n        M: \"MMMM dd\",\n        Y: \"yyyy MMMM\",\n        S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\n        ISO: \"yyyy-MM-dd hh:mm:ss\",\n        ISO2: \"yyyy-MM-dd HH:mm:ss\",\n        ISO8601: \"yyyy-MM-ddTHH:mm:ss.sssZ\",\n        d1: \"dd.MM.yyyy\",\n        d2: \"dd-MM-yyyy\",\n        d3: \"MM-dd-yyyy\",\n        d4: \"MM.dd.yyyy\",\n        zone1: \"yyyy-MM-ddTHH:mm:ss-HH:mm\",\n        zone2: \"yyyy-MM-ddTHH:mm:ss+HH:mm\",\n        custom: \"yyyy-MM-ddTHH:mm:ss.fff\",\n        custom2: \"yyyy-MM-dd HH:mm:ss.fff\",\n        iso: \"yyyy-MM-ddTHH:mm:ssZ\",\n        iso_date1: \"yyyy-MM-dd\",\n        iso_date2: \"yyyy-MM-dd\",\n        iso_date3: \"yyyy-ddd\",\n        iso_date4: \"yyyy-MM-dd HH:mm\",\n        iso_date5: \"yyyy-MM-dd HH:mm Z\",\n        iso_date6: \"yyyy-MMM-dd\",\n        iso_date7: \"yyyy-MM\",\n        iso_date8: \"yyyy-MMM\",\n        iso_date9: \"yyyy-MMMM\",\n        iso_date10: \"yyyy-MMMM-dd\",\n        iso_time1: \"HH:mm:ss.tttt\",\n        iso_time2: \"HH:mm:ss\",\n        iso_time3: \"HH:mm\",\n        iso_time4: \"HH\",\n        iso_time5: \"yyyyyy-MM-dd\",\n        iso_time6: \"yyyyyy-MM-dd\"\n      };\n\n      for (var L in G) {\n        al = r.parseDate(ad, G[L], ae);\n\n        if (al) {\n          return al;\n        }\n      }\n\n      var F = ae.patterns;\n\n      for (L in F) {\n        al = r.parseDate(ad, F[L], ae);\n\n        if (al) {\n          if (L == \"ISO\") {\n            var W = r.parseDate(ad, F.ISO2, ae);\n\n            if (W) {\n              return W;\n            }\n          }\n\n          return al;\n        }\n      }\n\n      if (f.type(ad) === \"string\") {\n        ad = r.trim(ad);\n        var af = [\":\", \"/\", \"-\", \" \", \",\"];\n\n        var E = function (at, y, ar) {\n          return ar.replace(new RegExp(at, \"g\"), y);\n        };\n\n        ad = E(\", \", \",\", ad);\n        var A = \"\";\n        var R = ad;\n\n        if (ad.indexOf(\":\") >= 0) {\n          A = ad.substring(ad.indexOf(\":\") - 2);\n          A = r.trim(A);\n          R = ad.substring(0, ad.indexOf(\":\") - 2);\n        } else {\n          if (ad.toUpperCase().indexOf(\"AM\") >= 0) {\n            A = ad.substring(ad.toUpperCase().indexOf(\"AM\") - 2);\n            A = r.trim(A);\n            R = ad.substring(0, ad.toUpperCase().indexOf(\"AM\") - 2);\n          } else {\n            if (ad.toUpperCase().indexOf(\"PM\") >= 0) {\n              A = ad.substring(ad.toUpperCase().indexOf(\"PM\") - 2);\n              A = r.trim(A);\n              R = ad.substring(0, ad.toUpperCase().indexOf(\"PM\") - 2);\n            }\n          }\n        }\n\n        var x = new Date();\n        var ac = false;\n\n        if (R) {\n          for (var ak = 0; ak < af.length; ak++) {\n            if (R.indexOf(af[ak]) >= 0) {\n              D = R.split(af[ak]);\n              break;\n            }\n          }\n\n          var z = new Array();\n          var P = new Array();\n          var Y = new Array();\n          var K = null;\n          var aq = null;\n\n          for (var ak = 0; ak < D.length; ak++) {\n            var H = D[ak];\n            var X = r.parseDate(H, \"d\", ae) || r.parseDate(H, \"dd\", ae) || r.parseDate(H, \"ddd\", ae) || r.parseDate(H, \"dddd\", ae);\n\n            if (X) {\n              z.push(X.getDate());\n\n              if (H.length > 2) {\n                K = ak;\n                break;\n              }\n            }\n          }\n\n          for (var ak = 0; ak < D.length; ak++) {\n            var H = D[ak];\n            var N = r.parseDate(H, \"M\", ae) || r.parseDate(H, \"MM\", ae) || r.parseDate(H, \"MMM\", ae) || r.parseDate(H, \"MMMM\", ae);\n\n            if (N) {\n              if (K != undefined && K == ak) {\n                continue;\n              }\n\n              P.push(N.getMonth());\n\n              if (H.length > 2) {\n                aq = ak;\n                break;\n              }\n            }\n          }\n\n          for (var ak = 0; ak < D.length; ak++) {\n            var H = D[ak];\n            var Z = r.parseDate(H, \"yyyy\", ae);\n\n            if (Z) {\n              if (K != undefined && K == ak) {\n                continue;\n              }\n\n              if (aq != undefined && aq == ak) {\n                continue;\n              }\n\n              Y.push(Z.getFullYear());\n            }\n          }\n\n          var ah = new Array();\n\n          for (var an = 0; an < z.length; an++) {\n            for (var ag = 0; ag < P.length; ag++) {\n              for (var ab = 0; ab < Y.length; ab++) {\n                var M = new Date(Y[ab], P[ag], z[an]);\n\n                if (Y[ab] < 1970) {\n                  M.setFullYear(Y[ab]);\n                }\n\n                if (M.getTime() != NaN) {\n                  ah.push(M);\n                }\n              }\n            }\n          }\n\n          if (ah.length > 0) {\n            x = ah[0];\n            ac = true;\n          }\n        }\n\n        if (A) {\n          var aa = A.indexOf(\":\") >= 0 ? A.split(\":\") : A;\n          var C = r.parseDate(A, \"h:mm tt\", ae) || r.parseDate(A, \"HH:mm:ss.fff\", ae) || r.parseDate(A, \"HH:mm:ss.ff\", ae) || r.parseDate(A, \"h:mm:ss tt\", ae) || r.parseDate(A, \"HH:mm:ss.tttt\", ae) || r.parseDate(A, \"HH:mm:ss\", ae) || r.parseDate(A, \"HH:mm\", ae) || r.parseDate(A, \"HH\", ae);\n          var Q = 0,\n              B = 0,\n              T = 0,\n              V = 0;\n\n          if (C && C.getTime() != NaN) {\n            Q = C.getHours();\n            B = C.getMinutes();\n            T = C.getSeconds();\n            V = C.getMilliseconds();\n          } else {\n            if (aa.length == 1) {\n              Q = parseInt(aa[0]);\n            }\n\n            if (aa.length == 2) {\n              Q = parseInt(aa[0]);\n              B = parseInt(aa[1]);\n            }\n\n            if (aa.length == 3) {\n              Q = parseInt(aa[0]);\n              B = parseInt(aa[1]);\n\n              if (aa[2].indexOf(\".\") >= 0) {\n                T = parseInt(aa[2].toString().split(\".\")[0]);\n                V = parseInt(aa[2].toString().split(\".\")[1]);\n              } else {\n                T = parseInt(aa[2]);\n              }\n            }\n\n            if (aa.length == 4) {\n              Q = parseInt(aa[0]);\n              B = parseInt(aa[1]);\n              T = parseInt(aa[2]);\n              V = parseInt(aa[3]);\n            }\n          }\n\n          if (x && !isNaN(Q) && !isNaN(B) && !isNaN(T) && !isNaN(V)) {\n            x.setHours(Q, B, T, V);\n            ac = true;\n          }\n        }\n\n        if (ac) {\n          return x;\n        }\n      }\n\n      if (ad != null) {\n        var W = null;\n        var D = [\":\", \"/\", \"-\"];\n        var ai = true;\n\n        for (var H = 0; H < D.length; H++) {\n          if (ad.indexOf(D[H]) != -1) {\n            ai = false;\n          }\n        }\n\n        if (ai) {\n          var ap = new Number(ad);\n\n          if (!isNaN(ap)) {\n            return new Date(ap);\n          }\n        }\n      }\n\n      return null;\n    };\n\n    r.getParseRegExp = function (x, I) {\n      var K = x._parseRegExp;\n\n      if (!K) {\n        x._parseRegExp = K = {};\n      } else {\n        var B = K[I];\n\n        if (B) {\n          return B;\n        }\n      }\n\n      var H = r.expandFormat(x, I).replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"),\n          F = [\"^\"],\n          y = [],\n          E = 0,\n          A = 0,\n          N = r.getTokenRegExp(),\n          C;\n\n      while ((C = N.exec(H)) !== null) {\n        var M = H.slice(E, C.index);\n        E = N.lastIndex;\n        A += r.appendPreOrPostMatch(M, F);\n\n        if (A % 2) {\n          F.push(C[0]);\n          continue;\n        }\n\n        var z = C[0],\n            D = z.length,\n            J;\n\n        switch (z) {\n          case \"dddd\":\n          case \"ddd\":\n          case \"MMMM\":\n          case \"MMM\":\n          case \"gg\":\n          case \"g\":\n            J = \"(\\\\D+)\";\n            break;\n\n          case \"tt\":\n          case \"t\":\n            J = \"(\\\\D*)\";\n            break;\n\n          case \"yyyy\":\n          case \"fff\":\n          case \"ff\":\n          case \"f\":\n            J = \"(\\\\d{\" + D + \"})\";\n            break;\n\n          case \"dd\":\n          case \"d\":\n          case \"MM\":\n          case \"M\":\n          case \"yy\":\n          case \"y\":\n          case \"HH\":\n          case \"H\":\n          case \"hh\":\n          case \"h\":\n          case \"mm\":\n          case \"m\":\n          case \"ss\":\n          case \"s\":\n            J = \"(\\\\d\\\\d?)\";\n            break;\n\n          case \"zzz\":\n            J = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n            break;\n\n          case \"zz\":\n          case \"z\":\n            J = \"([+-]?\\\\d\\\\d?)\";\n            break;\n\n          case \"/\":\n            J = \"(\\\\\" + x[\"/\"] + \")\";\n            break;\n\n          default:\n            throw \"Invalid date format pattern '\" + z + \"'.\";\n            break;\n        }\n\n        if (J) {\n          F.push(J);\n        }\n\n        y.push(C[0]);\n      }\n\n      r.appendPreOrPostMatch(H.slice(E), F);\n      F.push(\"$\");\n      var L = F.join(\"\").replace(/\\s+/g, \"\\\\s+\"),\n          G = {\n        regExp: L,\n        groups: y\n      };\n      return K[I] = G;\n    };\n\n    r.outOfRange = function (z, x, y) {\n      return z < x || z > y;\n    };\n\n    r.expandYear = function (C, A) {\n      var y = new Date(),\n          x = r.getEra(y);\n\n      if (A < 100) {\n        var z = C.twoDigitYearMax;\n        z = typeof z === \"string\" ? new Date().getFullYear() % 100 + parseInt(z, 10) : z;\n        var B = r.getEraYear(y, C, x);\n        A += B - B % 100;\n\n        if (A > z) {\n          A -= 100;\n        }\n      }\n\n      return A;\n    };\n\n    r.parseDate = function (S, Z, N) {\n      if (N == undefined || N == null) {\n        N = r.calendar;\n      }\n\n      S = r.trim(S);\n      var K = N,\n          ae = r.getParseRegExp(K, Z),\n          E = new RegExp(ae.regExp).exec(S);\n\n      if (E === null) {\n        return null;\n      }\n\n      var aa = ae.groups,\n          Q = null,\n          I = null,\n          ad = null,\n          ac = null,\n          J = null,\n          C = 0,\n          V,\n          U = 0,\n          ab = 0,\n          x = 0,\n          z = null,\n          L = false;\n\n      for (var W = 0, Y = aa.length; W < Y; W++) {\n        var y = E[W + 1];\n\n        if (y) {\n          var R = aa[W],\n              B = R.length,\n              D = parseInt(y, 10);\n\n          switch (R) {\n            case \"dd\":\n            case \"d\":\n              ac = D;\n\n              if (r.outOfRange(ac, 1, 31)) {\n                return null;\n              }\n\n              break;\n\n            case \"MMM\":\n            case \"MMMM\":\n            case \"MMMMM\":\n            case \"MMMMMM\":\n            case \"MMMMMMM\":\n            case \"MMMMMMMM\":\n              ad = r.getMonthIndex(K, y, B === 3);\n\n              if (r.outOfRange(ad, 0, 11)) {\n                return null;\n              }\n\n              break;\n\n            case \"M\":\n            case \"MM\":\n              ad = D - 1;\n\n              if (r.outOfRange(ad, 0, 11)) {\n                return null;\n              }\n\n              break;\n\n            case \"y\":\n            case \"yy\":\n            case \"yyyy\":\n              I = B < 4 ? r.expandYear(K, D) : D;\n\n              if (r.outOfRange(I, 0, 9999)) {\n                return null;\n              }\n\n              break;\n\n            case \"h\":\n            case \"hh\":\n              C = D;\n\n              if (C === 12) {\n                C = 0;\n              }\n\n              if (r.outOfRange(C, 0, 11)) {\n                return null;\n              }\n\n              break;\n\n            case \"H\":\n            case \"HH\":\n              C = D;\n\n              if (r.outOfRange(C, 0, 23)) {\n                return null;\n              }\n\n              break;\n\n            case \"m\":\n            case \"mm\":\n              U = D;\n\n              if (r.outOfRange(U, 0, 59)) {\n                return null;\n              }\n\n              break;\n\n            case \"s\":\n            case \"ss\":\n              ab = D;\n\n              if (r.outOfRange(ab, 0, 59)) {\n                return null;\n              }\n\n              break;\n\n            case \"tt\":\n            case \"t\":\n              L = K.PM && (y === K.PM[0] || y === K.PM[1] || y === K.PM[2]);\n\n              if (!L && (!K.AM || y !== K.AM[0] && y !== K.AM[1] && y !== K.AM[2])) {\n                return null;\n              }\n\n              break;\n\n            case \"f\":\n            case \"ff\":\n            case \"fff\":\n              x = D * Math.pow(10, 3 - B);\n\n              if (r.outOfRange(x, 0, 999)) {\n                return null;\n              }\n\n              break;\n\n            case \"ddd\":\n            case \"dddd\":\n              J = r.getDayIndex(K, y, B === 3);\n\n              if (r.outOfRange(J, 0, 6)) {\n                return null;\n              }\n\n              break;\n\n            case \"zzz\":\n              var A = y.split(/:/);\n\n              if (A.length !== 2) {\n                return null;\n              }\n\n              V = parseInt(A[0], 10);\n\n              if (r.outOfRange(V, -12, 13)) {\n                return null;\n              }\n\n              var G = parseInt(A[1], 10);\n\n              if (r.outOfRange(G, 0, 59)) {\n                return null;\n              }\n\n              z = V * 60 + (r.startsWith(y, \"-\") ? -G : G);\n              break;\n\n            case \"z\":\n            case \"zz\":\n              V = D;\n\n              if (r.outOfRange(V, -12, 13)) {\n                return null;\n              }\n\n              z = V * 60;\n              break;\n\n            case \"g\":\n            case \"gg\":\n              var M = y;\n\n              if (!M || !K.eras) {\n                return null;\n              }\n\n              M = M.trim().toLowerCase();\n\n              for (var X = 0, T = K.eras.length; X < T; X++) {\n                if (M === K.eras[X].nathat.toLowerCase()) {\n                  Q = X;\n                  break;\n                }\n              }\n\n              if (Q === null) {\n                return null;\n              }\n\n              break;\n          }\n        }\n      }\n\n      var H = new Date(),\n          P,\n          F = K.convert;\n      P = H.getFullYear();\n\n      if (I === null) {\n        I = P;\n      } else {\n        if (K.eras) {\n          I += K.eras[Q || 0].offset;\n        }\n      }\n\n      if (ad === null) {\n        ad = 0;\n      }\n\n      if (ac === null) {\n        ac = 1;\n      }\n\n      if (F) {\n        H = F.toGregorian(I, ad, ac);\n\n        if (H === null) {\n          return null;\n        }\n      } else {\n        H.setFullYear(I, ad, ac);\n\n        if (H.getDate() !== ac) {\n          return null;\n        }\n\n        if (J !== null && H.getDay() !== J) {\n          return null;\n        }\n      }\n\n      if (L && C < 12) {\n        C += 12;\n      }\n\n      H.setHours(C, U, ab, x);\n\n      if (z !== null) {\n        var O = H.getMinutes() - (z + H.getTimezoneOffset());\n        H.setHours(H.getHours() + parseInt(O / 60, 10), O % 60);\n      }\n\n      return H;\n    }, r.toString = function (U, L) {\n      if (U === undefined) {\n        U = \"yyyy-MM-dd HH:mm:ss\";\n      }\n\n      if (f.jqx.date.cache && f.jqx.date.cache[r.dateData + U]) {\n        return f.jqx.date.cache[r.dateData + U];\n      }\n\n      if (L && f.type(L) === \"string\" && Globalize) {\n        var V = Globalize.cultures[L];\n\n        if (V) {\n          L = V.calendar;\n        }\n      }\n\n      var Q = r.toDate();\n\n      if (L == undefined || L == null) {\n        L = r.calendar;\n      }\n\n      if (typeof Q === \"string\") {\n        return Q;\n      }\n\n      var A = Q.toString() + \"_\" + U;\n\n      if (!U || !U.length || U === \"i\") {\n        var X;\n        X = r.formatDate(Q, L.patterns.F, L);\n        return X;\n      }\n\n      var R = L.eras,\n          y = U === \"s\";\n      U = r.expandFormat(L, U);\n      X = [];\n      var D,\n          S = [\"0\", \"00\", \"000\"],\n          H,\n          I,\n          x = /([^d]|^)(d|dd)([^d]|$)/g,\n          W = 0,\n          N = r.getTokenRegExp(),\n          z;\n\n      function F(Y, ab) {\n        var aa,\n            Z = Y + \"\";\n\n        if (ab > 1 && Z.length < ab) {\n          aa = S[ab - 2] + Z;\n          return aa.substr(aa.length - ab, ab);\n        } else {\n          aa = Z;\n        }\n\n        return aa;\n      }\n\n      function T() {\n        if (H || I) {\n          return H;\n        }\n\n        H = x.test(U);\n        I = true;\n        return H;\n      }\n\n      function B(Z, Y) {\n        if (z) {\n          return z[Y];\n        }\n\n        if (Z.getMonth != undefined) {\n          switch (Y) {\n            case 0:\n              return Z.getFullYear();\n\n            case 1:\n              return Z.getMonth();\n\n            case 2:\n              return Z.getDate();\n          }\n        }\n      }\n\n      for (;;) {\n        var E = N.lastIndex,\n            M = N.exec(U);\n        var J = U.slice(E, M ? M.index : U.length);\n        W += r.appendPreOrPostMatch(J, X);\n\n        if (!M) {\n          break;\n        }\n\n        if (W % 2) {\n          X.push(M[0]);\n          continue;\n        }\n\n        var O = M[0],\n            C = O.length;\n\n        switch (O) {\n          case \"ddd\":\n          case \"dddd\":\n            var K = C === 3 ? L.days.namesAbbr : L.days.names;\n            X.push(K[Q.getDay()]);\n            break;\n\n          case \"d\":\n          case \"dd\":\n            H = true;\n            X.push(F(B(Q, 2), C));\n            break;\n\n          case \"MMM\":\n          case \"MMMM\":\n            var P = B(Q, 1);\n            X.push(L.months[C === 3 ? \"namesAbbr\" : \"names\"][P]);\n            break;\n\n          case \"M\":\n          case \"MM\":\n            X.push(F(B(Q, 1) + 1, C));\n            break;\n\n          case \"y\":\n          case \"yy\":\n          case \"yyyy\":\n            P = r.getEraYear(Q, L, r.getEra(Q, R), y);\n\n            if (C < 4) {\n              P = P % 100;\n            }\n\n            X.push(F(P, C));\n            break;\n\n          case \"h\":\n          case \"hh\":\n            D = Q.getHours() % 12;\n\n            if (D === 0) {\n              D = 12;\n            }\n\n            X.push(F(D, C));\n            break;\n\n          case \"H\":\n          case \"HH\":\n            X.push(F(Q.getHours(), C));\n            break;\n\n          case \"m\":\n          case \"mm\":\n            X.push(F(Q.getMinutes(), C));\n            break;\n\n          case \"s\":\n          case \"ss\":\n            X.push(F(Q.getSeconds(), C));\n            break;\n\n          case \"t\":\n          case \"tt\":\n            P = Q.getHours() < 12 ? L.AM ? L.AM[0] : \" \" : L.PM ? L.PM[0] : \" \";\n            X.push(C === 1 ? P.charAt(0) : P);\n            break;\n\n          case \"f\":\n          case \"ff\":\n          case \"fff\":\n            X.push(F(Q.getMilliseconds(), 3).substr(0, C));\n            break;\n\n          case \"z\":\n          case \"zz\":\n            D = Q.getTimezoneOffset() / 60;\n            X.push((D <= 0 ? \"+\" : \"-\") + F(Math.floor(Math.abs(D)), C));\n            break;\n\n          case \"zzz\":\n            D = Q.getTimezoneOffset() / 60;\n            X.push((D <= 0 ? \"+\" : \"-\") + F(Math.floor(Math.abs(D)), 2) + \":\" + F(Math.abs(Q.getTimezoneOffset() % 60), 2));\n            break;\n\n          case \"g\":\n          case \"gg\":\n            if (L.eras) {\n              X.push(L.eras[r.getEra(Q, R)].name);\n            }\n\n            break;\n\n          case \"/\":\n            X.push(L[\"/\"]);\n            break;\n\n          default:\n            throw \"Invalid date format pattern '\" + O + \"'.\";\n            break;\n        }\n      }\n\n      var G = X.join(\"\");\n\n      if (!f.jqx.date.cache) {\n        f.jqx.date.cache = new Array();\n      }\n\n      f.jqx.date.cache[r.dateData + U] = G;\n      return G;\n    };\n\n    r.add = function (B, C, y) {\n      var z = r.internalMS();\n\n      if (C === undefined) {\n        if (y === false) {\n          r.dateData = z + parseInt(B._ticks / r.ticksPerMillisecond);\n          return r;\n        }\n\n        var x = new f.jqx.date(z + parseInt(B._ticks / r.ticksPerMillisecond));\n        x.timeZone = r.timeZone;\n        return x;\n      }\n\n      var A = B * C;\n\n      if (A <= -r.maxMillis || A >= r.maxMillis) {\n        throw new Error(\"Out of Range\");\n      }\n\n      if (y === false) {\n        r.dateData = z + A;\n        return r;\n      }\n\n      var x = new f.jqx.date(z + A);\n      x.timeZone = r.timeZone;\n      return x;\n    };\n\n    r.addDays = function (y, x) {\n      return r.add(y, r.millisPerDay, x);\n    };\n\n    r.clone = function () {\n      var x = new f.jqx.date(r.dateData);\n      x.timeZone = r.timeZone;\n      return x;\n    };\n\n    r.clearTime = function () {\n      var A = r.month();\n      var z = r.year();\n      var y = r.day();\n      var x = new f.jqx.date(z, A, y, 0, 0, 0, 0);\n      x.timeZone = r.timeZone;\n      return x;\n    };\n\n    r.addHours = function (y, x) {\n      return r.add(y, r.millisPerHour, x);\n    };\n\n    r.addMilliseconds = function (y, x) {\n      return r.add(y, 1, x);\n    };\n\n    r.addMinutes = function (y, x) {\n      return r.add(y, r.millisPerMinute, x);\n    };\n\n    r.addMonths = function (z, B) {\n      if (z < -120000 || z > 120000) {\n        throw new Error(\"Invalid Months Value\");\n      }\n\n      var F = parseInt(r.getDatePart(r.datePartYear));\n      var x = parseInt(r.getDatePart(r.datePartMonth));\n      var D = parseInt(r.getDatePart(r.datePartDay));\n      var C = x - 1 + z;\n\n      if (C >= 0) {\n        x = C % 12 + 1;\n        F = F + C / 12;\n      } else {\n        x = 12 + (C + 1) % 12;\n        F = F + (C - 11) / 12;\n      }\n\n      F = parseInt(F);\n\n      if (F < 1 || F > 9999) {\n        throw new Error(\"Year out of range\");\n      }\n\n      var E = r.daysInMonth(F, x);\n\n      if (D > E) {\n        D = E;\n      }\n\n      if (B === false) {\n        r.dateData = r.dateToMS(F, x, D) + r.internalMS() % r.millisPerDay;\n        return r;\n      }\n\n      var A = new f.jqx.date(r.dateToMS(F, x, D) + r.internalMS() % r.millisPerDay);\n      A.timeZone = r.timeZone;\n      return A;\n    };\n\n    r.addSeconds = function (y, x) {\n      return r.add(y, r.millisPerSecond, x);\n    };\n\n    r.addYears = function (y, x) {\n      return r.addMonths(y * 12, x);\n    };\n\n    r.getTimeZoneOffset = function () {\n      var y = new Date();\n      var x = new Date(y.getFullYear(), 0, 1);\n      var z = new Date(y.getFullYear(), 6, 1);\n      var A = y.getTimezoneOffset() < Math.max(x.getTimezoneOffset(), z.getTimezoneOffset());\n      return {\n        offset: -(y.getTimezoneOffset() / 60),\n        dst: +A\n      };\n    };\n\n    r.isInDaylightSavingTime = function () {\n      var y = new Date();\n      var z = new Date(y.getFullYear(), 0, 1);\n      var x = new Date(y.getFullYear(), 6, 1);\n      return r.date().getTimezoneOffset() < Math.max(z.getTimezoneOffset(), x.getTimezoneOffset());\n    };\n\n    r.supportsDaylightSavingTime = function () {\n      var y = new Date();\n      var z = new Date(y.getFullYear(), 0, 1);\n      var x = new Date(y.getFullYear(), 6, 1);\n      return z.getTimezoneOffset() != x.getTimezoneOffset();\n    };\n\n    r.date = function () {\n      var A = r.month();\n      var z = r.year();\n      var y = r.day();\n      var x = new f.jqx.date(z, A, y);\n      x.timeZone = r.timeZone;\n      return x;\n    };\n\n    r.isWeekend = function () {\n      return r.dayOfWeek() == 0 || r.dayOfWeek() == 6;\n    };\n\n    r.toDate = function (J) {\n      var E = r.month();\n      var F = r.year();\n      var G = r.day();\n      var A = r.hour();\n      var z = r.minute();\n      var x = r.second();\n      var L = r.millisecond();\n      var K = new Date(F, E - 1, G);\n\n      if (F < 1970) {\n        K.setFullYear(F);\n      }\n\n      K.setHours(A, z, x, L);\n\n      if (J) {\n        var D = r.timeZones.filter(function (M) {\n          return M.id == J;\n        });\n\n        if (D.length) {\n          var B = D[0].offset;\n\n          if (J == \"Local\") {\n            B = -K.getTimezoneOffset();\n          }\n\n          var C = K.getTime();\n          var I = K.getTimezoneOffset() * 60 * 1000;\n\n          if (r.timeZone) {\n            var y = r.timeZones.filter(function (M) {\n              return M.id == r.timeZone;\n            });\n\n            if (y.length) {\n              var I = -y[0].offset * 60 * 1000;\n            }\n          }\n\n          var H = C + I;\n          K = new Date(H + 60 * 1000 * B);\n        }\n      }\n\n      return K;\n    };\n\n    r.toTimeZone = function (y) {\n      var A = y;\n\n      if (A == null) {\n        A = \"Local\";\n      }\n\n      var x = r.toDate(A);\n      var z = new f.jqx.date(x);\n      z.timeZone = y;\n      return z;\n    };\n\n    r.day = function () {\n      return r.getDatePart(r.datePartDay);\n    };\n\n    r.month = function () {\n      return r.getDatePart(r.datePartMonth);\n    };\n\n    r.year = function () {\n      return r.getDatePart(r.datePartYear);\n    };\n\n    r.millisecond = function () {\n      return parseInt(r.internalMS() % 1000);\n    };\n\n    r.hour = function () {\n      return parseInt(r.internalMS() / r.millisPerHour % 24);\n    };\n\n    r.minute = function () {\n      return parseInt(r.internalMS() / r.millisPerMinute % 60);\n    };\n\n    r.second = function () {\n      return parseInt(r.internalMS() / r.millisPerSecond % 60);\n    };\n\n    r.valueOf = function () {\n      return r.dateData;\n    };\n\n    r.equals = function (x) {\n      return r.dateData === x.dateData;\n    };\n\n    if (arguments.length === 0) {\n      var o = new Date();\n      r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n    } else {\n      if (arguments.length === 1) {\n        if (arguments[0] == undefined) {\n          arguments[0] = \"todayDate\";\n        }\n\n        var v = typeof arguments[0] === \"number\" && isFinite(arguments[0]);\n\n        if (!v && f.type(arguments[0]) === \"string\") {\n          if (arguments[0] === \"today\") {\n            var o = new Date();\n            r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n          } else {\n            if (arguments[0] === \"todayDate\") {\n              var o = new Date();\n              o.setHours(0, 0, 0, 0);\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            } else {\n              var o = r.tryparseDate(arguments[0]);\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            }\n          }\n        } else {\n          if (typeof arguments[0] === \"number\") {\n            r.dateData = arguments[0];\n          } else {\n            if (f.type(arguments[0]) == \"date\") {\n              var o = arguments[0];\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            } else {\n              if (arguments[0].dateData !== undefined) {\n                r.dateData = arguments[0].dateData;\n              } else {\n                r.dateData = arguments[0];\n              }\n            }\n          }\n        }\n      } else {\n        if (arguments.length === 2) {\n          if (arguments[0] == undefined) {\n            arguments[0] = \"todayDate\";\n          }\n\n          var v = typeof arguments[0] === \"number\" && isFinite(arguments[0]);\n\n          if (!v && f.type(arguments[0]) === \"string\") {\n            if (arguments[0] === \"today\") {\n              var o = new Date();\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            } else {\n              if (arguments[0] === \"todayDate\") {\n                var o = new Date();\n                o.setHours(0, 0, 0, 0);\n                r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n              } else {\n                var o = r.tryparseDate(arguments[0]);\n                r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n              }\n            }\n          } else {\n            if (typeof arguments[0] === \"number\") {\n              r.dateData = arguments[0];\n            } else {\n              if (f.type(arguments[0]) == \"date\") {\n                var o = arguments[0];\n                r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n              } else {\n                if (arguments[0].dateData !== undefined) {\n                  r.dateData = arguments[0].dateData;\n                } else {\n                  r.dateData = arguments[0];\n                }\n              }\n            }\n          }\n\n          r.timeZone = arguments[1];\n        } else {\n          if (arguments.length > 2) {\n            if (f.type(arguments[0]) === \"string\") {\n              var o = r.tryparseDate(arguments[0], arguments[2], arguments[1]);\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            } else {\n              var t = arguments[0];\n              var s = arguments[1];\n              var u = arguments[2];\n              var q = arguments[3];\n              var p = arguments[4];\n              var n = arguments[5];\n              var w = arguments[6];\n\n              if (q === undefined) {\n                q = 0;\n              }\n\n              if (p === undefined) {\n                p = 0;\n              }\n\n              if (n === undefined) {\n                n = 0;\n              }\n\n              if (w === undefined) {\n                w = 0;\n              }\n\n              s--;\n              var o = new Date(t, s, u, q, p, n, w);\n\n              if (t < 1970) {\n                o.setFullYear(t);\n              }\n\n              r.dateData = r.dateToMS(o.getFullYear(), o.getMonth() + 1, o.getDate()) + r.timeToMS(o.getHours(), o.getMinutes(), o.getSeconds(), o.getMilliseconds());\n            }\n          }\n        }\n      }\n    }\n\n    return r;\n  };\n})(jqxBaseFramework);\n\nif (!Array.prototype.filter) {\n  Array.prototype.filter = function (b) {\n    if (this === void 0 || this === null) {\n      throw new TypeError();\n    }\n\n    var f = Object(this);\n    var a = f.length >>> 0;\n\n    if (typeof b !== \"function\") {\n      throw new TypeError();\n    }\n\n    var e = [];\n    var d = arguments[1];\n\n    for (var c = 0; c < a; c++) {\n      if (c in f) {\n        var g = f[c];\n\n        if (b.call(d, g, c, f)) {\n          e.push(g);\n        }\n      }\n    }\n\n    return e;\n  };\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}