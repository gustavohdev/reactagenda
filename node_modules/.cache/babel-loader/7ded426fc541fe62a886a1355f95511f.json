{"ast":null,"code":"/*\r\njQWidgets v8.3.2 (2019-Oct)\r\nCopyright (c) 2011-2019 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxGrid.prototype, {\n    _handledblclick: function (t, n) {\n      if (t.target == null) {\n        return;\n      }\n\n      if (n.disabled) {\n        return;\n      }\n\n      if (a(t.target).ischildof(this.columnsheader)) {\n        return;\n      }\n\n      var w;\n\n      if (t.which) {\n        w = t.which == 3;\n      } else {\n        if (t.button) {\n          w = t.button == 2;\n        }\n      }\n\n      if (w) {\n        return;\n      }\n\n      var B;\n\n      if (t.which) {\n        B = t.which == 2;\n      } else {\n        if (t.button) {\n          B = t.button == 1;\n        }\n      }\n\n      if (B) {\n        return;\n      }\n\n      var v = this.showheader ? this.columnsheader.height() + 2 : 0;\n      var o = this._groupsheader() ? this.groupsheader.height() : 0;\n      var A = this.showtoolbar ? this.toolbarheight : 0;\n      o += A;\n      var e = this.host.offset();\n      var m = t.pageX - e.left;\n      var l = t.pageY - v - e.top - o;\n\n      var b = this._hittestrow(m, l);\n\n      if (!b) {\n        return;\n      }\n\n      var h = b.row;\n      var j = b.index;\n      var q = t.target.className;\n      var p = this.table[0].rows[j];\n\n      if (p == null) {\n        return;\n      }\n\n      n.mousecaptured = true;\n      n.mousecaptureposition = {\n        left: t.pageX,\n        top: t.pageY - o\n      };\n      var r = this.hScrollInstance;\n      var s = r.value;\n      var d = 0;\n      var k = this.groupable ? this.groups.length : 0;\n\n      for (var u = 0; u < p.cells.length; u++) {\n        var f = parseInt(a(this.columnsrow[0].cells[u]).css(\"left\"));\n        var g = f - s;\n\n        if (n.columns.records[u].pinned) {\n          g = f;\n        }\n\n        var c = this._getcolumnat(u);\n\n        if (c != null && c.hidden) {\n          continue;\n        }\n\n        var z = g + a(this.columnsrow[0].cells[u]).width();\n\n        if (z >= m && m >= g) {\n          d = u;\n          break;\n        }\n      }\n\n      if (h != null) {\n        var c = this._getcolumnat(d);\n\n        if (!(q.indexOf(\"jqx-grid-group-expand\") != -1 || q.indexOf(\"jqx-grid-group-collapse\") != -1)) {\n          if (h.boundindex != -1) {\n            n.begincelledit(n.getboundindex(h), c.datafield, c.defaulteditorvalue);\n          }\n        }\n      }\n    },\n    _getpreveditablecolumn: function (c) {\n      var b = this;\n\n      while (c > 0) {\n        c--;\n        var d = b.getcolumnat(c);\n\n        if (!d) {\n          return null;\n        }\n\n        if (!d.editable) {\n          continue;\n        }\n\n        if (!d.hidden) {\n          return d;\n        }\n      }\n\n      return null;\n    },\n    _getnexteditablecolumn: function (c) {\n      var b = this;\n\n      while (c < this.columns.records.length) {\n        c++;\n        var d = b.getcolumnat(c);\n\n        if (!d) {\n          return null;\n        }\n\n        if (!d.editable) {\n          continue;\n        }\n\n        if (!d.hidden) {\n          return d;\n        }\n      }\n\n      return null;\n    },\n    _handleeditkeydown: function (T, j) {\n      if (j.handlekeyboardnavigation) {\n        var L = j.handlekeyboardnavigation(T);\n\n        if (L == true) {\n          return true;\n        }\n      }\n\n      var u = T.charCode ? T.charCode : T.keyCode ? T.keyCode : 0;\n      j.editEvent = T;\n\n      if (j.showfilterrow && j.filterable) {\n        if (this.filterrow) {\n          if (a(T.target).ischildof(this.filterrow)) {\n            return true;\n          }\n        }\n      }\n\n      if (T.target.className && T.target.className.indexOf(\"jqx-grid-widget\") >= 0) {\n        return true;\n      }\n\n      if (j.pageable) {\n        if (a(T.target).ischildof(this.pager)) {\n          return true;\n        }\n      }\n\n      if (this.showtoolbar) {\n        if (a(T.target).ischildof(this.toolbar)) {\n          return true;\n        }\n      }\n\n      if (this.showeverpresentrow) {\n        if (this.addnewrowtop) {\n          if (a(T.target).ischildof(this.addnewrowtop)) {\n            return true;\n          }\n        }\n\n        if (this.addnewrowbottom) {\n          if (a(T.target).ischildof(this.addnewrowbottom)) {\n            return true;\n          }\n        }\n      }\n\n      if (this.showstatusbar) {\n        if (a(T.target).ischildof(this.statusbar)) {\n          return true;\n        }\n      }\n\n      if (this.rowdetails) {\n        if (a(T.target).ischildof(this.content.find(\"[role='rowgroup']\"))) {\n          return true;\n        }\n      }\n\n      if (this.editcell) {\n        if (this.editmode === \"selectedrow\") {\n          if (u === 13) {\n            this.endrowedit(this.editcell.row, false);\n            return false;\n          } else {\n            if (u === 27) {\n              this.endrowedit(this.editcell.row, true);\n              return false;\n            }\n          }\n\n          if (u == 32) {\n            if (this._currentColumn && this.getcolumn(this._currentColumn).columntype == \"checkbox\") {\n              var M = this.getcolumn(this._currentColumn);\n\n              if (M.editable) {\n                var A = !this.getcellvalue(this.editcell.row, M.datafield);\n                var H = this.getrowdata(this.editcell.row);\n                var s = this.editcell.row;\n                var H = j.getrowdata(j.editcell.row);\n                this.setcellvalue(this.editcell.row, M.datafield, A, false);\n                var k = this._focusedColumn;\n                var d = this._currentColumn;\n                var f = this._currentEditableColumn;\n                this.endrowedit(this.editcell.row, false);\n                this.beginrowedit(s, false);\n                this._currentColumn = d;\n                this._focusedColumn = k;\n                this._currentEditableColumn = f;\n\n                this._renderrows();\n\n                this.selectcell(s, M.datafield);\n                this._oldselectedcell = this.selectedcell;\n\n                if (k) {\n                  var G = this;\n                  setTimeout(function () {\n                    G.selectcell(s, M.datafield);\n                    G._oldselectedcell = G.selectedcell;\n                    a(G._checkboxCells[M.datafield].checkbox).jqxCheckBox(\"focus\");\n                  }, 25);\n                }\n\n                return false;\n              }\n            }\n          }\n\n          if (u === 9) {\n            var K = this.editcell.datafield;\n\n            var e = this._getcolumnindex(K);\n\n            if (this._currentEditableColumn) {\n              e = this._currentEditableColumn;\n            } else {\n              this._currentEditableColumn = e;\n            }\n\n            var M = this._getnexteditablecolumn(e);\n\n            if (T.shiftKey) {\n              M = this._getpreveditablecolumn(e);\n            }\n\n            if (M) {\n              var e = this._getcolumnindex(M.datafield);\n\n              if (this.editcell[M.datafield]) {\n                this._currentEditableColumn = e;\n                var b = this.editcell[M.datafield].editor;\n\n                if (b) {\n                  if (b.data().jqxWidget && b.data().jqxWidget.focus) {\n                    b.data().jqxWidget.focus();\n                  } else {\n                    b.focus();\n\n                    b[0].onkeyup = function () {\n                      if (j.gridcontent[0].scrollTop != 0) {\n                        j.scrolltop(Math.abs(j.gridcontent[0].scrollTop));\n                        j.gridcontent[0].scrollTop = 0;\n                      }\n\n                      if (j.gridcontent[0].scrollLeft != 0) {\n                        j.gridcontent[0].scrollLeft = 0;\n                      }\n                    };\n                  }\n                }\n\n                this._focusedColumn = M.datafield;\n                this._currentColumn = M.datafield;\n\n                if (this.gridcontent[0].scrollTop != 0) {\n                  this.scrolltop(Math.abs(this.gridcontent[0].scrollTop));\n                  this.gridcontent[0].scrollTop = 0;\n                }\n\n                if (this.gridcontent[0].scrollLeft != 0) {\n                  this.gridcontent[0].scrollLeft = 0;\n                }\n              } else {\n                if (M.columntype == \"checkbox\") {\n                  this._currentColumn = M.datafield;\n                  this._currentEditableColumn = e;\n                  this.selectcell(this.editcell.row, M.datafield);\n                  this._oldselectedcell = this.selectedcell;\n\n                  if (this._checkboxCells[M.datafield]) {\n                    a(this._checkboxCells[M.datafield].checkbox).jqxCheckBox(\"focus\");\n                  }\n\n                  return false;\n                }\n              }\n            }\n\n            return false;\n          }\n\n          return true;\n        }\n\n        if (this.editcell.columntype == null || this.editcell.columntype == \"textbox\" || this.editcell.columntype == \"numberinput\" || this.editcell.columntype == \"combobox\" || this.editcell.columntype == \"datetimeinput\") {\n          if (u >= 33 && u <= 40 && j.selectionmode == \"multiplecellsadvanced\") {\n            var b = this.editcell.columntype == \"textbox\" || this.editcell.columntype == null ? this.editcell.editor : this.editcell.editor.find(\"input\");\n\n            var p = j._selection(b);\n\n            var J = b.val().length;\n\n            if (p.length > 0 && this.editcell.columntype != \"datetimeinput\") {\n              j._cancelkeydown = true;\n            }\n\n            if (p.start > 0 && u == 37) {\n              j._cancelkeydown = true;\n            }\n\n            if (p.start < J && u == 39 && this.editcell.columntype != \"datetimeinput\") {\n              j._cancelkeydown = true;\n            }\n\n            if (this.editcell.columntype == \"datetimeinput\" && u == 39) {\n              if (p.start + p.length < J) {\n                j._cancelkeydown = true;\n              }\n            }\n          }\n        } else {\n          if (this.editcell.columntype == \"dropdownlist\") {\n            if (u == 37 || u == 39 && j.selectionmode == \"multiplecellsadvanced\") {\n              j._cancelkeydown = false;\n            }\n          } else {\n            if (this.selectionmode == \"multiplecellsadvanced\" && this.editcell.columntype != \"textbox\" && this.editcell.columntype != \"numberinput\") {\n              j._cancelkeydown = true;\n            }\n          }\n        }\n\n        if (u == 32) {\n          if (j.editcell.columntype == \"checkbox\") {\n            var M = j.getcolumn(j.editcell.datafield);\n\n            if (M.editable) {\n              var A = !j.getcellvalue(j.editcell.row, j.editcell.column);\n\n              if (M.cellbeginedit) {\n                var n = M.cellbeginedit(j.editcell.row, M.datafield, M.columntype, !A);\n\n                if (n == false) {\n                  return false;\n                }\n              }\n\n              var H = j.getrowdata(j.editcell.row);\n              j.setcellvalue(j.editcell.row, j.editcell.column, A, true);\n\n              j._raiseEvent(18, {\n                rowindex: j.editcell.row,\n                row: H,\n                datafield: j.editcell.column,\n                oldvalue: !A,\n                value: A,\n                columntype: \"checkbox\"\n              });\n\n              return false;\n            }\n          }\n        }\n\n        if (u == 9) {\n          var l = this.editcell.row;\n          var K = this.editcell.column;\n          var i = K;\n\n          var e = j._getcolumnindex(K);\n\n          var D = false;\n          var I = j.getrowvisibleindex(l);\n          var N = l;\n          this.editchar = \"\";\n          var t = this.editcell.validated;\n\n          if (!this.editcell.validated) {\n            var t = this.endcelledit(this.editcell.row, this.editcell.column, false, true, false);\n          }\n\n          if (t != false) {\n            if (T.shiftKey) {\n              var M = j._getpreveditablecolumn(e);\n\n              if (M) {\n                K = M.datafield;\n                D = true;\n\n                if (j.selectionmode.indexOf(\"cell\") != -1) {\n                  j.selectprevcell(l, i);\n                  j._oldselectedcell = j.selectedcell;\n                  setTimeout(function () {\n                    j.ensurecellvisible(I, K);\n                  }, 10);\n                }\n              } else {\n                var r = j._getlastvisiblecolumn();\n\n                D = true;\n                K = r.displayfield;\n                var h = j.getdisplayrows()[I - 1];\n\n                if (h) {\n                  l = h.dataindex;\n\n                  if (l === undefined) {\n                    l = h.boundindex;\n                  }\n\n                  I = j.getrowvisibleindex(l);\n                }\n\n                var y = true;\n\n                if (j.pageable) {\n                  var Q = Math.floor(I / this.pagesize);\n\n                  if (this.dataview.pagenum != Q) {\n                    y = false;\n                  }\n                }\n\n                if (y && j.selectionmode.indexOf(\"cell\") != -1) {\n                  j.clearselection();\n                  j.selectcell(l, K);\n                  j._oldselectedcell = j.selectedcell;\n                  setTimeout(function () {\n                    j.ensurecellvisible(I, K);\n                  }, 10);\n                }\n              }\n            } else {\n              var M = j._getnexteditablecolumn(e);\n\n              if (M) {\n                K = M.datafield;\n                D = true;\n\n                if (j.selectionmode.indexOf(\"cell\") != -1) {\n                  j.selectnextcell(l, i);\n                  j._oldselectedcell = j.selectedcell;\n                  setTimeout(function () {\n                    j.ensurecellvisible(I, K);\n                  }, 10);\n                }\n              } else {\n                var x = j._getfirstvisiblecolumn();\n\n                D = true;\n                K = x.displayfield;\n                var h = j.getdisplayrows()[I + 1];\n\n                if (h) {\n                  l = h.dataindex;\n\n                  if (l === undefined) {\n                    l = h.boundindex;\n                  }\n\n                  I = j.getrowvisibleindex(l);\n                }\n\n                var y = true;\n\n                if (j.pageable) {\n                  var Q = Math.floor(I / this.pagesize);\n\n                  if (this.dataview.pagenum != Q) {\n                    y = false;\n                  }\n                }\n\n                if (j.selectionmode.indexOf(\"cell\") != -1) {\n                  if (y) {\n                    j.clearselection();\n                    j.selectcell(l, K);\n                    j._oldselectedcell = j.selectedcell;\n                    setTimeout(function () {\n                      j.ensurecellvisible(I, K);\n                    }, 10);\n                  }\n                }\n              }\n            }\n\n            if (D) {\n              if (j.pageable) {\n                var Q = Math.floor(I / this.pagesize);\n\n                if (this.dataview.pagenum != Q) {\n                  this._renderrows(this.virtualsizeinfo);\n\n                  if (j.selectionmode.indexOf(\"cell\") != -1) {\n                    j.clearselection();\n                    j.selectcell(N, i);\n                    j._oldselectedcell = j.selectedcell;\n                  }\n\n                  if (Q > this.dataview.pagenum) {\n                    setTimeout(function () {\n                      j.pagerpageinput.focus();\n                    }, 25);\n                  }\n\n                  return;\n                }\n              }\n\n              j.begincelledit(l, K);\n\n              if (this.editcell != null && this.editcell.columntype == \"checkbox\") {\n                this._renderrows(this.virtualsizeinfo);\n              }\n            } else {\n              if (this.editcell != null) {\n                j.endcelledit(l, K, false);\n\n                this._renderrows(this.virtualsizeinfo);\n              }\n\n              return true;\n            }\n          }\n\n          return false;\n        } else {\n          if (u == 13) {\n            var F = this.selectedcell;\n\n            if (F) {\n              var z = this.getrowvisibleindex(F.rowindex);\n            }\n\n            this.endcelledit(this.editcell.row, this.editcell.column, false, true);\n\n            if (this.selectionmode == \"multiplecellsadvanced\") {\n              var B = j.getselectedcell();\n\n              if (B != null) {\n                if (j.selectcell) {\n                  if (this.editcell == null) {\n                    if (B.rowindex + 1 < this.dataview.totalrecords) {\n                      if (this.sortcolumn != B.datafield) {\n                        var I = this.getrowvisibleindex(B.rowindex);\n                        var q = this.dataview.loadedrecords[I + 1];\n\n                        if (q) {\n                          if (!this.pageable || this.pageable && I + 1 < (this.dataview.pagenum + 1) * this.pagesize) {\n                            this.clearselection(false);\n                            this.selectcell(this.getboundindex(q), B.datafield);\n                            var B = this.getselectedcell();\n                            this.ensurecellvisible(q.visibleindex, B.datafield);\n                          }\n                        }\n                      } else {\n                        if (F != null) {\n                          var S = this.dataview.loadedrecords[z + 1];\n\n                          if (S) {\n                            if (!this.pageable || this.pageable && z + 1 < this.pagesize) {\n                              this.clearselection(false);\n                              this.selectcell(this.getboundindex(S), B.datafield);\n                            } else {\n                              if (this.pageable && z + 1 >= this.pagesize) {\n                                this.clearselection(false);\n                                var S = this.dataview.loadedrecords[z];\n                                this.selectcell(this.getboundindex(S), B.datafield);\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            return false;\n          } else {\n            if (u == 27) {\n              this.endcelledit(this.editcell.row, this.editcell.column, true, true);\n              return false;\n            }\n          }\n        }\n      } else {\n        var O = false;\n\n        if (u == 113) {\n          O = true;\n        }\n\n        if (!T.ctrlKey && !T.altKey && !T.metaKey) {\n          if (u >= 48 && u <= 57) {\n            this.editchar = String.fromCharCode(u);\n            O = true;\n          }\n\n          if (u === 189) {\n            O = true;\n          }\n\n          if (u >= 65 && u <= 90) {\n            this.editchar = String.fromCharCode(u);\n            var o = false;\n\n            if (T.shiftKey) {\n              o = T.shiftKey;\n            } else {\n              if (T.modifiers) {\n                o = !!(T.modifiers & 4);\n              }\n            }\n\n            if (this._capsLock) {\n              o = !o;\n            }\n\n            if (!o) {\n              this.editchar = this.editchar.toLowerCase();\n            }\n\n            O = true;\n          } else {\n            if (u >= 96 && u <= 105) {\n              this.editchar = u - 96;\n              this.editchar = this.editchar.toString();\n              O = true;\n            }\n          }\n\n          var C = a(\".jqx-grid\").length;\n          O = O && (C == 1 || C > 1 && j.focused);\n          var R = a.data(document.body, \"jqxgrid.edit\");\n\n          if (R !== undefined && R !== \"\") {\n            if (u === 13 || O) {\n              if (R != j.element.id) {\n                return true;\n              }\n            }\n          }\n        }\n\n        if (u == 13 || O) {\n          if (j.getselectedrowindex) {\n            var l = j.getselectedrowindex();\n\n            if (j.editmode === \"selectedrow\") {\n              if (l >= 0) {\n                j.beginrowedit(l);\n              } else {\n                var B = j.getselectedcell();\n\n                if (B != null) {\n                  var M = j._getcolumnbydatafield(B.datafield);\n\n                  j.beginrowedit(B.rowindex);\n                }\n\n                return false;\n              }\n            }\n\n            switch (j.selectionmode) {\n              case \"singlerow\":\n              case \"multiplerows\":\n              case \"multiplerowsextended\":\n                if (l >= 0) {\n                  var K = \"\";\n\n                  for (var P = 0; P < j.columns.records.length; P++) {\n                    var M = j.getcolumnat(P);\n\n                    if (M.editable) {\n                      K = M.datafield;\n                      break;\n                    }\n                  }\n\n                  if (j.editmode === \"selectedrow\") {\n                    j.beginrowedit(l);\n                  } else {\n                    j.begincelledit(l, K);\n                  }\n                }\n\n                break;\n\n              case \"singlecell\":\n              case \"multiplecells\":\n              case \"multiplecellsextended\":\n                var B = j.getselectedcell();\n\n                if (B != null) {\n                  var M = j._getcolumnbydatafield(B.datafield);\n\n                  if (j.editmode === \"selectedrow\") {\n                    j.beginrowedit(B.rowindex);\n                  } else {\n                    if (M.columntype != \"checkbox\") {\n                      j.begincelledit(B.rowindex, B.datafield);\n                    }\n                  }\n                }\n\n                break;\n\n              case \"multiplecellsadvanced\":\n                var B = j.getselectedcell();\n\n                if (B != null) {\n                  if (u == 13) {\n                    if (j.selectcell) {\n                      var I = this.getrowvisibleindex(B.rowindex);\n\n                      if (I + 1 < j.dataview.totalrecords) {\n                        var q = this.dataview.loadedrecords[I + 1];\n\n                        if (q) {\n                          this.clearselection(false);\n                          this.selectcell(this.getboundindex(q), B.datafield);\n                          var B = this.getselectedcell();\n                          this.ensurecellvisible(q.visibleindex, B.datafield);\n                        }\n                      }\n                    }\n                  } else {\n                    if (j.editmode !== \"selectedrow\") {\n                      j.begincelledit(B.rowindex, B.datafield);\n                    }\n                  }\n                }\n\n                break;\n            }\n\n            return false;\n          }\n        }\n\n        if (u == 46) {\n          var v = j.getselectedcells();\n\n          if (j.selectionmode.indexOf(\"cell\") == -1) {\n            if (j._getcellsforcopypaste) {\n              v = j._getcellsforcopypaste();\n            }\n          }\n\n          if (v != null && v.length > 0) {\n            for (var w = 0; w < v.length; w++) {\n              var B = v[w];\n\n              if (!B.datafield) {\n                continue;\n              }\n\n              var M = j.getcolumn(B.datafield);\n              var E = j.getcellvalue(B.rowindex, B.datafield);\n\n              if (E !== \"\" && M.editable && j.enablekeyboarddelete) {\n                var c = null;\n\n                if (M.columntype == \"checkbox\") {\n                  if (!M.threestatecheckbox) {\n                    c = false;\n                  }\n                }\n\n                if (M.cellbeginedit) {\n                  var n = M.cellbeginedit(B.rowindex, M.datafield, M.columntype, c);\n\n                  if (n == false) {\n                    return false;\n                  }\n                }\n\n                var H = j.getrowdata(B.rowindex);\n\n                j._raiseEvent(17, {\n                  rowindex: B.rowindex,\n                  row: H,\n                  datafield: B.datafield,\n                  value: E\n                });\n\n                if (w == v.length - 1) {\n                  j.setcellvalue(B.rowindex, B.datafield, c, true);\n\n                  if (M.displayfield != M.datafield) {\n                    j.setcellvalue(B.rowindex, M.displayfield, c, true);\n                  }\n                } else {\n                  j.setcellvalue(B.rowindex, B.datafield, c, false);\n\n                  if (M.displayfield != M.datafield) {\n                    j.setcellvalue(B.rowindex, M.displayfield, c, true);\n                  }\n                }\n\n                if (M.cellendedit) {\n                  var g = M.cellendedit(B.rowindex, M.datafield, M.columntype, c);\n                }\n\n                j._raiseEvent(18, {\n                  rowindex: B.rowindex,\n                  row: H,\n                  datafield: B.datafield,\n                  oldvalue: E,\n                  value: c\n                });\n              }\n            }\n\n            this.dataview.updateview();\n\n            this._renderrows(this.virtualsizeinfo);\n\n            return false;\n          }\n        }\n\n        if (u == 32) {\n          var B = j.getselectedcell();\n\n          if (B != null) {\n            var M = j.getcolumn(B.datafield);\n\n            if (M.columntype == \"checkbox\" && M.editable) {\n              var A = !j.getcellvalue(B.rowindex, B.datafield);\n\n              if (M.cellbeginedit) {\n                var n = M.cellbeginedit(B.rowindex, M.datafield, M.columntype, !A);\n\n                if (n == false) {\n                  return false;\n                }\n              }\n\n              var H = j.getrowdata(B.rowindex);\n\n              j._raiseEvent(17, {\n                rowindex: B.rowindex,\n                row: H,\n                datafield: B.datafield,\n                value: !A,\n                columntype: \"checkbox\"\n              });\n\n              j.setcellvalue(B.rowindex, B.datafield, A, true);\n\n              j._raiseEvent(18, {\n                rowindex: B.rowindex,\n                row: H,\n                datafield: B.datafield,\n                oldvalue: !A,\n                value: A,\n                columntype: \"checkbox\"\n              });\n\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    begincelledit: function (o, e, l, g, c) {\n      var f = this.getcolumn(e);\n      this._cellscache = new Array();\n\n      if (e == null) {\n        return;\n      }\n\n      if (f.columntype == \"number\" || f.columntype == \"button\" || f.createwidget) {\n        return;\n      }\n\n      if (this.groupable) {\n        if (this.groups.indexOf(e) >= 0) {\n          return;\n        }\n\n        if (this.groups.indexOf(f.displayfield) >= 0) {\n          return;\n        }\n      }\n\n      if (this.editrow != undefined) {\n        return;\n      }\n\n      if (this.editcell) {\n        if (this.editcell.row == o && this.editcell.column == e) {\n          return true;\n        }\n\n        if (this.editmode === \"selectedrow\") {\n          if (this.editcell.row == o) {\n            return;\n          }\n        }\n\n        var d = this.endcelledit(this.editcell.row, this.editcell.column, false, true, false);\n\n        if (false == d) {\n          return;\n        }\n      }\n\n      var i = f.columntype == \"checkbox\" || f.columntype == \"button\" || f.createwidget;\n      this.host.removeClass(\"jqx-disableselect\");\n      this.content.removeClass(\"jqx-disableselect\");\n\n      if (f.editable) {\n        if (f.cellbeginedit) {\n          var k = this.getcell(o, e);\n          var m = f.cellbeginedit(o, e, f.columntype, k != null ? k.value : null);\n\n          if (m == false) {\n            return;\n          }\n        }\n\n        var j = this.getrowvisibleindex(o);\n        this.editcell = this.getcell(o, e);\n\n        if (this.editcell) {\n          this.editcell.visiblerowindex = j;\n\n          if (!this.editcell.editing) {\n            if (!i) {\n              this.editcell.editing = true;\n            }\n\n            this.editcell.columntype = f.columntype;\n            this.editcell.defaultvalue = l;\n\n            if (f.defaultvalue != undefined) {\n              this.editcell.defaultvalue = f.defaultvalue;\n            }\n\n            this.editcell.init = true;\n\n            if (f.columntype != \"checkbox\" && this.editmode != \"selectedrow\") {\n              var h = this.getrowdata(o);\n\n              this._raiseEvent(17, {\n                rowindex: o,\n                row: h,\n                datafield: f.datafield,\n                value: this.editcell.value,\n                columntype: f.columntype\n              });\n            }\n\n            a.data(document.body, \"jqxgrid.edit\", this.element.id);\n\n            if (!i) {\n              var b = this.getrowvisibleindex(o);\n\n              if (g !== false) {\n                if (!this.autorowheight && this.groups.length === 0) {\n                  var n = this.ensurecellvisible(b, f.datafield);\n                }\n              }\n\n              if (c !== false) {\n                this._renderrows(this.virtualsizeinfo);\n              }\n            }\n\n            if (this.editcell) {\n              this.editcell.init = false;\n              return true;\n            }\n          }\n        }\n      } else {\n        if (!this.editcell) {\n          return;\n        }\n\n        this.editcell.editor = null;\n        this.editcell.editing = false;\n\n        if (c !== false) {\n          this._renderrows(this.virtualsizeinfo);\n        }\n\n        this.editcell = null;\n      }\n    },\n    getScrollTop: function () {\n      if (this._py) {\n        return this._py;\n      }\n\n      this._py = typeof pageYOffset != \"undefined\";\n\n      if (this._py) {\n        return pageYOffset;\n      } else {\n        var c = document.body;\n        var b = document.documentElement;\n        b = b.clientHeight ? b : c;\n        return b.scrollTop;\n      }\n    },\n    getScrollLeft: function () {\n      if (typeof pageXOffset != \"undefined\") {\n        return pageXOffset;\n      } else {\n        var c = document.body;\n        var b = document.documentElement;\n        b = b.clientHeight ? b : c;\n        return b.scrollLeft;\n      }\n    },\n    endcelledit: function (h, o, k, e, p) {\n      if (h == undefined || o == undefined) {\n        if (this.editcell) {\n          h = this.editcell.row;\n          o = this.editcell.column;\n        }\n\n        if (k == undefined) {\n          k = true;\n        }\n      }\n\n      if (!this.editcell) {\n        return;\n      }\n\n      var d = this.getcolumn(o);\n      var v = this;\n\n      if (v.editmode === \"selectedrow\") {\n        this.endrowedit(h, k);\n        return;\n      }\n\n      var u = function () {\n        if (p != false) {\n          if (v.isTouchDevice()) {\n            return;\n          }\n\n          if (!v.isNestedGrid) {\n            var w = v.getScrollTop();\n            var y = v.getScrollLeft();\n\n            try {\n              v.element.focus();\n              v.content.focus();\n\n              if (w != v.getScrollTop()) {\n                window.scrollTo(y, w);\n              }\n\n              setTimeout(function () {\n                v.element.focus();\n                v.content.focus();\n\n                if (w != v.getScrollTop()) {\n                  window.scrollTo(y, w);\n                }\n              }, 10);\n            } catch (x) {}\n          }\n        }\n      };\n\n      if (d.columntype == \"checkbox\" || d.columntype == \"button\" || d.createwidget) {\n        if (this.editcell) {\n          this.editcell.editor = null;\n          this.editcell.editing = false;\n          this.editcell = null;\n        }\n\n        return true;\n      }\n\n      var i = this._geteditorvalue(d);\n\n      var g = function (x) {\n        x._hidecelleditor();\n\n        if (d.cellendedit) {\n          d.cellendedit(h, o, d.columntype, x.editcell.value, i);\n        }\n\n        x.editchar = null;\n        var z;\n\n        if (d.displayfield != d.datafield) {\n          var w = x.getcellvalue(x.editcell.row, d.displayfield);\n          var y = x.editcell.value;\n          z = {\n            value: y,\n            label: w\n          };\n        } else {\n          z = x.editcell.value;\n        }\n\n        var A = x.getrowdata(h);\n\n        x._raiseEvent(18, {\n          rowindex: h,\n          row: A,\n          datafield: o,\n          displayfield: d.displayfield,\n          oldvalue: i,\n          value: i,\n          columntype: d.columntype\n        });\n\n        x.editcell.editor = null;\n        x.editcell.editing = false;\n        x.editcell = null;\n\n        if (e || e == undefined) {\n          x._renderrows(x.virtualsizeinfo);\n        }\n\n        u();\n\n        if (!x.enablebrowserselection) {\n          x.host.addClass(\"jqx-disableselect\");\n          x.content.addClass(\"jqx-disableselect\");\n        }\n      };\n\n      if (k) {\n        g(this);\n        return false;\n      }\n\n      if (this.validationpopup) {\n        this.validationpopup.hide();\n        this.validationpopuparrow.hide();\n      }\n\n      if (d.cellvaluechanging) {\n        var b = d.cellvaluechanging(h, o, d.columntype, this.editcell.value, i);\n\n        if (b != undefined) {\n          i = b;\n        }\n      }\n\n      if (d.validation) {\n        var c = this.getcell(h, o);\n\n        try {\n          var q = d.validation(c, i);\n          var m = this.gridlocalization.validationstring;\n\n          if (q.message != undefined) {\n            m = q.message;\n          }\n\n          var n = typeof q == \"boolean\" ? q : q.result;\n\n          if (!n) {\n            if (q.showmessage == undefined || q.showmessage == true) {\n              this._showvalidationpopup(h, o, m);\n            }\n\n            this.editcell.validated = false;\n            return false;\n          }\n        } catch (s) {\n          this._showvalidationpopup(h, o, this.gridlocalization.validationstring);\n\n          this.editcell.validated = false;\n          return false;\n        }\n      }\n\n      var j;\n\n      if (d.displayfield != d.datafield) {\n        var l = this.getcellvalue(this.editcell.row, d.displayfield);\n        var r = this.editcell.value;\n        j = {\n          value: r,\n          label: l\n        };\n      } else {\n        j = this.editcell.value;\n      }\n\n      var f = this.getrowdata(h);\n\n      if (d.cellendedit) {\n        var t = d.cellendedit(h, o, d.columntype, this.editcell.value, i);\n\n        if (t == false) {\n          this._raiseEvent(18, {\n            rowindex: h,\n            row: f,\n            datafield: o,\n            displayfield: d.displayfield,\n            oldvalue: j,\n            value: j,\n            columntype: d.columntype\n          });\n\n          g(this);\n          return false;\n        }\n      }\n\n      this._raiseEvent(18, {\n        rowindex: h,\n        row: f,\n        datafield: o,\n        displayfield: d.displayfield,\n        oldvalue: j,\n        value: i,\n        columntype: d.columntype\n      });\n\n      this._hidecelleditor(false);\n\n      if (this.editcell != undefined) {\n        this.editcell.editor = null;\n        this.editcell.editing = false;\n      }\n\n      this.editcell = null;\n      this.editchar = null;\n      this.setcellvalue(h, o, i, e);\n\n      if (!this.enablebrowserselection) {\n        this.host.addClass(\"jqx-disableselect\");\n        this.content.addClass(\"jqx-disableselect\");\n      }\n\n      if (!a.jqx.browser.msie) {\n        u();\n      }\n\n      a.data(document.body, \"jqxgrid.edit\", \"\");\n      return true;\n    },\n    beginrowedit: function (f) {\n      var e = this;\n      var g = -1;\n\n      if (f == undefined) {\n        return;\n      }\n\n      e._oldselectedrow = f;\n      this._cellscache = new Array();\n      var c = false;\n\n      if (this.editmode != \"selectedrow\") {\n        c = true;\n      }\n\n      if (c) {\n        var b = this.editmode;\n        this.editmode = \"selectedrow\";\n      }\n\n      var d = null;\n\n      if (this._currentEditableColumn) {\n        d = this.getcolumnat(this._currentEditableColumn).datafield;\n      }\n\n      a.each(this.columns.records, function (i, k) {\n        if (e.editable && this.editable) {\n          if (this.columntype === \"checkbox\" || this.columntype === \"custom\" || this.columntype === \"widget\" || this.columntype === \"template\" || this.columntype === \"button\") {\n            return true;\n          }\n\n          if (!d) {\n            d = this.datafield;\n          }\n\n          var h = e.getcell(f, this.datafield);\n          e.begincelledit(f, this.datafield, null, false, false);\n          var j = e.getrowdata(f);\n\n          e._raiseEvent(17, {\n            rowindex: f,\n            row: j,\n            datafield: this.datafield,\n            value: h.value,\n            columntype: this.columntype\n          });\n        }\n      });\n\n      if (e.editcell) {\n        e.editcell.init = true;\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      if (c) {\n        this.editmode = b;\n      }\n\n      if (d && e.editcell) {\n        setTimeout(function () {\n          if (e.editcell && e.editcell[d]) {\n            var h = e.editcell[d].editor;\n\n            if (h) {\n              if (h.data().jqxWidget && h.data().jqxWidget.focus) {\n                h.data().jqxWidget.focus();\n              } else {\n                h.focus();\n              }\n            }\n          }\n        }, 25);\n      }\n    },\n    endrowedit: function (k, o) {\n      var D = this;\n      this._currentEditableColumn = 0;\n      this._focusedColumn = null;\n      this._currentColumn = null;\n      this._checkboxCells = [];\n\n      if (!this.editcell) {\n        return false;\n      }\n\n      if (this.editcell.editor == undefined && this.editcell.columntype !== \"checkbox\") {\n        return false;\n      }\n\n      var C = function () {\n        if (focus != false) {\n          if (D.isTouchDevice()) {\n            return;\n          }\n\n          if (!D.isNestedGrid) {\n            var i = D.getScrollTop();\n            var F = D.getScrollLeft();\n\n            try {\n              D.element.focus();\n              D.content.focus();\n\n              if (i != D.getScrollTop()) {\n                window.scrollTo(F, i);\n              }\n\n              setTimeout(function () {\n                D.element.focus();\n                D.content.focus();\n\n                if (i != D.getScrollTop()) {\n                  window.scrollTo(F, i);\n                }\n              }, 10);\n            } catch (E) {}\n          }\n        }\n      };\n\n      var p = false;\n\n      if (this.editmode != \"selectedrow\") {\n        p = true;\n      }\n\n      if (p) {\n        var v = this.editmode;\n        this.editmode = \"selectedrow\";\n      }\n\n      var h = false;\n      var d = {};\n\n      if (this.validationpopup) {\n        this.validationpopup.hide();\n        this.validationpopuparrow.hide();\n      }\n\n      for (var B = 0; B < this.columns.records.length; B++) {\n        var e = this.columns.records[B];\n\n        if (!e.editable) {\n          continue;\n        }\n\n        if (e.hidden) {\n          continue;\n        }\n\n        if (e.columntype == \"checkbox\") {\n          continue;\n        }\n\n        if (e.createwidget) {\n          continue;\n        }\n\n        var l = this._geteditorvalue(e);\n\n        var g = function (F) {\n          F._hidecelleditor();\n\n          var E = F.getcellvalue(F.editcell.row, e.displayfield);\n\n          if (e.cellendedit) {\n            e.cellendedit(k, u, e.columntype, E, l);\n          }\n\n          F.editchar = null;\n          var I;\n\n          if (e.displayfield != e.datafield) {\n            var i = F.getcellvalue(F.editcell.row, e.displayfield);\n            var H = E;\n            I = {\n              value: H,\n              label: i\n            };\n          } else {\n            I = E;\n          }\n\n          var G = F.getrowdata(k);\n\n          F._raiseEvent(18, {\n            rowindex: k,\n            row: G,\n            datafield: u,\n            displayfield: e.displayfield,\n            oldvalue: E,\n            value: E,\n            columntype: e.columntype\n          });\n\n          F.editcell.editing = false;\n        };\n\n        if (o) {\n          g(this);\n          continue;\n        }\n\n        if (e.cellvaluechanging) {\n          var n = this.getcellvalue(this.editcell.row, e.displayfield);\n          var b = e.cellvaluechanging(k, u, e.columntype, n, l);\n\n          if (b != undefined) {\n            l = b;\n          }\n        }\n\n        var u = e.datafield;\n\n        if (e.validation) {\n          var c = this.getcell(k, e.datafield);\n\n          try {\n            var w = e.validation(c, l);\n            var r = this.gridlocalization.validationstring;\n\n            if (w.message != undefined) {\n              r = w.message;\n            }\n\n            var t = typeof w == \"boolean\" ? w : w.result;\n\n            if (!t) {\n              if (w.showmessage == undefined || w.showmessage == true) {\n                this._showvalidationpopup(k, u, r);\n              }\n\n              h = true;\n              this.editcell[e.datafield].validated = false;\n              continue;\n            }\n          } catch (z) {\n            this._showvalidationpopup(k, u, this.gridlocalization.validationstring);\n\n            this.editcell[e.datafield].validated = false;\n            h = true;\n            continue;\n          }\n        }\n\n        if (e.displayfield != e.datafield) {\n          var q = this.getcellvalue(this.editcell.row, e.displayfield);\n          var x = this.editcell.value;\n          n = {\n            value: x,\n            label: q\n          };\n        } else {\n          n = this.getcellvalue(this.editcell.row, e.displayfield);\n        }\n\n        d[e.datafield] = {\n          newvalue: l,\n          oldvalue: n\n        };\n      }\n\n      var y = {};\n      var s = {};\n\n      if (!h) {\n        this._hidecelleditor(false);\n\n        for (var B = 0; B < this.columns.records.length; B++) {\n          var e = this.columns.records[B];\n          var u = e.datafield;\n\n          if (e.hidden) {\n            continue;\n          }\n\n          if (!e.editable) {\n            continue;\n          }\n\n          var f = this.getrowdata(k);\n\n          if (e.createwidget) {\n            continue;\n          }\n\n          if (e.columntype == \"checkbox\") {\n            var l = this.getcellvalue(k, e.displayfield);\n\n            this._raiseEvent(18, {\n              rowindex: k,\n              row: f,\n              datafield: e.datafield,\n              displayfield: e.displayfield,\n              oldvalue: l,\n              value: l,\n              columntype: e.columntype\n            });\n\n            continue;\n          }\n\n          if (!d[e.datafield]) {\n            continue;\n          }\n\n          var l = d[e.datafield].newvalue;\n          var n = d[e.datafield].oldvalue;\n\n          if (e.cellendedit) {\n            var A = e.cellendedit(k, u, e.columntype, n, l);\n\n            if (A == false) {\n              this._raiseEvent(18, {\n                rowindex: k,\n                row: f,\n                datafield: u,\n                displayfield: e.displayfield,\n                oldvalue: n,\n                value: n,\n                columntype: e.columntype\n              });\n\n              g(this);\n              continue;\n            }\n          }\n\n          if (!this.source.updaterow) {\n            this._raiseEvent(18, {\n              rowindex: k,\n              row: f,\n              datafield: e.datafield,\n              displayfield: e.displayfield,\n              oldvalue: n,\n              value: l,\n              columntype: e.columntype\n            });\n          }\n\n          y[e.datafield] = l;\n          s[e.datafield] = n;\n        }\n\n        var j = this.getrowid(k);\n        var f = this.getrowdata(k);\n        a.each(y, function (i, F) {\n          if (F && F.label != undefined) {\n            var E = D.getcolumn(i);\n            f[E.displayfield] = F.label;\n            f[E.datafield] = F.value;\n          } else {\n            f[i] = F;\n          }\n        });\n\n        if (!this.enablebrowserselection) {\n          this.host.addClass(\"jqx-disableselect\");\n          this.content.addClass(\"jqx-disableselect\");\n        }\n\n        a.data(document.body, \"jqxgrid.edit\", \"\");\n        this.editcell = null;\n        this.editchar = null;\n\n        if (this.source.updaterow && !o) {\n          var m = false;\n          var D = this;\n\n          var t = function (I) {\n            var G = D.source.updaterow;\n            D.source.updaterow = null;\n\n            if (false == I) {\n              a.each(s, function (i, K) {\n                if (K && K.label != undefined) {\n                  var J = D.getcolumn(i);\n                  f[J.displayfield] = K.label;\n                  f[J.datafield] = K.value;\n                } else {\n                  f[i] = K;\n                }\n              });\n              D.updaterow(j, f);\n            } else {\n              D.updaterow(j, f);\n            }\n\n            for (var F = 0; F < D.columns.records.length; F++) {\n              var H = D.columns.records[F];\n              var E = H.datafield;\n\n              D._raiseEvent(18, {\n                rowindex: k,\n                datafield: H.datafield,\n                row: f,\n                displayfield: H.displayfield,\n                oldvalue: s[H.datafield],\n                value: f[H.displayfield],\n                columntype: H.columntype\n              });\n            }\n\n            D.source.updaterow = G;\n          };\n\n          try {\n            m = this.source.updaterow(j, f, t);\n\n            if (m == undefined) {\n              m = true;\n            }\n          } catch (z) {\n            m = false;\n            return;\n          }\n        } else {\n          if (!o) {\n            this.updaterow(j, f);\n          }\n\n          this._renderrows(this.virtualsizeinfo);\n        }\n      }\n\n      if (p) {\n        this.editmode = v;\n      }\n\n      return h;\n    },\n    _selection: function (b) {\n      if (\"selectionStart\" in b[0]) {\n        var g = b[0];\n        var h = g.selectionEnd - g.selectionStart;\n        return {\n          start: g.selectionStart,\n          end: g.selectionEnd,\n          length: h,\n          text: g.value\n        };\n      } else {\n        var d = document.selection.createRange();\n\n        if (d == null) {\n          return {\n            start: 0,\n            end: g.value.length,\n            length: 0\n          };\n        }\n\n        var c = b[0].createTextRange();\n        var f = c.duplicate();\n        c.moveToBookmark(d.getBookmark());\n        f.setEndPoint(\"EndToStart\", c);\n        var h = d.text.length;\n        return {\n          start: f.text.length,\n          end: f.text.length + d.text.length,\n          length: h,\n          text: d.text\n        };\n      }\n    },\n    _setSelection: function (e, b, d) {\n      if (\"selectionStart\" in d[0]) {\n        d[0].focus();\n        d[0].setSelectionRange(e, b);\n      } else {\n        var c = d[0].createTextRange();\n        c.collapse(true);\n        c.moveEnd(\"character\", b);\n        c.moveStart(\"character\", e);\n        c.select();\n      }\n    },\n    findRecordIndex: function (g, c, b) {\n      var b = b;\n\n      if (c) {\n        var e = b.length;\n\n        for (var h = 0; h < e; h++) {\n          var f = b[h];\n          var d = f.label;\n\n          if (g == d) {\n            return h;\n          }\n        }\n      }\n\n      return -1;\n    },\n    _destroyeditors: function () {\n      var b = this;\n\n      if (!this.columns.records) {\n        return;\n      }\n\n      a.each(this.columns.records, function (f, j) {\n        var c = a.trim(this.datafield).split(\" \").join(\"\");\n\n        switch (this.columntype) {\n          case \"dropdownlist\":\n            var g = b.editors[\"dropdownlist_\" + c];\n\n            if (g) {\n              g.jqxDropDownList(\"destroy\");\n              b.editors[\"dropdownlist_\" + c] = null;\n            }\n\n            break;\n\n          case \"combobox\":\n            var k = b.editors[\"combobox_\" + c];\n\n            if (k) {\n              k.jqxComboBox(\"destroy\");\n              b.editors[\"combobox_\" + c] = null;\n            }\n\n            break;\n\n          case \"datetimeinput\":\n            var d = b.editors[\"datetimeinput_\" + this.datafield];\n\n            if (d) {\n              d.jqxDateTimeInput(\"destroy\");\n              b.editors[\"datetimeinput_\" + c] = null;\n            }\n\n            break;\n\n          case \"numberinput\":\n            var e = b.editors[\"numberinput_\" + c];\n\n            if (e) {\n              e.jqxNumberInput(\"destroy\");\n              b.editors[\"numberinput_\" + c] = null;\n            }\n\n            break;\n\n          case \"custom\":\n          case \"template\":\n            if (b.destroyeditor) {\n              if (b.editors[\"templateeditor_\" + c]) {\n                b.destroyeditor(b.editors[\"templateeditor_\" + c]);\n                b.editors[\"templateeditor_\" + c] = null;\n              }\n            }\n\n            if (b.destroyeditor) {\n              var m = b.getrows.length();\n\n              for (var l = 0; l < m; l++) {\n                if (b.editors[\"customeditor_\" + c + \"_\" + l]) {\n                  b.destroyeditor(b.editors[\"customeditor_\" + c + \"_\" + l], l);\n                  b.editors[\"customeditor_\" + c + \"_\" + l] = null;\n                }\n              }\n            }\n\n            break;\n\n          case \"textbox\":\n          default:\n            var h = b.editors[\"textboxeditor_\" + c];\n\n            if (h) {\n              b.removeHandler(h, \"keydown\");\n              b.editors[\"textbox_\" + c] = null;\n            }\n\n            break;\n        }\n      });\n      b.editors = new Array();\n    },\n    _showcelleditor: function (r, H, o, L, x) {\n      if (o == undefined) {\n        return;\n      }\n\n      if (this.editcell == null) {\n        return;\n      }\n\n      if (H.columntype == \"checkbox\" && H.editable) {\n        if (this.editmode == \"selectedrow\") {\n          if (!this._checkboxCells) {\n            this._checkboxCells = [];\n          }\n\n          this._checkboxCells[H.datafield] = o;\n        }\n\n        return;\n      }\n\n      if (x == undefined) {\n        x = true;\n      }\n\n      if (this.editmode == \"selectedrow\") {\n        this.editchar = \"\";\n        x = false;\n      }\n\n      var F = H.datafield;\n      var h = a(o);\n      var t = this;\n      var d = this.editcell.editor;\n      var J = this.getcellvalue(r, F);\n      var D = this.getcelltext(r, F);\n      var k = this.hScrollInstance;\n      var u = k.value;\n      var j = parseInt(u);\n      var K = this.columns.records.indexOf(H);\n      this.editcell.element = o;\n\n      if (this.editcell.validated == false) {\n        var I = \"\";\n\n        if (this.validationpopup) {\n          I = this.validationpopup.text();\n        }\n\n        this._showvalidationpopup(r, F, I);\n      }\n\n      var m = function (e) {\n        if (t.hScrollInstance.isScrolling() || t.vScrollInstance.isScrolling()) {\n          return;\n        }\n\n        if (!x) {\n          return;\n        }\n\n        if (t.isTouchDevice()) {\n          return;\n        }\n\n        if (e) {\n          e.focus();\n        }\n\n        if (t.gridcontent[0].scrollTop != 0) {\n          t.scrolltop(Math.abs(t.gridcontent[0].scrollTop));\n          t.gridcontent[0].scrollTop = 0;\n        }\n\n        if (t.gridcontent[0].scrollLeft != 0) {\n          t.gridcontent[0].scrollLeft = 0;\n        }\n      };\n\n      switch (H.columntype) {\n        case \"dropdownlist\":\n          if (this.host.jqxDropDownList) {\n            o.innerHTML = \"\";\n            var E = a.trim(H.datafield).split(\" \").join(\"\");\n            var B = a.trim(H.displayfield).split(\" \").join(\"\");\n\n            if (E.indexOf(\".\") != -1) {\n              E = E.replace(\".\", \"\");\n            }\n\n            if (B.indexOf(\".\") != -1) {\n              B = B.replace(\".\", \"\");\n            }\n\n            var l = this.editors[\"dropdownlist_\" + E];\n            d = l == undefined ? a(\"<div style='border: none; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='dropdownlisteditor'></div>\") : l;\n            d.css(\"top\", a(o).parent().position().top);\n\n            if (this.oldhscroll) {\n              d.css(\"left\", -j + parseInt(a(o).position().left));\n            } else {\n              d.css(\"left\", parseInt(a(o).position().left));\n            }\n\n            if (H.pinned) {\n              d.css(\"left\", j + parseInt(a(o).position().left));\n            }\n\n            if (l == undefined) {\n              d.prependTo(this.table);\n              d[0].id = \"dropdownlisteditor\" + this.element.id + E;\n              var g = this.source._source ? true : false;\n              var y = null;\n\n              if (!g) {\n                y = new a.jqx.dataAdapter(this.source, {\n                  autoBind: false,\n                  uniqueDataFields: [B],\n                  async: false,\n                  autoSort: true,\n                  autoSortField: B\n                });\n              } else {\n                var q = {\n                  localdata: JSON.parse(JSON.stringify(this.source.records)),\n                  datatype: this.source.datatype,\n                  async: false\n                };\n                y = new a.jqx.dataAdapter(q, {\n                  autoBind: false,\n                  async: false,\n                  uniqueDataFields: [B],\n                  autoSort: true,\n                  autoSortField: B\n                });\n              }\n\n              var v = !H.createeditor ? true : false;\n              d.jqxDropDownList({\n                hint: false,\n                enableBrowserBoundsDetection: true,\n                keyboardSelection: false,\n                source: y,\n                rtl: this.rtl,\n                autoDropDownHeight: v,\n                theme: this.theme,\n                width: h.width(),\n                height: h.height(),\n                displayMember: B,\n                valueMember: F\n              });\n              this.editors[\"dropdownlist_\" + E] = d;\n\n              if (H.createeditor) {\n                H.createeditor(r, J, d);\n              }\n            }\n\n            if (H._requirewidthupdate) {\n              d.jqxDropDownList({\n                width: h.width()\n              });\n            }\n\n            var c = d.jqxDropDownList(\"listBox\").visibleItems;\n\n            if (!H.createeditor) {\n              if (c.length < 8) {\n                d.jqxDropDownList(\"autoDropDownHeight\", true);\n              } else {\n                d.jqxDropDownList(\"autoDropDownHeight\", false);\n              }\n            }\n\n            var J = this.getcellvalue(r, B);\n            var A = this.findRecordIndex(J, B, c);\n\n            if (L) {\n              if (J != \"\") {\n                d.jqxDropDownList(\"selectIndex\", A, true);\n              } else {\n                d.jqxDropDownList(\"selectIndex\", -1);\n              }\n            }\n\n            if (!this.editcell) {\n              return;\n            }\n\n            if (this.editcell.defaultvalue != undefined) {\n              d.jqxDropDownList(\"selectIndex\", this.editcell.defaultvalue, true);\n            }\n\n            if (x) {\n              d.jqxDropDownList(\"focus\");\n            }\n          }\n\n          break;\n\n        case \"combobox\":\n          if (this.host.jqxComboBox) {\n            o.innerHTML = \"\";\n            var E = a.trim(H.datafield).split(\" \").join(\"\");\n            var B = a.trim(H.displayfield).split(\" \").join(\"\");\n\n            if (E.indexOf(\".\") != -1) {\n              E = E.replace(\".\", \"\");\n            }\n\n            if (B.indexOf(\".\") != -1) {\n              B = B.replace(\".\", \"\");\n            }\n\n            var s = this.editors[\"combobox_\" + E];\n            d = s == undefined ? a(\"<div style='border: none; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='comboboxeditor'></div>\") : s;\n            d.css(\"top\", a(o).parent().position().top);\n\n            if (this.oldhscroll) {\n              d.css(\"left\", -j + parseInt(a(o).position().left));\n            } else {\n              d.css(\"left\", parseInt(a(o).position().left));\n            }\n\n            if (H.pinned) {\n              d.css(\"left\", j + parseInt(a(o).position().left));\n            }\n\n            if (s == undefined) {\n              d.prependTo(this.table);\n              d[0].id = \"comboboxeditor\" + this.element.id + E;\n              var g = this.source._source ? true : false;\n              var y = null;\n\n              if (!g) {\n                y = new a.jqx.dataAdapter(this.source, {\n                  autoBind: false,\n                  uniqueDataFields: [B],\n                  async: false,\n                  autoSort: true,\n                  autoSortField: B\n                });\n              } else {\n                var q = {\n                  localdata: JSON.parse(JSON.stringify(this.source.records)),\n                  datatype: this.source.datatype,\n                  async: false\n                };\n                y = new a.jqx.dataAdapter(q, {\n                  autoBind: false,\n                  async: false,\n                  uniqueDataFields: [B],\n                  autoSort: true,\n                  autoSortField: B\n                });\n              }\n\n              var v = !H.createeditor ? true : false;\n              d.jqxComboBox({\n                hint: false,\n                enableBrowserBoundsDetection: true,\n                keyboardSelection: false,\n                source: y,\n                rtl: this.rtl,\n                autoDropDownHeight: v,\n                theme: this.theme,\n                width: h.width(),\n                height: h.height(),\n                displayMember: B,\n                valueMember: F\n              });\n              d.removeAttr(\"tabindex\");\n              d.find(\"div\").removeAttr(\"tabindex\");\n              this.editors[\"combobox_\" + E] = d;\n\n              if (H.createeditor) {\n                H.createeditor(r, J, d);\n              }\n            }\n\n            if (H._requirewidthupdate) {\n              d.jqxComboBox({\n                width: h.width() - 2\n              });\n            }\n\n            var c = d.jqxComboBox(\"listBox\").visibleItems;\n\n            if (!H.createeditor) {\n              if (c.length < 8) {\n                d.jqxComboBox(\"autoDropDownHeight\", true);\n              } else {\n                d.jqxComboBox(\"autoDropDownHeight\", false);\n              }\n            }\n\n            var J = this.getcellvalue(r, B);\n            var A = this.findRecordIndex(J, B, c);\n\n            if (L) {\n              if (J != \"\") {\n                d.jqxComboBox(\"selectIndex\", A, true);\n                d.jqxComboBox(\"val\", J);\n              } else {\n                d.jqxComboBox(\"selectIndex\", -1);\n                d.jqxComboBox(\"val\", J);\n              }\n            }\n\n            if (!this.editcell) {\n              return;\n            }\n\n            if (this.editcell.defaultvalue != undefined) {\n              d.jqxComboBox(\"selectIndex\", this.editcell.defaultvalue, true);\n            }\n\n            if (this.editchar && this.editchar.length > 0) {\n              d.jqxComboBox(\"input\").val(this.editchar);\n            }\n\n            if (x) {\n              setTimeout(function () {\n                m(d.jqxComboBox(\"input\"));\n\n                if (d) {\n                  d.jqxComboBox(\"_setSelection\", 0, 0);\n\n                  if (t.editchar) {\n                    d.jqxComboBox(\"_setSelection\", 1, 1);\n                    t.editchar = null;\n                  } else {\n                    if (d.jqxComboBox(\"input\")) {\n                      var e = d.jqxComboBox(\"input\").val();\n                      d.jqxComboBox(\"_setSelection\", 0, e.length);\n                    }\n                  }\n                }\n              }, 10);\n            }\n          }\n\n          break;\n\n        case \"datetimeinput\":\n          if (this.host.jqxDateTimeInput) {\n            o.innerHTML = \"\";\n            var E = a.trim(H.datafield).split(\" \").join(\"\");\n\n            if (E.indexOf(\".\") != -1) {\n              E = E.replace(\".\", \"\");\n            }\n\n            var w = this.editors[\"datetimeinput_\" + E];\n            d = w == undefined ? a(\"<div style='border: none; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='datetimeeditor'></div>\") : w;\n            d.show();\n            d.css(\"top\", a(o).parent().position().top);\n\n            if (this.oldhscroll) {\n              d.css(\"left\", -j + parseInt(a(o).position().left));\n            } else {\n              d.css(\"left\", parseInt(a(o).position().left));\n            }\n\n            if (H.pinned) {\n              d.css(\"left\", j + parseInt(a(o).position().left));\n            }\n\n            if (w == undefined) {\n              d.prependTo(this.table);\n              d[0].id = \"datetimeeditor\" + this.element.id + E;\n              var G = {\n                calendar: this.gridlocalization\n              };\n              d.jqxDateTimeInput({\n                hint: false,\n                firstDayOfWeek: this.gridlocalization.firstDay,\n                enableBrowserBoundsDetection: true,\n                localization: G,\n                _editor: true,\n                theme: this.theme,\n                rtl: this.rtl,\n                width: h.width(),\n                height: h.height(),\n                formatString: H.cellsformat\n              });\n              this.editors[\"datetimeinput_\" + E] = d;\n\n              if (H.createeditor) {\n                H.createeditor(r, J, d);\n              }\n            }\n\n            if (H._requirewidthupdate) {\n              d.jqxDateTimeInput({\n                width: h.width()\n              });\n            }\n\n            if (L) {\n              if (J != \"\" && J != null) {\n                var M = new Date(J);\n\n                if (M == \"Invalid Date\") {\n                  if (this.source.getvaluebytype) {\n                    M = this.source.getvaluebytype(J, {\n                      name: H.datafield,\n                      type: \"date\"\n                    });\n                  }\n                }\n\n                d.jqxDateTimeInput(\"setDate\", M);\n              } else {\n                d.jqxDateTimeInput(\"setDate\", null);\n              }\n\n              if (this.editcell.defaultvalue != undefined) {\n                d.jqxDateTimeInput(\"setDate\", this.editcell.defaultvalue);\n              }\n            }\n\n            if (x) {\n              var N = this.editEvent;\n              setTimeout(function () {\n                m(d.jqxDateTimeInput(\"dateTimeInput\"));\n                setTimeout(function () {\n                  d.jqxDateTimeInput(\"_selectGroup\", 0);\n\n                  if (t.editchar && t.editchar.length > 0) {\n                    var R = parseInt(t.editchar);\n\n                    if (!isNaN(R)) {\n                      if (N) {\n                        var e = N.charCode ? N.charCode : N.keyCode ? N.keyCode : 0;\n                        d.jqxDateTimeInput(\"_handleKeyPress\", N, e);\n                      }\n                    }\n                  }\n                }, 25);\n              }, 10);\n            }\n          }\n\n          break;\n\n        case \"numberinput\":\n          if (this.host.jqxNumberInput) {\n            o.innerHTML = \"\";\n            var E = a.trim(H.datafield).split(\" \").join(\"\");\n\n            if (E.indexOf(\".\") != -1) {\n              E = E.replace(\".\", \"\");\n            }\n\n            var P = this.editors[\"numberinput_\" + E];\n            d = P == undefined ? a(\"<div style='border:none; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='numbereditor'></div>\") : P;\n            d.show();\n            d.css(\"top\", a(o).parent().position().top);\n\n            if (this.oldhscroll) {\n              d.css(\"left\", -j + parseInt(a(o).position().left));\n            } else {\n              d.css(\"left\", parseInt(a(o).position().left));\n            }\n\n            if (H.pinned) {\n              d.css(\"left\", j + parseInt(a(o).position().left));\n            }\n\n            if (P == undefined) {\n              d.prependTo(this.table);\n              d[0].id = \"numbereditor\" + this.element.id + E;\n              var n = \"\";\n              var z = \"left\";\n              var O = 2;\n\n              if (H.cellsformat) {\n                if (H.cellsformat.indexOf(\"c\") != -1) {\n                  n = this.gridlocalization.currencysymbol;\n                  z = this.gridlocalization.currencysymbolposition;\n\n                  if (z == \"before\") {\n                    z = \"left\";\n                  } else {\n                    z = \"right\";\n                  }\n\n                  if (H.cellsformat.length > 1) {\n                    O = parseInt(H.cellsformat.substring(1), 10);\n                  }\n                } else {\n                  if (H.cellsformat.indexOf(\"p\") != -1) {\n                    n = this.gridlocalization.percentsymbol;\n                    z = \"right\";\n\n                    if (H.cellsformat.length > 1) {\n                      O = parseInt(H.cellsformat.substring(1), 10);\n                    }\n                  }\n                }\n              } else {\n                O = 0;\n              }\n\n              d.jqxNumberInput({\n                decimalSeparator: this.gridlocalization.decimalseparator,\n                decimalDigits: O,\n                inputMode: \"simple\",\n                theme: this.theme,\n                rtl: this.rtl,\n                width: h.width(),\n                height: h.height(),\n                spinButtons: true,\n                symbol: n,\n                symbolPosition: z\n              });\n              this.editors[\"numberinput_\" + E] = d;\n\n              if (H.createeditor) {\n                H.createeditor(r, J, d);\n              }\n            }\n\n            if (H._requirewidthupdate) {\n              d.jqxNumberInput({\n                width: h.width()\n              });\n            }\n\n            if (L) {\n              if (J != \"\" && J != null) {\n                var Q = J;\n                d.jqxNumberInput(\"setDecimal\", Q);\n              } else {\n                d.jqxNumberInput(\"setDecimal\", 0);\n              }\n\n              if (this.editcell.defaultvalue != undefined) {\n                d.jqxNumberInput(\"setDecimal\", this.editcell.defaultvalue);\n              }\n\n              if (this.editchar && this.editchar.length > 0) {\n                var p = parseInt(this.editchar);\n\n                if (!isNaN(p)) {\n                  d.jqxNumberInput(\"setDecimal\", p);\n                }\n              }\n\n              if (x) {\n                setTimeout(function () {\n                  m(d.jqxNumberInput(\"numberInput\"));\n                  d.jqxNumberInput(\"_setSelectionStart\", 0);\n\n                  if (t.editchar) {\n                    if (H.cellsformat.length > 0 && H.cellsformat.indexOf(\"c\") >= 0) {\n                      d.jqxNumberInput(\"_setSelectionStart\", 2);\n                    } else {\n                      d.jqxNumberInput(\"_setSelectionStart\", 1);\n                    }\n\n                    t.editchar = null;\n                  } else {\n                    var e = d.jqxNumberInput(\"spinButtons\");\n\n                    if (e) {\n                      var R = d.jqxNumberInput(\"numberInput\").val();\n\n                      t._setSelection(d.jqxNumberInput(\"numberInput\")[0], R.length, R.length);\n                    } else {\n                      var R = d.jqxNumberInput(\"numberInput\").val();\n\n                      t._setSelection(d.jqxNumberInput(\"numberInput\")[0], 0, R.length);\n                    }\n\n                    d.jqxNumberInput(\"selectAll\");\n                  }\n                }, 10);\n              }\n            }\n          }\n\n          break;\n\n        case \"custom\":\n          o.innerHTML = \"\";\n          var E = a.trim(H.datafield).split(\" \").join(\"\");\n\n          if (E.indexOf(\".\") != -1) {\n            E = E.replace(\".\", \"\");\n          }\n\n          var C = this.editors[\"customeditor_\" + E + \"_\" + r];\n          d = C == undefined ? a(\"<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='customeditor'></div>\") : C;\n          d.show();\n          d.css(\"top\", a(o).parent().position().top);\n\n          if (this.oldhscroll) {\n            d.css(\"left\", -j + parseInt(a(o).position().left));\n          } else {\n            d.css(\"left\", parseInt(a(o).position().left));\n          }\n\n          if (H.pinned) {\n            d.css(\"left\", j + parseInt(a(o).position().left));\n          }\n\n          if (C == undefined) {\n            d.prependTo(this.table);\n            d[0].id = \"customeditor\" + this.element.id + E + \"_\" + r;\n            this.editors[\"customeditor_\" + E + \"_\" + r] = d;\n            var b = h.width() - 1;\n            var f = h.height() - 1;\n            d.width(b);\n            d.height(f);\n\n            if (H.createeditor) {\n              H.createeditor(r, J, d, D, b, f, this.editchar);\n            }\n          }\n\n          if (H._requirewidthupdate) {\n            d.width(h.width());\n          }\n\n          break;\n\n        case \"template\":\n          o.innerHTML = \"\";\n          var E = a.trim(H.datafield).split(\" \").join(\"\");\n\n          if (E.indexOf(\".\") != -1) {\n            E = E.replace(\".\", \"\");\n          }\n\n          var i = this.editors[\"templateeditor_\" + E];\n          d = i == undefined ? a(\"<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 799; top: 0px; left: 0px; position: absolute;' id='templateeditor'></div>\") : i;\n          d.show();\n          d.css(\"top\", a(o).parent().position().top);\n\n          if (this.oldhscroll) {\n            d.css(\"left\", -j + parseInt(a(o).position().left));\n          } else {\n            d.css(\"left\", parseInt(a(o).position().left));\n          }\n\n          if (H.pinned) {\n            d.css(\"left\", j + parseInt(a(o).position().left));\n          }\n\n          if (i == undefined) {\n            d.prependTo(this.table);\n            d[0].id = \"templateeditor\" + this.element.id + E;\n            this.editors[\"templateeditor_\" + E] = d;\n            var b = h.width() - 1;\n            var f = h.height() - 1;\n            d.width(b);\n            d.height(f);\n\n            if (H.createeditor) {\n              H.createeditor(r, J, d, D, b, f, this.editchar);\n            }\n          }\n\n          if (H._requirewidthupdate) {\n            d.width(h.width());\n          }\n\n          break;\n\n        case \"textbox\":\n        default:\n          o.innerHTML = \"\";\n          d = this.editors[\"textboxeditor_\" + H.datafield] || a(\"<input autocomplete='off' style='padding-left: 4px; padding-right:4px; border: none; border-color: transparent;' autocorrect='off' autocapitalize='off' spellcheck='false' type='textbox' id='textboxeditor'/>\");\n          d[0].id = \"textboxeditor\" + this.element.id + H.datafield;\n          d.appendTo(h);\n\n          if (this.rtl) {\n            d.css(\"direction\", \"rtl\");\n          }\n\n          if (L || d[0].className == \"\") {\n            d.addClass(this.toThemeProperty(\"jqx-input\"));\n            d.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n\n            if (this.editchar && this.editchar.length > 0) {\n              d.val(this.editchar);\n            } else {\n              if (H.cellsformat != \"\") {\n                J = this.getcelltext(r, F);\n              }\n\n              if (J == undefined) {\n                J = \"\";\n              }\n\n              d.val(J);\n            }\n\n            if (this.editcell.defaultvalue != undefined) {\n              d.val(this.editcell.defaultvalue);\n            }\n\n            d.width(h.width() + 1);\n            d.height(h.height() + 1);\n\n            if (H.createeditor) {\n              H.createeditor(r, J, d);\n            }\n\n            if (H.cellsformat != \"\") {\n              if (H.cellsformat.indexOf(\"p\") != -1 || H.cellsformat.indexOf(\"c\") != -1 || H.cellsformat.indexOf(\"n\") != -1 || H.cellsformat.indexOf(\"f\") != -1) {\n                if (!this.editors[\"textboxeditor_\" + H.datafield]) {\n                  d.keydown(function (R) {\n                    var X = R.charCode ? R.charCode : R.keyCode ? R.keyCode : 0;\n                    var U = String.fromCharCode(X);\n                    var V = parseInt(U);\n\n                    if (isNaN(V)) {\n                      return true;\n                    }\n\n                    if (t._selection(d).length > 0) {\n                      return true;\n                    }\n\n                    var T = \"\";\n                    var S = d.val();\n\n                    if (H.cellsformat.length > 1) {\n                      var W = parseInt(H.cellsformat.substring(1));\n\n                      if (isNaN(W)) {\n                        W = 0;\n                      }\n                    } else {\n                      var W = 0;\n                    }\n\n                    if (W > 0) {\n                      if (S.indexOf(t.gridlocalization.decimalseparator) != -1) {\n                        if (t._selection(d).start > S.indexOf(t.gridlocalization.decimalseparator)) {\n                          return true;\n                        }\n                      }\n                    }\n\n                    for (var Y = 0; Y < S.length - W; Y++) {\n                      var e = S.substring(Y, Y + 1);\n\n                      if (e.match(/^[0-9]+$/) != null) {\n                        T += e;\n                      }\n                    }\n\n                    if (T.length >= 11) {\n                      return false;\n                    }\n                  });\n                }\n              }\n            }\n          }\n\n          this.editors[\"textboxeditor_\" + H.datafield] = d;\n\n          if (L) {\n            if (x) {\n              setTimeout(function () {\n                m(d);\n\n                if (t.editchar) {\n                  t._setSelection(d[0], 1, 1);\n\n                  t.editchar = null;\n                } else {\n                  t._setSelection(d[0], 0, d.val().length);\n                }\n              }, 25);\n            }\n          }\n\n          break;\n      }\n\n      if (d) {\n        d.addClass(\"jqx-grid-cell-edit\");\n        d[0].style.zIndex = 1 + parseInt(o.style.zIndex);\n\n        if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n          d[0].style.zIndex = 1 + this.columns.records.length + o.style.zIndex;\n        }\n\n        d.css(\"display\", \"block\");\n        this.editcell.editor = d;\n\n        if (!this.editcell[F]) {\n          this.editcell[F] = {};\n          this.editcell[F].editor = d;\n        } else {\n          this.editcell[F].editor = d;\n        }\n      }\n\n      if (L) {\n        if (H.initeditor) {\n          H.initeditor(r, J, d, D, this.editchar);\n        }\n      }\n\n      if (t.isTouchDevice()) {\n        return;\n      }\n\n      setTimeout(function () {\n        if (t.content) {\n          t.content[0].scrollTop = 0;\n          t.content[0].scrollLeft = 0;\n        }\n\n        if (t.gridcontent) {\n          t.gridcontent[0].scrollLeft = 0;\n          t.gridcontent[0].scrollTop = 0;\n        }\n      }, 10);\n    },\n    _setSelection: function (d, g, b) {\n      try {\n        if (\"selectionStart\" in d) {\n          d.setSelectionRange(g, b);\n        } else {\n          var c = d.createTextRange();\n          c.collapse(true);\n          c.moveEnd(\"character\", b);\n          c.moveStart(\"character\", g);\n          c.select();\n        }\n      } catch (e) {\n        var f = e;\n      }\n    },\n    _hideeditors: function () {\n      if (this.editcells != null) {\n        var b = this;\n\n        for (var c in this.editcells) {\n          b.editcell = b.editcells[c];\n\n          b._hidecelleditor();\n        }\n      }\n    },\n    _hidecelleditor: function (b) {\n      if (!this.editcell) {\n        return;\n      }\n\n      if (this.editmode === \"selectedrow\") {\n        for (var c = 0; c < this.columns.records.length; c++) {\n          var e = this.columns.records[c];\n\n          if (this.editcell[e.datafield] && this.editcell[e.datafield].editor) {\n            this.editcell[e.datafield].editor.hide();\n            var d = this.editcell[e.datafield].editor;\n\n            switch (e.columntype) {\n              case \"dropdownlist\":\n                d.jqxDropDownList({\n                  closeDelay: 0\n                });\n                d.jqxDropDownList(\"hideListBox\");\n                d.jqxDropDownList({\n                  closeDelay: 300\n                });\n                break;\n\n              case \"combobox\":\n                d.jqxComboBox({\n                  closeDelay: 0\n                });\n                d.jqxComboBox(\"hideListBox\");\n                d.jqxComboBox({\n                  closeDelay: 300\n                });\n                break;\n\n              case \"datetimeinput\":\n                if (d.jqxDateTimeInput(\"isOpened\")) {\n                  d.jqxDateTimeInput({\n                    closeDelay: 0\n                  });\n                  d.jqxDateTimeInput(\"hideCalendar\");\n                  d.jqxDateTimeInput({\n                    closeDelay: 300\n                  });\n                }\n\n                break;\n            }\n          }\n        }\n\n        if (this.validationpopup) {\n          this.validationpopup.hide();\n          this.validationpopuparrow.hide();\n        }\n\n        return;\n      }\n\n      if (this.editcell.columntype == \"checkbox\") {\n        return;\n      }\n\n      if (this.editcell.editor) {\n        this.editcell.editor.hide();\n\n        switch (this.editcell.columntype) {\n          case \"dropdownlist\":\n            this.editcell.editor.jqxDropDownList({\n              closeDelay: 0\n            });\n            this.editcell.editor.jqxDropDownList(\"hideListBox\");\n            this.editcell.editor.jqxDropDownList({\n              closeDelay: 300\n            });\n            break;\n\n          case \"combobox\":\n            this.editcell.editor.jqxComboBox({\n              closeDelay: 0\n            });\n            this.editcell.editor.jqxComboBox(\"hideListBox\");\n            this.editcell.editor.jqxComboBox({\n              closeDelay: 300\n            });\n            break;\n\n          case \"datetimeinput\":\n            var f = this.editcell.editor;\n\n            if (f.jqxDateTimeInput(\"isOpened\")) {\n              f.jqxDateTimeInput({\n                closeDelay: 0\n              });\n              f.jqxDateTimeInput(\"hideCalendar\");\n              f.jqxDateTimeInput({\n                closeDelay: 300\n              });\n            }\n\n            break;\n        }\n      }\n\n      if (this.validationpopup) {\n        this.validationpopup.hide();\n        this.validationpopuparrow.hide();\n      }\n\n      if (!this.isNestedGrid) {\n        if (b != false) {\n          this.element.focus();\n        }\n      }\n    },\n    _geteditorvalue: function (h) {\n      var o = new String();\n\n      if (!this.editcell) {\n        return null;\n      }\n\n      var l = this.editcell.editor;\n\n      if (this.editmode == \"selectedrow\") {\n        if (this.editcell[h.datafield]) {\n          var l = this.editcell[h.datafield].editor;\n        }\n      }\n\n      if (l) {\n        switch (h.columntype) {\n          case \"textbox\":\n          default:\n            o = l.val();\n\n            if (h.cellsformat != \"\") {\n              var n = \"string\";\n              var e = this.source.datafields || (this.source._source ? this.source._source.datafields : null);\n\n              if (e) {\n                var p = \"\";\n                a.each(e, function () {\n                  if (this.name == h.displayfield) {\n                    if (this.type) {\n                      p = this.type;\n                    }\n\n                    return false;\n                  }\n                });\n\n                if (p) {\n                  n = p;\n                }\n              }\n\n              var i = n === \"number\" || n === \"float\" || n === \"int\" || n === \"integer\";\n              var f = n === \"date\" || n === \"time\";\n\n              if (i || n === \"string\" && (h.cellsformat.indexOf(\"p\") != -1 || h.cellsformat.indexOf(\"c\") != -1 || h.cellsformat.indexOf(\"n\") != -1 || h.cellsformat.indexOf(\"f\") != -1)) {\n                if (o === \"\" && h.nullable) {\n                  return \"\";\n                }\n\n                if (o.indexOf && o.indexOf(this.gridlocalization.currencysymbol) > -1) {\n                  o = o.replace(this.gridlocalization.currencysymbol, \"\");\n                }\n\n                var m = function (w, u, v) {\n                  var s = w;\n\n                  if (u == v) {\n                    return w;\n                  }\n\n                  var t = s.indexOf(u);\n\n                  while (t != -1) {\n                    s = s.replace(u, v);\n                    t = s.indexOf(u);\n                  }\n\n                  return s;\n                };\n\n                var k = o;\n                k = new Number(k);\n\n                if (!isNaN(k)) {\n                  return k;\n                }\n\n                o = m(o, this.gridlocalization.thousandsseparator, \"\");\n                o = o.replace(this.gridlocalization.decimalseparator, \".\");\n\n                if (o.indexOf(this.gridlocalization.percentsymbol) > -1) {\n                  o = o.replace(this.gridlocalization.percentsymbol, \"\");\n                }\n\n                var d = \"\";\n\n                for (var r = 0; r < o.length; r++) {\n                  var b = o.substring(r, r + 1);\n\n                  if (b === \"-\") {\n                    d += \"-\";\n                  }\n\n                  if (b === \".\") {\n                    d += \".\";\n                  }\n\n                  if (b.match(/^[0-9]+$/) != null) {\n                    d += b;\n                  }\n                }\n\n                o = d;\n                o = o.replace(/ /g, \"\");\n                o = new Number(o);\n\n                if (isNaN(o)) {\n                  o = \"\";\n                }\n              }\n\n              if (f || n === \"string\" && (h.cellsformat.indexOf(\"H\") != -1 || h.cellsformat.indexOf(\"m\") != -1 || h.cellsformat.indexOf(\"M\") != -1 || h.cellsformat.indexOf(\"y\") != -1 || h.cellsformat.indexOf(\"h\") != -1 || h.cellsformat.indexOf(\"d\") != -1)) {\n                if (o === \"\" && h.nullable) {\n                  return \"\";\n                }\n\n                var c = o;\n\n                if (a.jqx.dataFormat) {\n                  o = a.jqx.dataFormat.tryparsedate(c, this.gridlocalization);\n                }\n\n                if (o == \"Invalid Date\" || o == null) {\n                  o = \"\";\n                }\n              }\n            }\n\n            if (h.displayfield != h.datafield) {\n              o = {\n                label: o,\n                value: o\n              };\n            }\n\n            break;\n\n          case \"checkbox\":\n            if (l.jqxCheckBox) {\n              o = l.jqxCheckBox(\"checked\");\n            }\n\n            break;\n\n          case \"datetimeinput\":\n            if (l.jqxDateTimeInput) {\n              l.jqxDateTimeInput({\n                isEditing: false\n              });\n\n              if (l.jqxDateTimeInput(\"container\").css(\"display\") !== \"none\") {\n                l.jqxDateTimeInput(\"close\");\n              }\n\n              l.jqxDateTimeInput(\"_validateValue\");\n              o = l.jqxDateTimeInput(\"getDate\");\n\n              if (o == null) {\n                return null;\n              }\n\n              o = new Date(o.toString());\n\n              if (h.displayfield != h.datafield) {\n                o = {\n                  label: o,\n                  value: o\n                };\n              }\n            }\n\n            break;\n\n          case \"dropdownlist\":\n            if (l.jqxDropDownList) {\n              var g = l.jqxDropDownList(\"selectedIndex\");\n              var q = l.jqxDropDownList(\"listBox\").getVisibleItem(g);\n\n              if (h.displayfield != h.datafield) {\n                if (q) {\n                  o = {\n                    label: q.label,\n                    value: q.value\n                  };\n                } else {\n                  o = \"\";\n                }\n              } else {\n                if (q) {\n                  o = q.label;\n                } else {\n                  o = \"\";\n                }\n              }\n\n              if (o == null) {\n                o = \"\";\n              }\n            }\n\n            break;\n\n          case \"combobox\":\n            if (l.jqxComboBox) {\n              o = l.jqxComboBox(\"val\");\n\n              if (h.displayfield != h.datafield) {\n                var q = l.jqxComboBox(\"getSelectedItem\");\n\n                if (q != null) {\n                  o = {\n                    label: q.label,\n                    value: q.value\n                  };\n                }\n              }\n\n              if (o == null) {\n                o = \"\";\n              }\n            }\n\n            break;\n\n          case \"numberinput\":\n            if (l.jqxNumberInput) {\n              if (this.touchdevice) {\n                l.jqxNumberInput(\"_doTouchHandling\");\n              }\n\n              var j = l.jqxNumberInput(\"getDecimal\");\n              o = new Number(j);\n              o = parseFloat(o);\n\n              if (isNaN(o)) {\n                o = 0;\n              }\n\n              if (j === null) {\n                o = null;\n              }\n\n              if (h.displayfield != h.datafield) {\n                o = {\n                  label: o,\n                  value: o\n                };\n              }\n            }\n\n            break;\n        }\n\n        if (h.geteditorvalue) {\n          if (this.editmode == \"selectedrow\") {\n            o = h.geteditorvalue(this.editcell.row, this.getcellvalue(this.editcell.row, h.datafield), l);\n          } else {\n            o = h.geteditorvalue(this.editcell.row, this.editcell.value, l);\n          }\n        }\n      }\n\n      return o;\n    },\n    hidevalidationpopups: function () {\n      if (this.popups) {\n        a.each(this.popups, function () {\n          this.validation.remove();\n          this.validationrow.remove();\n        });\n        this.popups = new Array();\n      }\n\n      if (this.validationpopup) {\n        this.validationpopuparrow.hide();\n        this.validationpopup.hide();\n      }\n    },\n    showvalidationpopup: function (f, j, h) {\n      if (h == undefined) {\n        var h = this.gridlocalization.validationstring;\n      }\n\n      var g = a(\"<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>\");\n      var r = a(\"<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>\");\n      g.html(h);\n      r.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n      g.addClass(this.toThemeProperty(\"jqx-grid-validation\"));\n      g.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      g.prependTo(this.table);\n      r.prependTo(this.table);\n      var l = this.hScrollInstance;\n      var n = l.value;\n      var d = parseInt(n);\n      var b = this.getcolumn(j).uielement;\n      var p = null;\n\n      for (var o = 0; o < this.hittestinfo.length; o++) {\n        if (f === this.hittestinfo[o].row.visibleindex) {\n          p = this.hittestinfo[o];\n        }\n      }\n\n      if (!p) {\n        this.ensurerowvisible(f);\n        var s = this;\n        g.remove();\n        r.remove();\n        setTimeout(function () {\n          var v = null;\n\n          for (var u = 0; u < s.hittestinfo.length; u++) {\n            if (f === s.hittestinfo[u].row.visibleindex) {\n              v = s.hittestinfo[u];\n            }\n          }\n\n          if (v) {\n            s.showvalidationpopup(f, j, h);\n          }\n        }, 25);\n        return;\n      }\n\n      var c = a(p.visualrow);\n      g.css(\"top\", parseInt(c.position().top) + 30 + \"px\");\n      var k = parseInt(g.css(\"top\"));\n      r.css(\"top\", k - 12);\n      r.removeClass();\n      r.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n      var q = false;\n\n      if (k >= this._gettableheight() - this.rowsheight) {\n        r.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n        r.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));\n        k = parseInt(c.position().top) - this.rowsheight;\n\n        if (k < 0) {\n          k = 0;\n          this.validationpopuparrow.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));\n          q = true;\n        }\n\n        g.css(\"top\", k + \"px\");\n        r.css(\"top\", k + g.outerHeight() - 9);\n      }\n\n      var t = -d + parseInt(a(b).position().left);\n\n      if (b[0].offsetHeight === 0) {\n        t = -d + parseInt(b[0].style.left);\n      }\n\n      r.css(\"left\", d + t + 30);\n      var m = g.width();\n\n      if (m + t > this.host.width() - 20) {\n        var e = m + t - this.host.width() + 40;\n        t -= e;\n      }\n\n      if (!q) {\n        g.css(\"left\", d + t);\n      } else {\n        g.css(\"left\", d + parseInt(a(b).position().left) - g.outerWidth());\n      }\n\n      g.show();\n      r.show();\n\n      if (!this.popups) {\n        this.popups = new Array();\n      }\n\n      this.popups[this.popups.length] = {\n        validation: g,\n        validationrow: r\n      };\n    },\n    _showvalidationpopup: function (p, e, q) {\n      var c = this.editcell;\n      var k = this.editcell.editor;\n\n      if (this.editmode == \"selectedrow\") {\n        var c = this.editcell[e];\n\n        if (c && c.editor) {\n          k = c.editor;\n          c.element = k;\n        }\n      }\n\n      if (!k) {\n        return;\n      }\n\n      if (this.validationpopup && a.jqx.isHidden(this.validationpopup)) {\n        if (this.validationpopup.remove) {\n          this.validationpopup.remove();\n          this.validationpopuparrow.remove();\n        }\n\n        this.validationpopup = null;\n        this.validationpopuparrow = null;\n\n        if (e === undefined && q === undefined && this.editors && this.editors.length === 0) {\n          return;\n        }\n      }\n\n      if (!this.validationpopup) {\n        var n = a(\"<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>\");\n        var m = a(\"<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>\");\n        n.html(q);\n        m.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n        n.addClass(this.toThemeProperty(\"jqx-grid-validation\"));\n        n.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n        n.prependTo(this.table);\n        m.prependTo(this.table);\n        this.validationpopup = n;\n        this.validationpopuparrow = m;\n      } else {\n        this.validationpopup.html(q);\n      }\n\n      var h = this.hScrollInstance;\n      var j = h.value;\n      var g = parseInt(j);\n\n      if (this.editmode == \"selectedrow\") {\n        if (this.visiblerows && this.visiblerows[this.editcell.visiblerowindex]) {\n          this.validationpopup.css(\"top\", this.visiblerows[this.editcell.visiblerowindex].top + (this.rowsheight + 5) + \"px\");\n        } else {\n          this.validationpopup.css(\"top\", parseInt(a(c.editor).position().top) + (this.rowsheight + 5) + \"px\");\n        }\n      } else {\n        this.validationpopup.css(\"top\", parseInt(a(c.element).parent().position().top) + (this.rowsheight + 5) + \"px\");\n      }\n\n      var b = parseInt(this.validationpopup.css(\"top\"));\n      this.validationpopuparrow.css(\"top\", b - 11);\n      this.validationpopuparrow.removeClass();\n      this.validationpopuparrow.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n\n      var o = this._gettableheight();\n\n      var f = false;\n\n      if (b >= o) {\n        this.validationpopuparrow.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));\n        this.validationpopuparrow.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));\n        b = parseInt(a(c.element).parent().position().top) - this.rowsheight - 5;\n\n        if (this.editmode == \"selectedrow\") {\n          if (this.visiblerows && this.visiblerows[this.editcell.visiblerowindex]) {\n            b = this.visiblerows[this.editcell.visiblerowindex].top - this.rowsheight - 5;\n          } else {\n            b = parseInt(a(c.editor).position().top) - this.rowsheight - 5;\n          }\n        }\n\n        if (b < 0) {\n          b = 0;\n          this.validationpopuparrow.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));\n          f = true;\n        }\n\n        this.validationpopup.css(\"top\", b + \"px\");\n        this.validationpopuparrow.css(\"top\", b + this.validationpopup.outerHeight() - 9);\n      }\n\n      var l = -g + parseInt(a(c.element).position().left);\n      this.validationpopuparrow.css(\"left\", g + l + 30);\n      var d = this.validationpopup.width();\n\n      if (d + l > this.host.width() - 20) {\n        var i = d + l - this.host.width() + 40;\n        l -= i;\n      }\n\n      if (!f) {\n        this.validationpopup.css(\"left\", g + l);\n      } else {\n        this.validationpopup.css(\"left\", g + parseInt(a(c.element).position().left) - this.validationpopup.outerWidth());\n      }\n\n      if (this.editcell.editor.css(\"display\") == \"none\") {\n        this.validationpopup.hide();\n        this.validationpopuparrow.hide();\n      } else {\n        this.validationpopup.show();\n        this.validationpopuparrow.show();\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}